# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ds_ocomms_msgs/ModemSettings.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ds_core_msgs.msg
import genpy
import std_msgs.msg

class ModemSettings(genpy.Message):
  _md5sum = "2970c57aa0f7c200f8f354f9e2ac5e37"
  _type = "ds_ocomms_msgs/ModemSettings"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """# The standard 2-part DsHeader block
# This allows both a standard ROS header and DS-specific header blocks
# See HEADERS.md in ds_core_msgs for details
std_msgs/Header header
ds_core_msgs/DsHeader ds_header

string ip_addr
string netmask
string brdcst
string dfltgw
string dfltip
string dflmac
float64 dflprt
string laripa
string larmac
float64 larprt
string lfpipa
string lfpmac
float64 lfpprt 
string remipa
string raripa
string rarmac
string rsubnt
uint16 brdgen
string brdgip
string guiipa 
string fpg3vr
string fpg6vr
string softvr
uint16 reboot
uint16 dfmode
uint16 master_slaven
uint16 logena
uint16 acsten
uint16 acstmast_slaven
uint16 acstmfg
uint16 lamdid
uint16 ramdid
uint16 sensitivity_ctrl
uint16 lrhaln
uint16 status1hz_enable
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: ds_core_msgs/DsHeader
# This is half our standard header for ds_msgs; see
# HEADERS.md for details

# This header should ALWAYS be paired with a std_msgs/Header
# and should ALWAYS reference HEADERS.md.  If you're looking at this
# file to add headers to a type, you probably want to copy/paste
# the following block:
#
#     # The standard 2-part DsHeader block
#     # This allows both a standard ROS header and DS-specific header blocks
#     # See HEADERS.md in ds_core_msgs for details
#     std_msgs/Header header
#     ds_core_msgs/DsHeader ds_header
#

# Time data was received or sent out (i/o time)
time io_time

# Sensor source UUID
uint8[16] source_uuid

"""
  __slots__ = ['header','ds_header','ip_addr','netmask','brdcst','dfltgw','dfltip','dflmac','dflprt','laripa','larmac','larprt','lfpipa','lfpmac','lfpprt','remipa','raripa','rarmac','rsubnt','brdgen','brdgip','guiipa','fpg3vr','fpg6vr','softvr','reboot','dfmode','master_slaven','logena','acsten','acstmast_slaven','acstmfg','lamdid','ramdid','sensitivity_ctrl','lrhaln','status1hz_enable']
  _slot_types = ['std_msgs/Header','ds_core_msgs/DsHeader','string','string','string','string','string','string','float64','string','string','float64','string','string','float64','string','string','string','string','uint16','string','string','string','string','string','uint16','uint16','uint16','uint16','uint16','uint16','uint16','uint16','uint16','uint16','uint16','uint16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,ds_header,ip_addr,netmask,brdcst,dfltgw,dfltip,dflmac,dflprt,laripa,larmac,larprt,lfpipa,lfpmac,lfpprt,remipa,raripa,rarmac,rsubnt,brdgen,brdgip,guiipa,fpg3vr,fpg6vr,softvr,reboot,dfmode,master_slaven,logena,acsten,acstmast_slaven,acstmfg,lamdid,ramdid,sensitivity_ctrl,lrhaln,status1hz_enable

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ModemSettings, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.ds_header is None:
        self.ds_header = ds_core_msgs.msg.DsHeader()
      if self.ip_addr is None:
        self.ip_addr = ''
      if self.netmask is None:
        self.netmask = ''
      if self.brdcst is None:
        self.brdcst = ''
      if self.dfltgw is None:
        self.dfltgw = ''
      if self.dfltip is None:
        self.dfltip = ''
      if self.dflmac is None:
        self.dflmac = ''
      if self.dflprt is None:
        self.dflprt = 0.
      if self.laripa is None:
        self.laripa = ''
      if self.larmac is None:
        self.larmac = ''
      if self.larprt is None:
        self.larprt = 0.
      if self.lfpipa is None:
        self.lfpipa = ''
      if self.lfpmac is None:
        self.lfpmac = ''
      if self.lfpprt is None:
        self.lfpprt = 0.
      if self.remipa is None:
        self.remipa = ''
      if self.raripa is None:
        self.raripa = ''
      if self.rarmac is None:
        self.rarmac = ''
      if self.rsubnt is None:
        self.rsubnt = ''
      if self.brdgen is None:
        self.brdgen = 0
      if self.brdgip is None:
        self.brdgip = ''
      if self.guiipa is None:
        self.guiipa = ''
      if self.fpg3vr is None:
        self.fpg3vr = ''
      if self.fpg6vr is None:
        self.fpg6vr = ''
      if self.softvr is None:
        self.softvr = ''
      if self.reboot is None:
        self.reboot = 0
      if self.dfmode is None:
        self.dfmode = 0
      if self.master_slaven is None:
        self.master_slaven = 0
      if self.logena is None:
        self.logena = 0
      if self.acsten is None:
        self.acsten = 0
      if self.acstmast_slaven is None:
        self.acstmast_slaven = 0
      if self.acstmfg is None:
        self.acstmfg = 0
      if self.lamdid is None:
        self.lamdid = 0
      if self.ramdid is None:
        self.ramdid = 0
      if self.sensitivity_ctrl is None:
        self.sensitivity_ctrl = 0
      if self.lrhaln is None:
        self.lrhaln = 0
      if self.status1hz_enable is None:
        self.status1hz_enable = 0
    else:
      self.header = std_msgs.msg.Header()
      self.ds_header = ds_core_msgs.msg.DsHeader()
      self.ip_addr = ''
      self.netmask = ''
      self.brdcst = ''
      self.dfltgw = ''
      self.dfltip = ''
      self.dflmac = ''
      self.dflprt = 0.
      self.laripa = ''
      self.larmac = ''
      self.larprt = 0.
      self.lfpipa = ''
      self.lfpmac = ''
      self.lfpprt = 0.
      self.remipa = ''
      self.raripa = ''
      self.rarmac = ''
      self.rsubnt = ''
      self.brdgen = 0
      self.brdgip = ''
      self.guiipa = ''
      self.fpg3vr = ''
      self.fpg6vr = ''
      self.softvr = ''
      self.reboot = 0
      self.dfmode = 0
      self.master_slaven = 0
      self.logena = 0
      self.acsten = 0
      self.acstmast_slaven = 0
      self.acstmfg = 0
      self.lamdid = 0
      self.ramdid = 0
      self.sensitivity_ctrl = 0
      self.lrhaln = 0
      self.status1hz_enable = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.ds_header.io_time.secs, _x.ds_header.io_time.nsecs))
      _x = self.ds_header.source_uuid
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_16B().pack(*_x))
      else:
        buff.write(_get_struct_16s().pack(_x))
      _x = self.ip_addr
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.netmask
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.brdcst
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.dfltgw
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.dfltip
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.dflmac
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.dflprt
      buff.write(_get_struct_d().pack(_x))
      _x = self.laripa
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.larmac
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.larprt
      buff.write(_get_struct_d().pack(_x))
      _x = self.lfpipa
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.lfpmac
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.lfpprt
      buff.write(_get_struct_d().pack(_x))
      _x = self.remipa
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.raripa
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.rarmac
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.rsubnt
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.brdgen
      buff.write(_get_struct_H().pack(_x))
      _x = self.brdgip
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.guiipa
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.fpg3vr
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.fpg6vr
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.softvr
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_12H().pack(_x.reboot, _x.dfmode, _x.master_slaven, _x.logena, _x.acsten, _x.acstmast_slaven, _x.acstmfg, _x.lamdid, _x.ramdid, _x.sensitivity_ctrl, _x.lrhaln, _x.status1hz_enable))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.ds_header is None:
        self.ds_header = ds_core_msgs.msg.DsHeader()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.ds_header.io_time.secs, _x.ds_header.io_time.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 16
      self.ds_header.source_uuid = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ip_addr = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.ip_addr = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.netmask = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.netmask = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.brdcst = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.brdcst = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dfltgw = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.dfltgw = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dfltip = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.dfltip = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dflmac = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.dflmac = str[start:end]
      start = end
      end += 8
      (self.dflprt,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.laripa = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.laripa = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.larmac = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.larmac = str[start:end]
      start = end
      end += 8
      (self.larprt,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.lfpipa = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.lfpipa = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.lfpmac = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.lfpmac = str[start:end]
      start = end
      end += 8
      (self.lfpprt,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.remipa = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.remipa = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.raripa = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.raripa = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rarmac = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.rarmac = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rsubnt = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.rsubnt = str[start:end]
      start = end
      end += 2
      (self.brdgen,) = _get_struct_H().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.brdgip = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.brdgip = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.guiipa = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.guiipa = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.fpg3vr = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.fpg3vr = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.fpg6vr = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.fpg6vr = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.softvr = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.softvr = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.reboot, _x.dfmode, _x.master_slaven, _x.logena, _x.acsten, _x.acstmast_slaven, _x.acstmfg, _x.lamdid, _x.ramdid, _x.sensitivity_ctrl, _x.lrhaln, _x.status1hz_enable,) = _get_struct_12H().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.ds_header.io_time.secs, _x.ds_header.io_time.nsecs))
      _x = self.ds_header.source_uuid
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_16B().pack(*_x))
      else:
        buff.write(_get_struct_16s().pack(_x))
      _x = self.ip_addr
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.netmask
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.brdcst
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.dfltgw
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.dfltip
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.dflmac
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.dflprt
      buff.write(_get_struct_d().pack(_x))
      _x = self.laripa
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.larmac
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.larprt
      buff.write(_get_struct_d().pack(_x))
      _x = self.lfpipa
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.lfpmac
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.lfpprt
      buff.write(_get_struct_d().pack(_x))
      _x = self.remipa
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.raripa
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.rarmac
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.rsubnt
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.brdgen
      buff.write(_get_struct_H().pack(_x))
      _x = self.brdgip
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.guiipa
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.fpg3vr
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.fpg6vr
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.softvr
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_12H().pack(_x.reboot, _x.dfmode, _x.master_slaven, _x.logena, _x.acsten, _x.acstmast_slaven, _x.acstmfg, _x.lamdid, _x.ramdid, _x.sensitivity_ctrl, _x.lrhaln, _x.status1hz_enable))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.ds_header is None:
        self.ds_header = ds_core_msgs.msg.DsHeader()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.ds_header.io_time.secs, _x.ds_header.io_time.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 16
      self.ds_header.source_uuid = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ip_addr = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.ip_addr = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.netmask = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.netmask = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.brdcst = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.brdcst = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dfltgw = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.dfltgw = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dfltip = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.dfltip = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dflmac = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.dflmac = str[start:end]
      start = end
      end += 8
      (self.dflprt,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.laripa = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.laripa = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.larmac = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.larmac = str[start:end]
      start = end
      end += 8
      (self.larprt,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.lfpipa = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.lfpipa = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.lfpmac = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.lfpmac = str[start:end]
      start = end
      end += 8
      (self.lfpprt,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.remipa = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.remipa = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.raripa = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.raripa = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rarmac = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.rarmac = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rsubnt = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.rsubnt = str[start:end]
      start = end
      end += 2
      (self.brdgen,) = _get_struct_H().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.brdgip = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.brdgip = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.guiipa = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.guiipa = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.fpg3vr = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.fpg3vr = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.fpg6vr = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.fpg6vr = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.softvr = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.softvr = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.reboot, _x.dfmode, _x.master_slaven, _x.logena, _x.acsten, _x.acstmast_slaven, _x.acstmfg, _x.lamdid, _x.ramdid, _x.sensitivity_ctrl, _x.lrhaln, _x.status1hz_enable,) = _get_struct_12H().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_12H = None
def _get_struct_12H():
    global _struct_12H
    if _struct_12H is None:
        _struct_12H = struct.Struct("<12H")
    return _struct_12H
_struct_16B = None
def _get_struct_16B():
    global _struct_16B
    if _struct_16B is None:
        _struct_16B = struct.Struct("<16B")
    return _struct_16B
_struct_16s = None
def _get_struct_16s():
    global _struct_16s
    if _struct_16s is None:
        _struct_16s = struct.Struct("<16s")
    return _struct_16s
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_H = None
def _get_struct_H():
    global _struct_H
    if _struct_H is None:
        _struct_H = struct.Struct("<H")
    return _struct_H
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
