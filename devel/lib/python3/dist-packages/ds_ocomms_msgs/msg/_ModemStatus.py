# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ds_ocomms_msgs/ModemStatus.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ds_core_msgs.msg
import genpy
import std_msgs.msg

class ModemStatus(genpy.Message):
  _md5sum = "9c43bac3c7a1d1c07a2a3980312f8cea"
  _type = "ds_ocomms_msgs/ModemStatus"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """# The standard 2-part DsHeader block
# This allows both a standard ROS header and DS-specific header blocks
# See HEADERS.md in ds_core_msgs for details
std_msgs/Header header
ds_core_msgs/DsHeader ds_header

uint16 link_state
string timestamp_date
string timestamp_time
uint16 tdma_mode
float32 carrier_rate
float32 tx_rate
float32 rx_rate
float32 fec_corrects
float32 fec_failure
float32 deadlink_timer
float32 checksum_failures
float32 tx_kbps
float32 rx_kbps 
float32 corr_val 
float32 hv_dac 
float32 dc_adc 
float32 ac_adc 
float32 backscatter_adc 
float32 gating_mode
float32 read_reg_2
float32 read_reg_3
float32 read_reg_4
float32 housing_humidity
float32 housing_temp
float32 env_err
float32 mode_indicator
float32 system_voltage

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: ds_core_msgs/DsHeader
# This is half our standard header for ds_msgs; see
# HEADERS.md for details

# This header should ALWAYS be paired with a std_msgs/Header
# and should ALWAYS reference HEADERS.md.  If you're looking at this
# file to add headers to a type, you probably want to copy/paste
# the following block:
#
#     # The standard 2-part DsHeader block
#     # This allows both a standard ROS header and DS-specific header blocks
#     # See HEADERS.md in ds_core_msgs for details
#     std_msgs/Header header
#     ds_core_msgs/DsHeader ds_header
#

# Time data was received or sent out (i/o time)
time io_time

# Sensor source UUID
uint8[16] source_uuid

"""
  __slots__ = ['header','ds_header','link_state','timestamp_date','timestamp_time','tdma_mode','carrier_rate','tx_rate','rx_rate','fec_corrects','fec_failure','deadlink_timer','checksum_failures','tx_kbps','rx_kbps','corr_val','hv_dac','dc_adc','ac_adc','backscatter_adc','gating_mode','read_reg_2','read_reg_3','read_reg_4','housing_humidity','housing_temp','env_err','mode_indicator','system_voltage']
  _slot_types = ['std_msgs/Header','ds_core_msgs/DsHeader','uint16','string','string','uint16','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,ds_header,link_state,timestamp_date,timestamp_time,tdma_mode,carrier_rate,tx_rate,rx_rate,fec_corrects,fec_failure,deadlink_timer,checksum_failures,tx_kbps,rx_kbps,corr_val,hv_dac,dc_adc,ac_adc,backscatter_adc,gating_mode,read_reg_2,read_reg_3,read_reg_4,housing_humidity,housing_temp,env_err,mode_indicator,system_voltage

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ModemStatus, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.ds_header is None:
        self.ds_header = ds_core_msgs.msg.DsHeader()
      if self.link_state is None:
        self.link_state = 0
      if self.timestamp_date is None:
        self.timestamp_date = ''
      if self.timestamp_time is None:
        self.timestamp_time = ''
      if self.tdma_mode is None:
        self.tdma_mode = 0
      if self.carrier_rate is None:
        self.carrier_rate = 0.
      if self.tx_rate is None:
        self.tx_rate = 0.
      if self.rx_rate is None:
        self.rx_rate = 0.
      if self.fec_corrects is None:
        self.fec_corrects = 0.
      if self.fec_failure is None:
        self.fec_failure = 0.
      if self.deadlink_timer is None:
        self.deadlink_timer = 0.
      if self.checksum_failures is None:
        self.checksum_failures = 0.
      if self.tx_kbps is None:
        self.tx_kbps = 0.
      if self.rx_kbps is None:
        self.rx_kbps = 0.
      if self.corr_val is None:
        self.corr_val = 0.
      if self.hv_dac is None:
        self.hv_dac = 0.
      if self.dc_adc is None:
        self.dc_adc = 0.
      if self.ac_adc is None:
        self.ac_adc = 0.
      if self.backscatter_adc is None:
        self.backscatter_adc = 0.
      if self.gating_mode is None:
        self.gating_mode = 0.
      if self.read_reg_2 is None:
        self.read_reg_2 = 0.
      if self.read_reg_3 is None:
        self.read_reg_3 = 0.
      if self.read_reg_4 is None:
        self.read_reg_4 = 0.
      if self.housing_humidity is None:
        self.housing_humidity = 0.
      if self.housing_temp is None:
        self.housing_temp = 0.
      if self.env_err is None:
        self.env_err = 0.
      if self.mode_indicator is None:
        self.mode_indicator = 0.
      if self.system_voltage is None:
        self.system_voltage = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.ds_header = ds_core_msgs.msg.DsHeader()
      self.link_state = 0
      self.timestamp_date = ''
      self.timestamp_time = ''
      self.tdma_mode = 0
      self.carrier_rate = 0.
      self.tx_rate = 0.
      self.rx_rate = 0.
      self.fec_corrects = 0.
      self.fec_failure = 0.
      self.deadlink_timer = 0.
      self.checksum_failures = 0.
      self.tx_kbps = 0.
      self.rx_kbps = 0.
      self.corr_val = 0.
      self.hv_dac = 0.
      self.dc_adc = 0.
      self.ac_adc = 0.
      self.backscatter_adc = 0.
      self.gating_mode = 0.
      self.read_reg_2 = 0.
      self.read_reg_3 = 0.
      self.read_reg_4 = 0.
      self.housing_humidity = 0.
      self.housing_temp = 0.
      self.env_err = 0.
      self.mode_indicator = 0.
      self.system_voltage = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.ds_header.io_time.secs, _x.ds_header.io_time.nsecs))
      _x = self.ds_header.source_uuid
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_16B().pack(*_x))
      else:
        buff.write(_get_struct_16s().pack(_x))
      _x = self.link_state
      buff.write(_get_struct_H().pack(_x))
      _x = self.timestamp_date
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.timestamp_time
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_H23f().pack(_x.tdma_mode, _x.carrier_rate, _x.tx_rate, _x.rx_rate, _x.fec_corrects, _x.fec_failure, _x.deadlink_timer, _x.checksum_failures, _x.tx_kbps, _x.rx_kbps, _x.corr_val, _x.hv_dac, _x.dc_adc, _x.ac_adc, _x.backscatter_adc, _x.gating_mode, _x.read_reg_2, _x.read_reg_3, _x.read_reg_4, _x.housing_humidity, _x.housing_temp, _x.env_err, _x.mode_indicator, _x.system_voltage))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.ds_header is None:
        self.ds_header = ds_core_msgs.msg.DsHeader()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.ds_header.io_time.secs, _x.ds_header.io_time.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 16
      self.ds_header.source_uuid = str[start:end]
      start = end
      end += 2
      (self.link_state,) = _get_struct_H().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.timestamp_date = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.timestamp_date = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.timestamp_time = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.timestamp_time = str[start:end]
      _x = self
      start = end
      end += 94
      (_x.tdma_mode, _x.carrier_rate, _x.tx_rate, _x.rx_rate, _x.fec_corrects, _x.fec_failure, _x.deadlink_timer, _x.checksum_failures, _x.tx_kbps, _x.rx_kbps, _x.corr_val, _x.hv_dac, _x.dc_adc, _x.ac_adc, _x.backscatter_adc, _x.gating_mode, _x.read_reg_2, _x.read_reg_3, _x.read_reg_4, _x.housing_humidity, _x.housing_temp, _x.env_err, _x.mode_indicator, _x.system_voltage,) = _get_struct_H23f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.ds_header.io_time.secs, _x.ds_header.io_time.nsecs))
      _x = self.ds_header.source_uuid
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_16B().pack(*_x))
      else:
        buff.write(_get_struct_16s().pack(_x))
      _x = self.link_state
      buff.write(_get_struct_H().pack(_x))
      _x = self.timestamp_date
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.timestamp_time
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_H23f().pack(_x.tdma_mode, _x.carrier_rate, _x.tx_rate, _x.rx_rate, _x.fec_corrects, _x.fec_failure, _x.deadlink_timer, _x.checksum_failures, _x.tx_kbps, _x.rx_kbps, _x.corr_val, _x.hv_dac, _x.dc_adc, _x.ac_adc, _x.backscatter_adc, _x.gating_mode, _x.read_reg_2, _x.read_reg_3, _x.read_reg_4, _x.housing_humidity, _x.housing_temp, _x.env_err, _x.mode_indicator, _x.system_voltage))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.ds_header is None:
        self.ds_header = ds_core_msgs.msg.DsHeader()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.ds_header.io_time.secs, _x.ds_header.io_time.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 16
      self.ds_header.source_uuid = str[start:end]
      start = end
      end += 2
      (self.link_state,) = _get_struct_H().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.timestamp_date = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.timestamp_date = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.timestamp_time = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.timestamp_time = str[start:end]
      _x = self
      start = end
      end += 94
      (_x.tdma_mode, _x.carrier_rate, _x.tx_rate, _x.rx_rate, _x.fec_corrects, _x.fec_failure, _x.deadlink_timer, _x.checksum_failures, _x.tx_kbps, _x.rx_kbps, _x.corr_val, _x.hv_dac, _x.dc_adc, _x.ac_adc, _x.backscatter_adc, _x.gating_mode, _x.read_reg_2, _x.read_reg_3, _x.read_reg_4, _x.housing_humidity, _x.housing_temp, _x.env_err, _x.mode_indicator, _x.system_voltage,) = _get_struct_H23f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_16B = None
def _get_struct_16B():
    global _struct_16B
    if _struct_16B is None:
        _struct_16B = struct.Struct("<16B")
    return _struct_16B
_struct_16s = None
def _get_struct_16s():
    global _struct_16s
    if _struct_16s is None:
        _struct_16s = struct.Struct("<16s")
    return _struct_16s
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_H = None
def _get_struct_H():
    global _struct_H
    if _struct_H is None:
        _struct_H = struct.Struct("<H")
    return _struct_H
_struct_H23f = None
def _get_struct_H23f():
    global _struct_H23f
    if _struct_H23f is None:
        _struct_H23f = struct.Struct("<H23f")
    return _struct_H23f
