# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ds_mx_msgs/StdPayloadCommand.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ds_core_msgs.msg
import genpy

class StdPayloadCommand(genpy.Message):
  _md5sum = "e9831eee6c5da4dfb9633972ab3adb90"
  _type = "ds_mx_msgs/StdPayloadCommand"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# This type is a general payload command for use by the Imaging Payload series of Tasks

# This message includes a command to execute and a set of key/value configuration pairs.

# This value indicates that only the config should be updated
uint16 COMMAND_CONFIGONLY=0

# Start imaging
uint16 COMMAND_START=1

# Stop imaging.  Has the same effect as "powerup"
uint16 COMMAND_STOP=2

# Power up the instrument.  Has the same effect as "stop"
uint16 COMMAND_POWERUP=3

# Tells the PayloadManager it should stop the payload and shut it down of noone asks for it in a few minutes
uint16 COMMAND_SHUTDOWN=4

# Tells the PayloadManager
uint16 COMMAND_NEWLINE=5

uint16 command

time stamp

# We also include a dictionary of key/value pairs passed directly from the mission
ds_core_msgs/KeyString[] config

================================================================================
MSG: ds_core_msgs/KeyString
string key
string value
"""
  # Pseudo-constants
  COMMAND_CONFIGONLY = 0
  COMMAND_START = 1
  COMMAND_STOP = 2
  COMMAND_POWERUP = 3
  COMMAND_SHUTDOWN = 4
  COMMAND_NEWLINE = 5

  __slots__ = ['command','stamp','config']
  _slot_types = ['uint16','time','ds_core_msgs/KeyString[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       command,stamp,config

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(StdPayloadCommand, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.command is None:
        self.command = 0
      if self.stamp is None:
        self.stamp = genpy.Time()
      if self.config is None:
        self.config = []
    else:
      self.command = 0
      self.stamp = genpy.Time()
      self.config = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_H2I().pack(_x.command, _x.stamp.secs, _x.stamp.nsecs))
      length = len(self.config)
      buff.write(_struct_I.pack(length))
      for val1 in self.config:
        _x = val1.key
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.value
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      if self.config is None:
        self.config = None
      end = 0
      _x = self
      start = end
      end += 10
      (_x.command, _x.stamp.secs, _x.stamp.nsecs,) = _get_struct_H2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.config = []
      for i in range(0, length):
        val1 = ds_core_msgs.msg.KeyString()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.key = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.key = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.value = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.value = str[start:end]
        self.config.append(val1)
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_H2I().pack(_x.command, _x.stamp.secs, _x.stamp.nsecs))
      length = len(self.config)
      buff.write(_struct_I.pack(length))
      for val1 in self.config:
        _x = val1.key
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.value
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      if self.config is None:
        self.config = None
      end = 0
      _x = self
      start = end
      end += 10
      (_x.command, _x.stamp.secs, _x.stamp.nsecs,) = _get_struct_H2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.config = []
      for i in range(0, length):
        val1 = ds_core_msgs.msg.KeyString()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.key = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.key = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.value = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.value = str[start:end]
        self.config.append(val1)
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_H2I = None
def _get_struct_H2I():
    global _struct_H2I
    if _struct_H2I is None:
        _struct_H2I = struct.Struct("<H2I")
    return _struct_H2I
