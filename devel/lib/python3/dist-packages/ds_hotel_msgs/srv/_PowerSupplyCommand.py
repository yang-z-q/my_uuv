# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ds_hotel_msgs/PowerSupplyCommandRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class PowerSupplyCommandRequest(genpy.Message):
  _md5sum = "050e7f50f3a8223eeeed85211b978aa6"
  _type = "ds_hotel_msgs/PowerSupplyCommandRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 POWERSUPPLY_NODATA = -9999.99


# Set the programmed voltage, in volts
float32 prog_volts

# Set the programmed current limit, in amps
float32 prog_amps

# Set the output enable flag
bool output_enable

# (possibly) lock out the front panel
bool frontpanel_locked

"""
  # Pseudo-constants
  POWERSUPPLY_NODATA = -9999.99

  __slots__ = ['prog_volts','prog_amps','output_enable','frontpanel_locked']
  _slot_types = ['float32','float32','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       prog_volts,prog_amps,output_enable,frontpanel_locked

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PowerSupplyCommandRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.prog_volts is None:
        self.prog_volts = 0.
      if self.prog_amps is None:
        self.prog_amps = 0.
      if self.output_enable is None:
        self.output_enable = False
      if self.frontpanel_locked is None:
        self.frontpanel_locked = False
    else:
      self.prog_volts = 0.
      self.prog_amps = 0.
      self.output_enable = False
      self.frontpanel_locked = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2f2B().pack(_x.prog_volts, _x.prog_amps, _x.output_enable, _x.frontpanel_locked))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 10
      (_x.prog_volts, _x.prog_amps, _x.output_enable, _x.frontpanel_locked,) = _get_struct_2f2B().unpack(str[start:end])
      self.output_enable = bool(self.output_enable)
      self.frontpanel_locked = bool(self.frontpanel_locked)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2f2B().pack(_x.prog_volts, _x.prog_amps, _x.output_enable, _x.frontpanel_locked))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 10
      (_x.prog_volts, _x.prog_amps, _x.output_enable, _x.frontpanel_locked,) = _get_struct_2f2B().unpack(str[start:end])
      self.output_enable = bool(self.output_enable)
      self.frontpanel_locked = bool(self.frontpanel_locked)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2f2B = None
def _get_struct_2f2B():
    global _struct_2f2B
    if _struct_2f2B is None:
        _struct_2f2B = struct.Struct("<2f2B")
    return _struct_2f2B
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ds_hotel_msgs/PowerSupplyCommandResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class PowerSupplyCommandResponse(genpy.Message):
  _md5sum = "358e233cde0c8a8bcfea4ce193f8fc15"
  _type = "ds_hotel_msgs/PowerSupplyCommandResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """
bool success
"""
  __slots__ = ['success']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       success

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PowerSupplyCommandResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.success is None:
        self.success = False
    else:
      self.success = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.success
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.success
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
class PowerSupplyCommand(object):
  _type          = 'ds_hotel_msgs/PowerSupplyCommand'
  _md5sum = '92a8eb080ccfe49cb58ef76ebcef6a5e'
  _request_class  = PowerSupplyCommandRequest
  _response_class = PowerSupplyCommandResponse
