# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ds_hotel_msgs/XrSimState.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class XrSimState(genpy.Message):
  _md5sum = "61a12b72d95554795d5956ac77f9546d"
  _type = "ds_hotel_msgs/XrSimState"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """time stamp

# XR Index
int8 idx

# Actual state of things, as of last report
bool[] dcams_actual
bool[] wires_actual

# Currently-commanded state
bool[] dcams_cmds
bool[] wires_cmds

# Seconds burnwire, etc are to remain active
float32[] motor_secs
float32[] burnwire_secs

# Short deadman
float32 short_deadsecs

# Long deadman
float32 deadsecs

# This is an acoustic command code that gets passed along to the status message
uint8 acoustic_code

# How open a dcam is (from 0% to 100%)
float32[] dcam_open_pct

# Values for burned a wire is.  From "100" for fully intact to "0" 
# for fully burned
float32[] wire_burn_pct
"""
  __slots__ = ['stamp','idx','dcams_actual','wires_actual','dcams_cmds','wires_cmds','motor_secs','burnwire_secs','short_deadsecs','deadsecs','acoustic_code','dcam_open_pct','wire_burn_pct']
  _slot_types = ['time','int8','bool[]','bool[]','bool[]','bool[]','float32[]','float32[]','float32','float32','uint8','float32[]','float32[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       stamp,idx,dcams_actual,wires_actual,dcams_cmds,wires_cmds,motor_secs,burnwire_secs,short_deadsecs,deadsecs,acoustic_code,dcam_open_pct,wire_burn_pct

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(XrSimState, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.stamp is None:
        self.stamp = genpy.Time()
      if self.idx is None:
        self.idx = 0
      if self.dcams_actual is None:
        self.dcams_actual = []
      if self.wires_actual is None:
        self.wires_actual = []
      if self.dcams_cmds is None:
        self.dcams_cmds = []
      if self.wires_cmds is None:
        self.wires_cmds = []
      if self.motor_secs is None:
        self.motor_secs = []
      if self.burnwire_secs is None:
        self.burnwire_secs = []
      if self.short_deadsecs is None:
        self.short_deadsecs = 0.
      if self.deadsecs is None:
        self.deadsecs = 0.
      if self.acoustic_code is None:
        self.acoustic_code = 0
      if self.dcam_open_pct is None:
        self.dcam_open_pct = []
      if self.wire_burn_pct is None:
        self.wire_burn_pct = []
    else:
      self.stamp = genpy.Time()
      self.idx = 0
      self.dcams_actual = []
      self.wires_actual = []
      self.dcams_cmds = []
      self.wires_cmds = []
      self.motor_secs = []
      self.burnwire_secs = []
      self.short_deadsecs = 0.
      self.deadsecs = 0.
      self.acoustic_code = 0
      self.dcam_open_pct = []
      self.wire_burn_pct = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2Ib().pack(_x.stamp.secs, _x.stamp.nsecs, _x.idx))
      length = len(self.dcams_actual)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.dcams_actual))
      length = len(self.wires_actual)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.wires_actual))
      length = len(self.dcams_cmds)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.dcams_cmds))
      length = len(self.wires_cmds)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.wires_cmds))
      length = len(self.motor_secs)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.motor_secs))
      length = len(self.burnwire_secs)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.burnwire_secs))
      _x = self
      buff.write(_get_struct_2fB().pack(_x.short_deadsecs, _x.deadsecs, _x.acoustic_code))
      length = len(self.dcam_open_pct)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.dcam_open_pct))
      length = len(self.wire_burn_pct)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.wire_burn_pct))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 9
      (_x.stamp.secs, _x.stamp.nsecs, _x.idx,) = _get_struct_2Ib().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.dcams_actual = s.unpack(str[start:end])
      self.dcams_actual = list(map(bool, self.dcams_actual))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.wires_actual = s.unpack(str[start:end])
      self.wires_actual = list(map(bool, self.wires_actual))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.dcams_cmds = s.unpack(str[start:end])
      self.dcams_cmds = list(map(bool, self.dcams_cmds))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.wires_cmds = s.unpack(str[start:end])
      self.wires_cmds = list(map(bool, self.wires_cmds))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.motor_secs = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.burnwire_secs = s.unpack(str[start:end])
      _x = self
      start = end
      end += 9
      (_x.short_deadsecs, _x.deadsecs, _x.acoustic_code,) = _get_struct_2fB().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.dcam_open_pct = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.wire_burn_pct = s.unpack(str[start:end])
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2Ib().pack(_x.stamp.secs, _x.stamp.nsecs, _x.idx))
      length = len(self.dcams_actual)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.dcams_actual.tostring())
      length = len(self.wires_actual)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.wires_actual.tostring())
      length = len(self.dcams_cmds)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.dcams_cmds.tostring())
      length = len(self.wires_cmds)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.wires_cmds.tostring())
      length = len(self.motor_secs)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.motor_secs.tostring())
      length = len(self.burnwire_secs)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.burnwire_secs.tostring())
      _x = self
      buff.write(_get_struct_2fB().pack(_x.short_deadsecs, _x.deadsecs, _x.acoustic_code))
      length = len(self.dcam_open_pct)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.dcam_open_pct.tostring())
      length = len(self.wire_burn_pct)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.wire_burn_pct.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 9
      (_x.stamp.secs, _x.stamp.nsecs, _x.idx,) = _get_struct_2Ib().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.dcams_actual = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.dcams_actual = list(map(bool, self.dcams_actual))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.wires_actual = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.wires_actual = list(map(bool, self.wires_actual))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.dcams_cmds = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.dcams_cmds = list(map(bool, self.dcams_cmds))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.wires_cmds = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.wires_cmds = list(map(bool, self.wires_cmds))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.motor_secs = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.burnwire_secs = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 9
      (_x.short_deadsecs, _x.deadsecs, _x.acoustic_code,) = _get_struct_2fB().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.dcam_open_pct = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.wire_burn_pct = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2Ib = None
def _get_struct_2Ib():
    global _struct_2Ib
    if _struct_2Ib is None:
        _struct_2Ib = struct.Struct("<2Ib")
    return _struct_2Ib
_struct_2fB = None
def _get_struct_2fB():
    global _struct_2fB
    if _struct_2fB is None:
        _struct_2fB = struct.Struct("<2fB")
    return _struct_2fB
