# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ds_hotel_msgs/XR.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ds_core_msgs.msg
import genpy
import std_msgs.msg

class XR(genpy.Message):
  _md5sum = "41e931f913d53ac030a55593d2a20e47"
  _type = "ds_hotel_msgs/XR"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """# The standard 2-part DsHeader block
# This allows both a standard ROS header and DS-specific header blocks
# See HEADERS.md in ds_core_msgs for details
std_msgs/Header header
ds_core_msgs/DsHeader ds_header

float64 deadhour
bool good
string address
uint16 idnum

#############
# code_status

uint8 C

################
# release_status

# valve system control word
uint8 V
uint8 valve_current_level
bool valve_run
bool valve_open
bool valve_battery_set_on
bool valve_battery_set_off

# motor release control word
uint8 M
bool motor_2_drop
bool motor_2_hold
bool motor_1_drop
bool motor_1_hold

# analog mux and nichrome word
uint8 A
bool burnwire_1_drive
bool burnwire_2_drive

#M1 M2 motors count down until stop driving
uint8 motor_1_secs
uint8 motor_2_secs

#N1 N2 nichrone burn wire statuses
uint16 burnwire_1_secs
uint16 burnwire_2_secs

#TR short deadman (reset by don't abort message)
uint8 short_deadsecs

#TV short idle deadman (usually disabled)
uint8 short_deadsecs_idle

#long deadman
int32 deadsecs

#################
# deadhour_status
int32 Dd
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: ds_core_msgs/DsHeader
# This is half our standard header for ds_msgs; see
# HEADERS.md for details

# This header should ALWAYS be paired with a std_msgs/Header
# and should ALWAYS reference HEADERS.md.  If you're looking at this
# file to add headers to a type, you probably want to copy/paste
# the following block:
#
#     # The standard 2-part DsHeader block
#     # This allows both a standard ROS header and DS-specific header blocks
#     # See HEADERS.md in ds_core_msgs for details
#     std_msgs/Header header
#     ds_core_msgs/DsHeader ds_header
#

# Time data was received or sent out (i/o time)
time io_time

# Sensor source UUID
uint8[16] source_uuid

"""
  __slots__ = ['header','ds_header','deadhour','good','address','idnum','C','V','valve_current_level','valve_run','valve_open','valve_battery_set_on','valve_battery_set_off','M','motor_2_drop','motor_2_hold','motor_1_drop','motor_1_hold','A','burnwire_1_drive','burnwire_2_drive','motor_1_secs','motor_2_secs','burnwire_1_secs','burnwire_2_secs','short_deadsecs','short_deadsecs_idle','deadsecs','Dd']
  _slot_types = ['std_msgs/Header','ds_core_msgs/DsHeader','float64','bool','string','uint16','uint8','uint8','uint8','bool','bool','bool','bool','uint8','bool','bool','bool','bool','uint8','bool','bool','uint8','uint8','uint16','uint16','uint8','uint8','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,ds_header,deadhour,good,address,idnum,C,V,valve_current_level,valve_run,valve_open,valve_battery_set_on,valve_battery_set_off,M,motor_2_drop,motor_2_hold,motor_1_drop,motor_1_hold,A,burnwire_1_drive,burnwire_2_drive,motor_1_secs,motor_2_secs,burnwire_1_secs,burnwire_2_secs,short_deadsecs,short_deadsecs_idle,deadsecs,Dd

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(XR, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.ds_header is None:
        self.ds_header = ds_core_msgs.msg.DsHeader()
      if self.deadhour is None:
        self.deadhour = 0.
      if self.good is None:
        self.good = False
      if self.address is None:
        self.address = ''
      if self.idnum is None:
        self.idnum = 0
      if self.C is None:
        self.C = 0
      if self.V is None:
        self.V = 0
      if self.valve_current_level is None:
        self.valve_current_level = 0
      if self.valve_run is None:
        self.valve_run = False
      if self.valve_open is None:
        self.valve_open = False
      if self.valve_battery_set_on is None:
        self.valve_battery_set_on = False
      if self.valve_battery_set_off is None:
        self.valve_battery_set_off = False
      if self.M is None:
        self.M = 0
      if self.motor_2_drop is None:
        self.motor_2_drop = False
      if self.motor_2_hold is None:
        self.motor_2_hold = False
      if self.motor_1_drop is None:
        self.motor_1_drop = False
      if self.motor_1_hold is None:
        self.motor_1_hold = False
      if self.A is None:
        self.A = 0
      if self.burnwire_1_drive is None:
        self.burnwire_1_drive = False
      if self.burnwire_2_drive is None:
        self.burnwire_2_drive = False
      if self.motor_1_secs is None:
        self.motor_1_secs = 0
      if self.motor_2_secs is None:
        self.motor_2_secs = 0
      if self.burnwire_1_secs is None:
        self.burnwire_1_secs = 0
      if self.burnwire_2_secs is None:
        self.burnwire_2_secs = 0
      if self.short_deadsecs is None:
        self.short_deadsecs = 0
      if self.short_deadsecs_idle is None:
        self.short_deadsecs_idle = 0
      if self.deadsecs is None:
        self.deadsecs = 0
      if self.Dd is None:
        self.Dd = 0
    else:
      self.header = std_msgs.msg.Header()
      self.ds_header = ds_core_msgs.msg.DsHeader()
      self.deadhour = 0.
      self.good = False
      self.address = ''
      self.idnum = 0
      self.C = 0
      self.V = 0
      self.valve_current_level = 0
      self.valve_run = False
      self.valve_open = False
      self.valve_battery_set_on = False
      self.valve_battery_set_off = False
      self.M = 0
      self.motor_2_drop = False
      self.motor_2_hold = False
      self.motor_1_drop = False
      self.motor_1_hold = False
      self.A = 0
      self.burnwire_1_drive = False
      self.burnwire_2_drive = False
      self.motor_1_secs = 0
      self.motor_2_secs = 0
      self.burnwire_1_secs = 0
      self.burnwire_2_secs = 0
      self.short_deadsecs = 0
      self.short_deadsecs_idle = 0
      self.deadsecs = 0
      self.Dd = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.ds_header.io_time.secs, _x.ds_header.io_time.nsecs))
      _x = self.ds_header.source_uuid
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_16B().pack(*_x))
      else:
        buff.write(_get_struct_16s().pack(_x))
      _x = self
      buff.write(_get_struct_dB().pack(_x.deadhour, _x.good))
      _x = self.address
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_H17B2H2B2i().pack(_x.idnum, _x.C, _x.V, _x.valve_current_level, _x.valve_run, _x.valve_open, _x.valve_battery_set_on, _x.valve_battery_set_off, _x.M, _x.motor_2_drop, _x.motor_2_hold, _x.motor_1_drop, _x.motor_1_hold, _x.A, _x.burnwire_1_drive, _x.burnwire_2_drive, _x.motor_1_secs, _x.motor_2_secs, _x.burnwire_1_secs, _x.burnwire_2_secs, _x.short_deadsecs, _x.short_deadsecs_idle, _x.deadsecs, _x.Dd))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.ds_header is None:
        self.ds_header = ds_core_msgs.msg.DsHeader()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.ds_header.io_time.secs, _x.ds_header.io_time.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 16
      self.ds_header.source_uuid = str[start:end]
      _x = self
      start = end
      end += 9
      (_x.deadhour, _x.good,) = _get_struct_dB().unpack(str[start:end])
      self.good = bool(self.good)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.address = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.address = str[start:end]
      _x = self
      start = end
      end += 33
      (_x.idnum, _x.C, _x.V, _x.valve_current_level, _x.valve_run, _x.valve_open, _x.valve_battery_set_on, _x.valve_battery_set_off, _x.M, _x.motor_2_drop, _x.motor_2_hold, _x.motor_1_drop, _x.motor_1_hold, _x.A, _x.burnwire_1_drive, _x.burnwire_2_drive, _x.motor_1_secs, _x.motor_2_secs, _x.burnwire_1_secs, _x.burnwire_2_secs, _x.short_deadsecs, _x.short_deadsecs_idle, _x.deadsecs, _x.Dd,) = _get_struct_H17B2H2B2i().unpack(str[start:end])
      self.valve_run = bool(self.valve_run)
      self.valve_open = bool(self.valve_open)
      self.valve_battery_set_on = bool(self.valve_battery_set_on)
      self.valve_battery_set_off = bool(self.valve_battery_set_off)
      self.motor_2_drop = bool(self.motor_2_drop)
      self.motor_2_hold = bool(self.motor_2_hold)
      self.motor_1_drop = bool(self.motor_1_drop)
      self.motor_1_hold = bool(self.motor_1_hold)
      self.burnwire_1_drive = bool(self.burnwire_1_drive)
      self.burnwire_2_drive = bool(self.burnwire_2_drive)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.ds_header.io_time.secs, _x.ds_header.io_time.nsecs))
      _x = self.ds_header.source_uuid
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_16B().pack(*_x))
      else:
        buff.write(_get_struct_16s().pack(_x))
      _x = self
      buff.write(_get_struct_dB().pack(_x.deadhour, _x.good))
      _x = self.address
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_H17B2H2B2i().pack(_x.idnum, _x.C, _x.V, _x.valve_current_level, _x.valve_run, _x.valve_open, _x.valve_battery_set_on, _x.valve_battery_set_off, _x.M, _x.motor_2_drop, _x.motor_2_hold, _x.motor_1_drop, _x.motor_1_hold, _x.A, _x.burnwire_1_drive, _x.burnwire_2_drive, _x.motor_1_secs, _x.motor_2_secs, _x.burnwire_1_secs, _x.burnwire_2_secs, _x.short_deadsecs, _x.short_deadsecs_idle, _x.deadsecs, _x.Dd))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.ds_header is None:
        self.ds_header = ds_core_msgs.msg.DsHeader()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.ds_header.io_time.secs, _x.ds_header.io_time.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 16
      self.ds_header.source_uuid = str[start:end]
      _x = self
      start = end
      end += 9
      (_x.deadhour, _x.good,) = _get_struct_dB().unpack(str[start:end])
      self.good = bool(self.good)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.address = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.address = str[start:end]
      _x = self
      start = end
      end += 33
      (_x.idnum, _x.C, _x.V, _x.valve_current_level, _x.valve_run, _x.valve_open, _x.valve_battery_set_on, _x.valve_battery_set_off, _x.M, _x.motor_2_drop, _x.motor_2_hold, _x.motor_1_drop, _x.motor_1_hold, _x.A, _x.burnwire_1_drive, _x.burnwire_2_drive, _x.motor_1_secs, _x.motor_2_secs, _x.burnwire_1_secs, _x.burnwire_2_secs, _x.short_deadsecs, _x.short_deadsecs_idle, _x.deadsecs, _x.Dd,) = _get_struct_H17B2H2B2i().unpack(str[start:end])
      self.valve_run = bool(self.valve_run)
      self.valve_open = bool(self.valve_open)
      self.valve_battery_set_on = bool(self.valve_battery_set_on)
      self.valve_battery_set_off = bool(self.valve_battery_set_off)
      self.motor_2_drop = bool(self.motor_2_drop)
      self.motor_2_hold = bool(self.motor_2_hold)
      self.motor_1_drop = bool(self.motor_1_drop)
      self.motor_1_hold = bool(self.motor_1_hold)
      self.burnwire_1_drive = bool(self.burnwire_1_drive)
      self.burnwire_2_drive = bool(self.burnwire_2_drive)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_16B = None
def _get_struct_16B():
    global _struct_16B
    if _struct_16B is None:
        _struct_16B = struct.Struct("<16B")
    return _struct_16B
_struct_16s = None
def _get_struct_16s():
    global _struct_16s
    if _struct_16s is None:
        _struct_16s = struct.Struct("<16s")
    return _struct_16s
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_H17B2H2B2i = None
def _get_struct_H17B2H2B2i():
    global _struct_H17B2H2B2i
    if _struct_H17B2H2B2i is None:
        _struct_H17B2H2B2i = struct.Struct("<H17B2H2B2i")
    return _struct_H17B2H2B2i
_struct_dB = None
def _get_struct_dB():
    global _struct_dB
    if _struct_dB is None:
        _struct_dB = struct.Struct("<dB")
    return _struct_dB
