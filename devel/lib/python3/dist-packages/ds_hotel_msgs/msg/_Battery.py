# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ds_hotel_msgs/Battery.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ds_core_msgs.msg
import genpy
import std_msgs.msg

class Battery(genpy.Message):
  _md5sum = "1bb7946b3ab6500c9bb6c36fee0dac39"
  _type = "ds_hotel_msgs/Battery"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """# The standard 2-part DsHeader block
# This allows both a standard ROS header and DS-specific header blocks
# See HEADERS.md in ds_core_msgs for details
std_msgs/Header header
ds_core_msgs/DsHeader ds_header

int32 idnum

float32[] voltages      #V
uint16[] temperatures   #deg C

float32 maxCellVoltage
float32 minCellVoltage
uint16 maxCellTemp
uint16 minCellTemp

float32 totalVoltage     # V
uint16 switchTemp       # deg C
uint32 countFull        # Raw counts
uint32 countCapacity    # countCapacity = countUsed + countAvailable
uint32 countFreerun
int32 countUsed
int32 countAvailable
bool balanceEnable
float64 balanceGain
float64 balanceOnsetVoltage
float64 balanceMaxCurrent
uint64 balanceCommandId

# Raw Batttery status info
bool charging
bool discharging
int32 safetyCode
int32 problemLocation
int32 numScans
int32 overflowCount
int32 timeoutCount
int32 timeoutLocation
int32 uptime
int32 fixCount
string safetyString
string interruptProblemLocation

# Calculated status info
uint16 errorStatus
float64 capacityCoulombs  # Capacity of this battery, in Amp*hours
float64 capacityAh
float64 chargeCoulombs    # Charge currently in the battery, in Amp*hours
float64 chargeAh
float64 percentFull       # Battery capacity as a percentage

uint64 repeatingCommandId
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: ds_core_msgs/DsHeader
# This is half our standard header for ds_msgs; see
# HEADERS.md for details

# This header should ALWAYS be paired with a std_msgs/Header
# and should ALWAYS reference HEADERS.md.  If you're looking at this
# file to add headers to a type, you probably want to copy/paste
# the following block:
#
#     # The standard 2-part DsHeader block
#     # This allows both a standard ROS header and DS-specific header blocks
#     # See HEADERS.md in ds_core_msgs for details
#     std_msgs/Header header
#     ds_core_msgs/DsHeader ds_header
#

# Time data was received or sent out (i/o time)
time io_time

# Sensor source UUID
uint8[16] source_uuid

"""
  __slots__ = ['header','ds_header','idnum','voltages','temperatures','maxCellVoltage','minCellVoltage','maxCellTemp','minCellTemp','totalVoltage','switchTemp','countFull','countCapacity','countFreerun','countUsed','countAvailable','balanceEnable','balanceGain','balanceOnsetVoltage','balanceMaxCurrent','balanceCommandId','charging','discharging','safetyCode','problemLocation','numScans','overflowCount','timeoutCount','timeoutLocation','uptime','fixCount','safetyString','interruptProblemLocation','errorStatus','capacityCoulombs','capacityAh','chargeCoulombs','chargeAh','percentFull','repeatingCommandId']
  _slot_types = ['std_msgs/Header','ds_core_msgs/DsHeader','int32','float32[]','uint16[]','float32','float32','uint16','uint16','float32','uint16','uint32','uint32','uint32','int32','int32','bool','float64','float64','float64','uint64','bool','bool','int32','int32','int32','int32','int32','int32','int32','int32','string','string','uint16','float64','float64','float64','float64','float64','uint64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,ds_header,idnum,voltages,temperatures,maxCellVoltage,minCellVoltage,maxCellTemp,minCellTemp,totalVoltage,switchTemp,countFull,countCapacity,countFreerun,countUsed,countAvailable,balanceEnable,balanceGain,balanceOnsetVoltage,balanceMaxCurrent,balanceCommandId,charging,discharging,safetyCode,problemLocation,numScans,overflowCount,timeoutCount,timeoutLocation,uptime,fixCount,safetyString,interruptProblemLocation,errorStatus,capacityCoulombs,capacityAh,chargeCoulombs,chargeAh,percentFull,repeatingCommandId

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Battery, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.ds_header is None:
        self.ds_header = ds_core_msgs.msg.DsHeader()
      if self.idnum is None:
        self.idnum = 0
      if self.voltages is None:
        self.voltages = []
      if self.temperatures is None:
        self.temperatures = []
      if self.maxCellVoltage is None:
        self.maxCellVoltage = 0.
      if self.minCellVoltage is None:
        self.minCellVoltage = 0.
      if self.maxCellTemp is None:
        self.maxCellTemp = 0
      if self.minCellTemp is None:
        self.minCellTemp = 0
      if self.totalVoltage is None:
        self.totalVoltage = 0.
      if self.switchTemp is None:
        self.switchTemp = 0
      if self.countFull is None:
        self.countFull = 0
      if self.countCapacity is None:
        self.countCapacity = 0
      if self.countFreerun is None:
        self.countFreerun = 0
      if self.countUsed is None:
        self.countUsed = 0
      if self.countAvailable is None:
        self.countAvailable = 0
      if self.balanceEnable is None:
        self.balanceEnable = False
      if self.balanceGain is None:
        self.balanceGain = 0.
      if self.balanceOnsetVoltage is None:
        self.balanceOnsetVoltage = 0.
      if self.balanceMaxCurrent is None:
        self.balanceMaxCurrent = 0.
      if self.balanceCommandId is None:
        self.balanceCommandId = 0
      if self.charging is None:
        self.charging = False
      if self.discharging is None:
        self.discharging = False
      if self.safetyCode is None:
        self.safetyCode = 0
      if self.problemLocation is None:
        self.problemLocation = 0
      if self.numScans is None:
        self.numScans = 0
      if self.overflowCount is None:
        self.overflowCount = 0
      if self.timeoutCount is None:
        self.timeoutCount = 0
      if self.timeoutLocation is None:
        self.timeoutLocation = 0
      if self.uptime is None:
        self.uptime = 0
      if self.fixCount is None:
        self.fixCount = 0
      if self.safetyString is None:
        self.safetyString = ''
      if self.interruptProblemLocation is None:
        self.interruptProblemLocation = ''
      if self.errorStatus is None:
        self.errorStatus = 0
      if self.capacityCoulombs is None:
        self.capacityCoulombs = 0.
      if self.capacityAh is None:
        self.capacityAh = 0.
      if self.chargeCoulombs is None:
        self.chargeCoulombs = 0.
      if self.chargeAh is None:
        self.chargeAh = 0.
      if self.percentFull is None:
        self.percentFull = 0.
      if self.repeatingCommandId is None:
        self.repeatingCommandId = 0
    else:
      self.header = std_msgs.msg.Header()
      self.ds_header = ds_core_msgs.msg.DsHeader()
      self.idnum = 0
      self.voltages = []
      self.temperatures = []
      self.maxCellVoltage = 0.
      self.minCellVoltage = 0.
      self.maxCellTemp = 0
      self.minCellTemp = 0
      self.totalVoltage = 0.
      self.switchTemp = 0
      self.countFull = 0
      self.countCapacity = 0
      self.countFreerun = 0
      self.countUsed = 0
      self.countAvailable = 0
      self.balanceEnable = False
      self.balanceGain = 0.
      self.balanceOnsetVoltage = 0.
      self.balanceMaxCurrent = 0.
      self.balanceCommandId = 0
      self.charging = False
      self.discharging = False
      self.safetyCode = 0
      self.problemLocation = 0
      self.numScans = 0
      self.overflowCount = 0
      self.timeoutCount = 0
      self.timeoutLocation = 0
      self.uptime = 0
      self.fixCount = 0
      self.safetyString = ''
      self.interruptProblemLocation = ''
      self.errorStatus = 0
      self.capacityCoulombs = 0.
      self.capacityAh = 0.
      self.chargeCoulombs = 0.
      self.chargeAh = 0.
      self.percentFull = 0.
      self.repeatingCommandId = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.ds_header.io_time.secs, _x.ds_header.io_time.nsecs))
      _x = self.ds_header.source_uuid
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_16B().pack(*_x))
      else:
        buff.write(_get_struct_16s().pack(_x))
      _x = self.idnum
      buff.write(_get_struct_i().pack(_x))
      length = len(self.voltages)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.voltages))
      length = len(self.temperatures)
      buff.write(_struct_I.pack(length))
      pattern = '<%sH'%length
      buff.write(struct.Struct(pattern).pack(*self.temperatures))
      _x = self
      buff.write(_get_struct_2f2HfH3I2iB3dQ2B8i().pack(_x.maxCellVoltage, _x.minCellVoltage, _x.maxCellTemp, _x.minCellTemp, _x.totalVoltage, _x.switchTemp, _x.countFull, _x.countCapacity, _x.countFreerun, _x.countUsed, _x.countAvailable, _x.balanceEnable, _x.balanceGain, _x.balanceOnsetVoltage, _x.balanceMaxCurrent, _x.balanceCommandId, _x.charging, _x.discharging, _x.safetyCode, _x.problemLocation, _x.numScans, _x.overflowCount, _x.timeoutCount, _x.timeoutLocation, _x.uptime, _x.fixCount))
      _x = self.safetyString
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.interruptProblemLocation
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_H5dQ().pack(_x.errorStatus, _x.capacityCoulombs, _x.capacityAh, _x.chargeCoulombs, _x.chargeAh, _x.percentFull, _x.repeatingCommandId))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.ds_header is None:
        self.ds_header = ds_core_msgs.msg.DsHeader()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.ds_header.io_time.secs, _x.ds_header.io_time.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 16
      self.ds_header.source_uuid = str[start:end]
      start = end
      end += 4
      (self.idnum,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.voltages = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sH'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.temperatures = s.unpack(str[start:end])
      _x = self
      start = end
      end += 105
      (_x.maxCellVoltage, _x.minCellVoltage, _x.maxCellTemp, _x.minCellTemp, _x.totalVoltage, _x.switchTemp, _x.countFull, _x.countCapacity, _x.countFreerun, _x.countUsed, _x.countAvailable, _x.balanceEnable, _x.balanceGain, _x.balanceOnsetVoltage, _x.balanceMaxCurrent, _x.balanceCommandId, _x.charging, _x.discharging, _x.safetyCode, _x.problemLocation, _x.numScans, _x.overflowCount, _x.timeoutCount, _x.timeoutLocation, _x.uptime, _x.fixCount,) = _get_struct_2f2HfH3I2iB3dQ2B8i().unpack(str[start:end])
      self.balanceEnable = bool(self.balanceEnable)
      self.charging = bool(self.charging)
      self.discharging = bool(self.discharging)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.safetyString = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.safetyString = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.interruptProblemLocation = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.interruptProblemLocation = str[start:end]
      _x = self
      start = end
      end += 50
      (_x.errorStatus, _x.capacityCoulombs, _x.capacityAh, _x.chargeCoulombs, _x.chargeAh, _x.percentFull, _x.repeatingCommandId,) = _get_struct_H5dQ().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.ds_header.io_time.secs, _x.ds_header.io_time.nsecs))
      _x = self.ds_header.source_uuid
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_16B().pack(*_x))
      else:
        buff.write(_get_struct_16s().pack(_x))
      _x = self.idnum
      buff.write(_get_struct_i().pack(_x))
      length = len(self.voltages)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.voltages.tostring())
      length = len(self.temperatures)
      buff.write(_struct_I.pack(length))
      pattern = '<%sH'%length
      buff.write(self.temperatures.tostring())
      _x = self
      buff.write(_get_struct_2f2HfH3I2iB3dQ2B8i().pack(_x.maxCellVoltage, _x.minCellVoltage, _x.maxCellTemp, _x.minCellTemp, _x.totalVoltage, _x.switchTemp, _x.countFull, _x.countCapacity, _x.countFreerun, _x.countUsed, _x.countAvailable, _x.balanceEnable, _x.balanceGain, _x.balanceOnsetVoltage, _x.balanceMaxCurrent, _x.balanceCommandId, _x.charging, _x.discharging, _x.safetyCode, _x.problemLocation, _x.numScans, _x.overflowCount, _x.timeoutCount, _x.timeoutLocation, _x.uptime, _x.fixCount))
      _x = self.safetyString
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.interruptProblemLocation
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_H5dQ().pack(_x.errorStatus, _x.capacityCoulombs, _x.capacityAh, _x.chargeCoulombs, _x.chargeAh, _x.percentFull, _x.repeatingCommandId))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.ds_header is None:
        self.ds_header = ds_core_msgs.msg.DsHeader()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.ds_header.io_time.secs, _x.ds_header.io_time.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 16
      self.ds_header.source_uuid = str[start:end]
      start = end
      end += 4
      (self.idnum,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.voltages = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sH'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.temperatures = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=length)
      _x = self
      start = end
      end += 105
      (_x.maxCellVoltage, _x.minCellVoltage, _x.maxCellTemp, _x.minCellTemp, _x.totalVoltage, _x.switchTemp, _x.countFull, _x.countCapacity, _x.countFreerun, _x.countUsed, _x.countAvailable, _x.balanceEnable, _x.balanceGain, _x.balanceOnsetVoltage, _x.balanceMaxCurrent, _x.balanceCommandId, _x.charging, _x.discharging, _x.safetyCode, _x.problemLocation, _x.numScans, _x.overflowCount, _x.timeoutCount, _x.timeoutLocation, _x.uptime, _x.fixCount,) = _get_struct_2f2HfH3I2iB3dQ2B8i().unpack(str[start:end])
      self.balanceEnable = bool(self.balanceEnable)
      self.charging = bool(self.charging)
      self.discharging = bool(self.discharging)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.safetyString = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.safetyString = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.interruptProblemLocation = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.interruptProblemLocation = str[start:end]
      _x = self
      start = end
      end += 50
      (_x.errorStatus, _x.capacityCoulombs, _x.capacityAh, _x.chargeCoulombs, _x.chargeAh, _x.percentFull, _x.repeatingCommandId,) = _get_struct_H5dQ().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_16B = None
def _get_struct_16B():
    global _struct_16B
    if _struct_16B is None:
        _struct_16B = struct.Struct("<16B")
    return _struct_16B
_struct_16s = None
def _get_struct_16s():
    global _struct_16s
    if _struct_16s is None:
        _struct_16s = struct.Struct("<16s")
    return _struct_16s
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_2f2HfH3I2iB3dQ2B8i = None
def _get_struct_2f2HfH3I2iB3dQ2B8i():
    global _struct_2f2HfH3I2iB3dQ2B8i
    if _struct_2f2HfH3I2iB3dQ2B8i is None:
        _struct_2f2HfH3I2iB3dQ2B8i = struct.Struct("<2f2HfH3I2iB3dQ2B8i")
    return _struct_2f2HfH3I2iB3dQ2B8i
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_H5dQ = None
def _get_struct_H5dQ():
    global _struct_H5dQ
    if _struct_H5dQ is None:
        _struct_H5dQ = struct.Struct("<H5dQ")
    return _struct_H5dQ
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
