# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ds_hotel_msgs/ClioBatteryPack.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ClioBatteryPack(genpy.Message):
  _md5sum = "81159155732e0b252a571879fe1e4c2e"
  _type = "ds_hotel_msgs/ClioBatteryPack"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Per-pack
float32 temperature # deg C
float32 voltage # V
float32 current
float32 avgCurrent
uint16 maxError
float32 relativeSOC # percent
float32 absoluteSOC # percent
float32 remainingCapacity # Remaining capacity in Amp*hours
float32 fullCapacity # Predicted capacity when fully charged in Amp*hours
uint16 status
float32 countCycle
float32 capacityDesign
string dateManufacture
uint16 serialNumber
# high / mid / low refer to the arrangement of cells within 
# the pack, NOT to which has the highest voltage
float32 highCellVoltage
float32 mid1CellVoltage
float32 mid2CellVoltage
float32 lowCellVoltage

"""
  __slots__ = ['temperature','voltage','current','avgCurrent','maxError','relativeSOC','absoluteSOC','remainingCapacity','fullCapacity','status','countCycle','capacityDesign','dateManufacture','serialNumber','highCellVoltage','mid1CellVoltage','mid2CellVoltage','lowCellVoltage']
  _slot_types = ['float32','float32','float32','float32','uint16','float32','float32','float32','float32','uint16','float32','float32','string','uint16','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       temperature,voltage,current,avgCurrent,maxError,relativeSOC,absoluteSOC,remainingCapacity,fullCapacity,status,countCycle,capacityDesign,dateManufacture,serialNumber,highCellVoltage,mid1CellVoltage,mid2CellVoltage,lowCellVoltage

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ClioBatteryPack, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.temperature is None:
        self.temperature = 0.
      if self.voltage is None:
        self.voltage = 0.
      if self.current is None:
        self.current = 0.
      if self.avgCurrent is None:
        self.avgCurrent = 0.
      if self.maxError is None:
        self.maxError = 0
      if self.relativeSOC is None:
        self.relativeSOC = 0.
      if self.absoluteSOC is None:
        self.absoluteSOC = 0.
      if self.remainingCapacity is None:
        self.remainingCapacity = 0.
      if self.fullCapacity is None:
        self.fullCapacity = 0.
      if self.status is None:
        self.status = 0
      if self.countCycle is None:
        self.countCycle = 0.
      if self.capacityDesign is None:
        self.capacityDesign = 0.
      if self.dateManufacture is None:
        self.dateManufacture = ''
      if self.serialNumber is None:
        self.serialNumber = 0
      if self.highCellVoltage is None:
        self.highCellVoltage = 0.
      if self.mid1CellVoltage is None:
        self.mid1CellVoltage = 0.
      if self.mid2CellVoltage is None:
        self.mid2CellVoltage = 0.
      if self.lowCellVoltage is None:
        self.lowCellVoltage = 0.
    else:
      self.temperature = 0.
      self.voltage = 0.
      self.current = 0.
      self.avgCurrent = 0.
      self.maxError = 0
      self.relativeSOC = 0.
      self.absoluteSOC = 0.
      self.remainingCapacity = 0.
      self.fullCapacity = 0.
      self.status = 0
      self.countCycle = 0.
      self.capacityDesign = 0.
      self.dateManufacture = ''
      self.serialNumber = 0
      self.highCellVoltage = 0.
      self.mid1CellVoltage = 0.
      self.mid2CellVoltage = 0.
      self.lowCellVoltage = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4fH4fH2f().pack(_x.temperature, _x.voltage, _x.current, _x.avgCurrent, _x.maxError, _x.relativeSOC, _x.absoluteSOC, _x.remainingCapacity, _x.fullCapacity, _x.status, _x.countCycle, _x.capacityDesign))
      _x = self.dateManufacture
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_H4f().pack(_x.serialNumber, _x.highCellVoltage, _x.mid1CellVoltage, _x.mid2CellVoltage, _x.lowCellVoltage))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 44
      (_x.temperature, _x.voltage, _x.current, _x.avgCurrent, _x.maxError, _x.relativeSOC, _x.absoluteSOC, _x.remainingCapacity, _x.fullCapacity, _x.status, _x.countCycle, _x.capacityDesign,) = _get_struct_4fH4fH2f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dateManufacture = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.dateManufacture = str[start:end]
      _x = self
      start = end
      end += 18
      (_x.serialNumber, _x.highCellVoltage, _x.mid1CellVoltage, _x.mid2CellVoltage, _x.lowCellVoltage,) = _get_struct_H4f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4fH4fH2f().pack(_x.temperature, _x.voltage, _x.current, _x.avgCurrent, _x.maxError, _x.relativeSOC, _x.absoluteSOC, _x.remainingCapacity, _x.fullCapacity, _x.status, _x.countCycle, _x.capacityDesign))
      _x = self.dateManufacture
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_H4f().pack(_x.serialNumber, _x.highCellVoltage, _x.mid1CellVoltage, _x.mid2CellVoltage, _x.lowCellVoltage))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 44
      (_x.temperature, _x.voltage, _x.current, _x.avgCurrent, _x.maxError, _x.relativeSOC, _x.absoluteSOC, _x.remainingCapacity, _x.fullCapacity, _x.status, _x.countCycle, _x.capacityDesign,) = _get_struct_4fH4fH2f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dateManufacture = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.dateManufacture = str[start:end]
      _x = self
      start = end
      end += 18
      (_x.serialNumber, _x.highCellVoltage, _x.mid1CellVoltage, _x.mid2CellVoltage, _x.lowCellVoltage,) = _get_struct_H4f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4fH4fH2f = None
def _get_struct_4fH4fH2f():
    global _struct_4fH4fH2f
    if _struct_4fH4fH2f is None:
        _struct_4fH4fH2f = struct.Struct("<4fH4fH2f")
    return _struct_4fH4fH2f
_struct_H4f = None
def _get_struct_H4f():
    global _struct_H4f
    if _struct_H4f is None:
        _struct_H4f = struct.Struct("<H4f")
    return _struct_H4f
