# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ds_hotel_msgs/BatMan.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ds_core_msgs.msg
import genpy
import std_msgs.msg

class BatMan(genpy.Message):
  _md5sum = "f3159eb1767ecbe966600482b7e002f0"
  _type = "ds_hotel_msgs/BatMan"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """# The standard 2-part DsHeader block
# This allows both a standard ROS header and DS-specific header blocks
# See HEADERS.md in ds_core_msgs for details
std_msgs/Header header
ds_core_msgs/DsHeader ds_header

int32 num_bats

float32 maxModuleVolt
float32 minModuleVolt
float32 maxSwitchTemp
float32 minSwitchTemp

float32 maxCellVolt
float32 minCellVolt
float32 maxCellTemp
float32 minCellTemp

float64 capacityCoulombs
float64 capacityAh
float64 chargeCoulombs
float64 chargeAh
float64 percentFull

float32[] moduleVolt
float64[] moduleAh
float64[] moduleCapacity
float64[] modulePercent
bool[] moduleDischarging
bool[] moduleCharging

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: ds_core_msgs/DsHeader
# This is half our standard header for ds_msgs; see
# HEADERS.md for details

# This header should ALWAYS be paired with a std_msgs/Header
# and should ALWAYS reference HEADERS.md.  If you're looking at this
# file to add headers to a type, you probably want to copy/paste
# the following block:
#
#     # The standard 2-part DsHeader block
#     # This allows both a standard ROS header and DS-specific header blocks
#     # See HEADERS.md in ds_core_msgs for details
#     std_msgs/Header header
#     ds_core_msgs/DsHeader ds_header
#

# Time data was received or sent out (i/o time)
time io_time

# Sensor source UUID
uint8[16] source_uuid

"""
  __slots__ = ['header','ds_header','num_bats','maxModuleVolt','minModuleVolt','maxSwitchTemp','minSwitchTemp','maxCellVolt','minCellVolt','maxCellTemp','minCellTemp','capacityCoulombs','capacityAh','chargeCoulombs','chargeAh','percentFull','moduleVolt','moduleAh','moduleCapacity','modulePercent','moduleDischarging','moduleCharging']
  _slot_types = ['std_msgs/Header','ds_core_msgs/DsHeader','int32','float32','float32','float32','float32','float32','float32','float32','float32','float64','float64','float64','float64','float64','float32[]','float64[]','float64[]','float64[]','bool[]','bool[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,ds_header,num_bats,maxModuleVolt,minModuleVolt,maxSwitchTemp,minSwitchTemp,maxCellVolt,minCellVolt,maxCellTemp,minCellTemp,capacityCoulombs,capacityAh,chargeCoulombs,chargeAh,percentFull,moduleVolt,moduleAh,moduleCapacity,modulePercent,moduleDischarging,moduleCharging

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(BatMan, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.ds_header is None:
        self.ds_header = ds_core_msgs.msg.DsHeader()
      if self.num_bats is None:
        self.num_bats = 0
      if self.maxModuleVolt is None:
        self.maxModuleVolt = 0.
      if self.minModuleVolt is None:
        self.minModuleVolt = 0.
      if self.maxSwitchTemp is None:
        self.maxSwitchTemp = 0.
      if self.minSwitchTemp is None:
        self.minSwitchTemp = 0.
      if self.maxCellVolt is None:
        self.maxCellVolt = 0.
      if self.minCellVolt is None:
        self.minCellVolt = 0.
      if self.maxCellTemp is None:
        self.maxCellTemp = 0.
      if self.minCellTemp is None:
        self.minCellTemp = 0.
      if self.capacityCoulombs is None:
        self.capacityCoulombs = 0.
      if self.capacityAh is None:
        self.capacityAh = 0.
      if self.chargeCoulombs is None:
        self.chargeCoulombs = 0.
      if self.chargeAh is None:
        self.chargeAh = 0.
      if self.percentFull is None:
        self.percentFull = 0.
      if self.moduleVolt is None:
        self.moduleVolt = []
      if self.moduleAh is None:
        self.moduleAh = []
      if self.moduleCapacity is None:
        self.moduleCapacity = []
      if self.modulePercent is None:
        self.modulePercent = []
      if self.moduleDischarging is None:
        self.moduleDischarging = []
      if self.moduleCharging is None:
        self.moduleCharging = []
    else:
      self.header = std_msgs.msg.Header()
      self.ds_header = ds_core_msgs.msg.DsHeader()
      self.num_bats = 0
      self.maxModuleVolt = 0.
      self.minModuleVolt = 0.
      self.maxSwitchTemp = 0.
      self.minSwitchTemp = 0.
      self.maxCellVolt = 0.
      self.minCellVolt = 0.
      self.maxCellTemp = 0.
      self.minCellTemp = 0.
      self.capacityCoulombs = 0.
      self.capacityAh = 0.
      self.chargeCoulombs = 0.
      self.chargeAh = 0.
      self.percentFull = 0.
      self.moduleVolt = []
      self.moduleAh = []
      self.moduleCapacity = []
      self.modulePercent = []
      self.moduleDischarging = []
      self.moduleCharging = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.ds_header.io_time.secs, _x.ds_header.io_time.nsecs))
      _x = self.ds_header.source_uuid
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_16B().pack(*_x))
      else:
        buff.write(_get_struct_16s().pack(_x))
      _x = self
      buff.write(_get_struct_i8f5d().pack(_x.num_bats, _x.maxModuleVolt, _x.minModuleVolt, _x.maxSwitchTemp, _x.minSwitchTemp, _x.maxCellVolt, _x.minCellVolt, _x.maxCellTemp, _x.minCellTemp, _x.capacityCoulombs, _x.capacityAh, _x.chargeCoulombs, _x.chargeAh, _x.percentFull))
      length = len(self.moduleVolt)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.moduleVolt))
      length = len(self.moduleAh)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.moduleAh))
      length = len(self.moduleCapacity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.moduleCapacity))
      length = len(self.modulePercent)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.modulePercent))
      length = len(self.moduleDischarging)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.moduleDischarging))
      length = len(self.moduleCharging)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.moduleCharging))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.ds_header is None:
        self.ds_header = ds_core_msgs.msg.DsHeader()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.ds_header.io_time.secs, _x.ds_header.io_time.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 16
      self.ds_header.source_uuid = str[start:end]
      _x = self
      start = end
      end += 76
      (_x.num_bats, _x.maxModuleVolt, _x.minModuleVolt, _x.maxSwitchTemp, _x.minSwitchTemp, _x.maxCellVolt, _x.minCellVolt, _x.maxCellTemp, _x.minCellTemp, _x.capacityCoulombs, _x.capacityAh, _x.chargeCoulombs, _x.chargeAh, _x.percentFull,) = _get_struct_i8f5d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.moduleVolt = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.moduleAh = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.moduleCapacity = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.modulePercent = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.moduleDischarging = s.unpack(str[start:end])
      self.moduleDischarging = list(map(bool, self.moduleDischarging))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.moduleCharging = s.unpack(str[start:end])
      self.moduleCharging = list(map(bool, self.moduleCharging))
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.ds_header.io_time.secs, _x.ds_header.io_time.nsecs))
      _x = self.ds_header.source_uuid
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_16B().pack(*_x))
      else:
        buff.write(_get_struct_16s().pack(_x))
      _x = self
      buff.write(_get_struct_i8f5d().pack(_x.num_bats, _x.maxModuleVolt, _x.minModuleVolt, _x.maxSwitchTemp, _x.minSwitchTemp, _x.maxCellVolt, _x.minCellVolt, _x.maxCellTemp, _x.minCellTemp, _x.capacityCoulombs, _x.capacityAh, _x.chargeCoulombs, _x.chargeAh, _x.percentFull))
      length = len(self.moduleVolt)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.moduleVolt.tostring())
      length = len(self.moduleAh)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.moduleAh.tostring())
      length = len(self.moduleCapacity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.moduleCapacity.tostring())
      length = len(self.modulePercent)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.modulePercent.tostring())
      length = len(self.moduleDischarging)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.moduleDischarging.tostring())
      length = len(self.moduleCharging)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.moduleCharging.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.ds_header is None:
        self.ds_header = ds_core_msgs.msg.DsHeader()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.ds_header.io_time.secs, _x.ds_header.io_time.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 16
      self.ds_header.source_uuid = str[start:end]
      _x = self
      start = end
      end += 76
      (_x.num_bats, _x.maxModuleVolt, _x.minModuleVolt, _x.maxSwitchTemp, _x.minSwitchTemp, _x.maxCellVolt, _x.minCellVolt, _x.maxCellTemp, _x.minCellTemp, _x.capacityCoulombs, _x.capacityAh, _x.chargeCoulombs, _x.chargeAh, _x.percentFull,) = _get_struct_i8f5d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.moduleVolt = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.moduleAh = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.moduleCapacity = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.modulePercent = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.moduleDischarging = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.moduleDischarging = list(map(bool, self.moduleDischarging))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.moduleCharging = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.moduleCharging = list(map(bool, self.moduleCharging))
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_16B = None
def _get_struct_16B():
    global _struct_16B
    if _struct_16B is None:
        _struct_16B = struct.Struct("<16B")
    return _struct_16B
_struct_16s = None
def _get_struct_16s():
    global _struct_16s
    if _struct_16s is None:
        _struct_16s = struct.Struct("<16s")
    return _struct_16s
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_i8f5d = None
def _get_struct_i8f5d():
    global _struct_i8f5d
    if _struct_i8f5d is None:
        _struct_i8f5d = struct.Struct("<i8f5d")
    return _struct_i8f5d
