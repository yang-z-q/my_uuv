# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ds_actuator_msgs/DropweightCmd.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class DropweightCmd(genpy.Message):
  _md5sum = "8ea5ee9cba3a5ff386611d1f0aa0bb49"
  _type = "ds_actuator_msgs/DropweightCmd"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """time stamp

int32 IDX_DESCENT=0
int32 IDX_ASCENT=1
int32 IDX_ANCHOR=2
int32 IDX_MAX=8

# This is an array of dropweight booleans.  If the bool at a particular index
# is true, the weight should be dropped.
bool[8] drop

# burn is an array of burnwire booleans, one for each weight.  This message assumes
# each vehicle supports both a primary dropweight actuator (dcam, etc) and a backup
# burnwire.
bool[8] burn
"""
  # Pseudo-constants
  IDX_DESCENT = 0
  IDX_ASCENT = 1
  IDX_ANCHOR = 2
  IDX_MAX = 8

  __slots__ = ['stamp','drop','burn']
  _slot_types = ['time','bool[8]','bool[8]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       stamp,drop,burn

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DropweightCmd, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.stamp is None:
        self.stamp = genpy.Time()
      if self.drop is None:
        self.drop = [False] * 8
      if self.burn is None:
        self.burn = [False] * 8
    else:
      self.stamp = genpy.Time()
      self.drop = [False] * 8
      self.burn = [False] * 8

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2I().pack(_x.stamp.secs, _x.stamp.nsecs))
      buff.write(_get_struct_8B().pack(*self.drop))
      buff.write(_get_struct_8B().pack(*self.burn))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.stamp.secs, _x.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 8
      self.drop = _get_struct_8B().unpack(str[start:end])
      self.drop = list(map(bool, self.drop))
      start = end
      end += 8
      self.burn = _get_struct_8B().unpack(str[start:end])
      self.burn = list(map(bool, self.burn))
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2I().pack(_x.stamp.secs, _x.stamp.nsecs))
      buff.write(self.drop.tostring())
      buff.write(self.burn.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.stamp.secs, _x.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 8
      self.drop = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=8)
      self.drop = list(map(bool, self.drop))
      start = end
      end += 8
      self.burn = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=8)
      self.burn = list(map(bool, self.burn))
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_8B = None
def _get_struct_8B():
    global _struct_8B
    if _struct_8B is None:
        _struct_8B = struct.Struct("<8B")
    return _struct_8B
