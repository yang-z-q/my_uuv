# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ds_actuator_msgs/ThrusterCmd.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class ThrusterCmd(genpy.Message):
  _md5sum = "bd48d864a35b4ae52df4508040dcea7f"
  _type = "ds_actuator_msgs/ThrusterCmd"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Timestamp for when the thruster command was issued?
time stamp

# Time-To-Live in seconds
# The thruster command only applies for this length of time
# TTL checking in most drivers is approximate; this is a
# minimum live time.  This flag should be checked at least every
# health check interval
float32 ttl_seconds

# Name of the thruster this command is intended for
string thruster_name

# Commanded value for the thruster (typically current)
float32 cmd_value

# Desired force produced by cmd_value
float32 cmd_newtons
"""
  __slots__ = ['stamp','ttl_seconds','thruster_name','cmd_value','cmd_newtons']
  _slot_types = ['time','float32','string','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       stamp,ttl_seconds,thruster_name,cmd_value,cmd_newtons

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ThrusterCmd, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.stamp is None:
        self.stamp = genpy.Time()
      if self.ttl_seconds is None:
        self.ttl_seconds = 0.
      if self.thruster_name is None:
        self.thruster_name = ''
      if self.cmd_value is None:
        self.cmd_value = 0.
      if self.cmd_newtons is None:
        self.cmd_newtons = 0.
    else:
      self.stamp = genpy.Time()
      self.ttl_seconds = 0.
      self.thruster_name = ''
      self.cmd_value = 0.
      self.cmd_newtons = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2If().pack(_x.stamp.secs, _x.stamp.nsecs, _x.ttl_seconds))
      _x = self.thruster_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2f().pack(_x.cmd_value, _x.cmd_newtons))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.stamp.secs, _x.stamp.nsecs, _x.ttl_seconds,) = _get_struct_2If().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.thruster_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.thruster_name = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.cmd_value, _x.cmd_newtons,) = _get_struct_2f().unpack(str[start:end])
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2If().pack(_x.stamp.secs, _x.stamp.nsecs, _x.ttl_seconds))
      _x = self.thruster_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2f().pack(_x.cmd_value, _x.cmd_newtons))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.stamp.secs, _x.stamp.nsecs, _x.ttl_seconds,) = _get_struct_2If().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.thruster_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.thruster_name = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.cmd_value, _x.cmd_newtons,) = _get_struct_2f().unpack(str[start:end])
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2If = None
def _get_struct_2If():
    global _struct_2If
    if _struct_2If is None:
        _struct_2If = struct.Struct("<2If")
    return _struct_2If
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
