# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ds_actuator_msgs/Tecnadyne561.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ds_core_msgs.msg
import genpy
import std_msgs.msg

class Tecnadyne561(genpy.Message):
  _md5sum = "dc19e6a4487640c3cac3e37d8f82dc05"
  _type = "ds_actuator_msgs/Tecnadyne561"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """# The standard 2-part DsHeader block
# This allows both a standard ROS header and DS-specific header blocks
# See HEADERS.md in ds_core_msgs for details
std_msgs/Header header
ds_core_msgs/DsHeader ds_header

###################
# Thruster Header #
###################

uint8 cmd

#######################
# Extended Status MSG #
#######################
uint8 speed_loop_enable_status
uint8 minute_tag
uint8 second_tag
uint8 microsecond_tick_tag
int16 prop_pwm
float32 tach_rpm
uint8 fault_status
uint8 reset_status
uint8 speed_loop_interval
uint8 tach_err_count
float32 voltage_volts
float32 current_amps

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: ds_core_msgs/DsHeader
# This is half our standard header for ds_msgs; see
# HEADERS.md for details

# This header should ALWAYS be paired with a std_msgs/Header
# and should ALWAYS reference HEADERS.md.  If you're looking at this
# file to add headers to a type, you probably want to copy/paste
# the following block:
#
#     # The standard 2-part DsHeader block
#     # This allows both a standard ROS header and DS-specific header blocks
#     # See HEADERS.md in ds_core_msgs for details
#     std_msgs/Header header
#     ds_core_msgs/DsHeader ds_header
#

# Time data was received or sent out (i/o time)
time io_time

# Sensor source UUID
uint8[16] source_uuid

"""
  __slots__ = ['header','ds_header','cmd','speed_loop_enable_status','minute_tag','second_tag','microsecond_tick_tag','prop_pwm','tach_rpm','fault_status','reset_status','speed_loop_interval','tach_err_count','voltage_volts','current_amps']
  _slot_types = ['std_msgs/Header','ds_core_msgs/DsHeader','uint8','uint8','uint8','uint8','uint8','int16','float32','uint8','uint8','uint8','uint8','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,ds_header,cmd,speed_loop_enable_status,minute_tag,second_tag,microsecond_tick_tag,prop_pwm,tach_rpm,fault_status,reset_status,speed_loop_interval,tach_err_count,voltage_volts,current_amps

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Tecnadyne561, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.ds_header is None:
        self.ds_header = ds_core_msgs.msg.DsHeader()
      if self.cmd is None:
        self.cmd = 0
      if self.speed_loop_enable_status is None:
        self.speed_loop_enable_status = 0
      if self.minute_tag is None:
        self.minute_tag = 0
      if self.second_tag is None:
        self.second_tag = 0
      if self.microsecond_tick_tag is None:
        self.microsecond_tick_tag = 0
      if self.prop_pwm is None:
        self.prop_pwm = 0
      if self.tach_rpm is None:
        self.tach_rpm = 0.
      if self.fault_status is None:
        self.fault_status = 0
      if self.reset_status is None:
        self.reset_status = 0
      if self.speed_loop_interval is None:
        self.speed_loop_interval = 0
      if self.tach_err_count is None:
        self.tach_err_count = 0
      if self.voltage_volts is None:
        self.voltage_volts = 0.
      if self.current_amps is None:
        self.current_amps = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.ds_header = ds_core_msgs.msg.DsHeader()
      self.cmd = 0
      self.speed_loop_enable_status = 0
      self.minute_tag = 0
      self.second_tag = 0
      self.microsecond_tick_tag = 0
      self.prop_pwm = 0
      self.tach_rpm = 0.
      self.fault_status = 0
      self.reset_status = 0
      self.speed_loop_interval = 0
      self.tach_err_count = 0
      self.voltage_volts = 0.
      self.current_amps = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.ds_header.io_time.secs, _x.ds_header.io_time.nsecs))
      _x = self.ds_header.source_uuid
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_16B().pack(*_x))
      else:
        buff.write(_get_struct_16s().pack(_x))
      _x = self
      buff.write(_get_struct_5Bhf4B2f().pack(_x.cmd, _x.speed_loop_enable_status, _x.minute_tag, _x.second_tag, _x.microsecond_tick_tag, _x.prop_pwm, _x.tach_rpm, _x.fault_status, _x.reset_status, _x.speed_loop_interval, _x.tach_err_count, _x.voltage_volts, _x.current_amps))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.ds_header is None:
        self.ds_header = ds_core_msgs.msg.DsHeader()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.ds_header.io_time.secs, _x.ds_header.io_time.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 16
      self.ds_header.source_uuid = str[start:end]
      _x = self
      start = end
      end += 23
      (_x.cmd, _x.speed_loop_enable_status, _x.minute_tag, _x.second_tag, _x.microsecond_tick_tag, _x.prop_pwm, _x.tach_rpm, _x.fault_status, _x.reset_status, _x.speed_loop_interval, _x.tach_err_count, _x.voltage_volts, _x.current_amps,) = _get_struct_5Bhf4B2f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.ds_header.io_time.secs, _x.ds_header.io_time.nsecs))
      _x = self.ds_header.source_uuid
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_16B().pack(*_x))
      else:
        buff.write(_get_struct_16s().pack(_x))
      _x = self
      buff.write(_get_struct_5Bhf4B2f().pack(_x.cmd, _x.speed_loop_enable_status, _x.minute_tag, _x.second_tag, _x.microsecond_tick_tag, _x.prop_pwm, _x.tach_rpm, _x.fault_status, _x.reset_status, _x.speed_loop_interval, _x.tach_err_count, _x.voltage_volts, _x.current_amps))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.ds_header is None:
        self.ds_header = ds_core_msgs.msg.DsHeader()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.ds_header.io_time.secs, _x.ds_header.io_time.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 16
      self.ds_header.source_uuid = str[start:end]
      _x = self
      start = end
      end += 23
      (_x.cmd, _x.speed_loop_enable_status, _x.minute_tag, _x.second_tag, _x.microsecond_tick_tag, _x.prop_pwm, _x.tach_rpm, _x.fault_status, _x.reset_status, _x.speed_loop_interval, _x.tach_err_count, _x.voltage_volts, _x.current_amps,) = _get_struct_5Bhf4B2f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_16B = None
def _get_struct_16B():
    global _struct_16B
    if _struct_16B is None:
        _struct_16B = struct.Struct("<16B")
    return _struct_16B
_struct_16s = None
def _get_struct_16s():
    global _struct_16s
    if _struct_16s is None:
        _struct_16s = struct.Struct("<16s")
    return _struct_16s
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_5Bhf4B2f = None
def _get_struct_5Bhf4B2f():
    global _struct_5Bhf4B2f
    if _struct_5Bhf4B2f is None:
        _struct_5Bhf4B2f = struct.Struct("<5Bhf4B2f")
    return _struct_5Bhf4B2f
