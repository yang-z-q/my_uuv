# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ds_nmea_msgs/PixseAlgsts.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class PixseAlgsts(genpy.Message):
  _md5sum = "5dcaf448183293c362fd7873a1aaa77a"
  _type = "ds_nmea_msgs/PixseAlgsts"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#  $PIXSE,ALGSTS,hhhhhhhh,llllllll *hh<CR><LF>
#  where:
#  hhhhhhhh is the hexadecimal value of PHINS Algo status LSB (see Table V-3)
#  llllllll is the hexadecimal value of PHINS Algo status MSB (see Table V-4)
#  hh is the checksum

#  Values of PHINS Algo status LSB (see Table V-3)

uint64 OPERATION_MODE_NAVIGATION     = 1                     # 0x00000000_00000001
uint64 OPERATION_MODE_ALIGNMENT      = 2                     # 0x00000000_00000002
uint64 OPERATION_MODE_FINE_ALIGNMENT = 4                     # 0x00000000_00000004
uint64 OPERATION_MODE_DECK_RECKONING = 8                     # 0x00000000_00000008

uint64 ALTITUDE_USING_GPS            = 16                    # 0x00000000_00000010
uint64 ALTITUDE_USING_DEPTH          = 32                    # 0x00000000_00000020
uint64 ALTITUDE_SABLILIZED           = 64                    # 0x00000000_00000040
uint64 ALTITUDE_HYDRO                = 128                   # 0x00000000_00000080

uint64 LOG_USED                      = 256                   # 0x00000000_00000100
uint64 LOG_DATA_VALID                = 512                   # 0x00000000_00000200
uint64 LOG_WAITING_FOR_DATA          = 1024                  # 0x00000000_00000400
uint64 LOG_DATA_REJECTED             = 2048                  # 0x00000000_00000800

uint64 GPS_USED                      = 4096                  # 0x00000000_00001000
uint64 GPS_DATA_VALID                = 8192                  # 0x00000000_00002000
uint64 GPS_WAITING_FOR_DATA          = 16384                 # 0x00000000_00004000
uint64 GPS_DATA_REJECTED             = 32768                 # 0x00000000_00008000

uint64 USBL_USED                     = 65536                 # 0x00000000_00010000
uint64 USBL_DATA_VALID               = 131072                # 0x00000000_00020000
uint64 USBL_WAITING_FOR_DATA         = 262144                # 0x00000000_00040000
uint64 USBL_DATA_REJECTED            = 524288                # 0x00000000_00080000

uint64 DEPTH_USED                    = 1048576               # 0x00000000_00100000
uint64 DEPTH_DATA_VALID              = 2097152               # 0x00000000_00200000
uint64 DEPTH_WAITING_FOR_DATA        = 4194304               # 0x00000000_00400000
uint64 DEPTH_DATA_REJECTED           = 8388608               # 0x00000000_00800000

uint64 LBL_USED                      = 16777216              # 0x00000000_01000000
uint64 LBL_DATA_VALID                = 33554432              # 0x00000000_02000000
uint64 LBL_WAITING_FOR_DATA          = 67108864              # 0x00000000_04000000
uint64 LBL_DATA_REJECTED             = 134217728             # 0x00000000_08000000

uint64 ALTITUDE_SATURATED            = 268435456             # 0x00000000_10000000
uint64 SPEED_SATURATED               = 536870912             # 0x00000000_20000000
uint64 RESERVED_1                    = 1073741824            # 0x00000000_40000000
uint64 RESERVED_2                    = 2147483648            # 0x00000000_80000000

#  Values of PHINS Algo status MSB (see Table V-4)

uint64 WATER_TRACK_USED              = 4294967296            # 0x00000001_00000000
uint64 WATER_TRACK_DATA_VALID        = 8589934592            # 0x00000002_00000000
uint64 WATER_TRACK_WAITING_FOR_DATA  = 17179869184           # 0x00000004_00000000
uint64 WATER_TRACK_REJECTED          = 34359738368           # 0x00000008_00000000

uint64 GPS2_USED                     = 68719476736           # 0x00000010_00000000
uint64 GPS2_DATA_VALID               = 137438953472          # 0x00000020_00000000
uint64 GPS2_WAITING_FOR_DATA         = 274877906944          # 0x00000040_00000000
uint64 GPS2_DATA_REJECTED            = 549755813888          # 0x00000080_00000800

uint64 METROLOGY_USED                = 1099511627776         # 0x00000100_00000000
uint64 METROLOGY_DATA_VALID          = 2199023255552         # 0x00000200_00000000
uint64 METROLOGY_WAITING_FOR_DATA    = 4398046511104         # 0x00000400_00000000
uint64 METROLOGY_DATA_REJECTED       = 8796093022208         # 0x00000800_00000000

uint64 ALTITUDE_USED                 = 17592186044416        # 0x00001000_00000000
uint64 ALTITUDE_DATA_VALID           = 35184372088832        # 0x00002000_00000000
uint64 ALTITUDE_WAITING_FOR_DATA     = 70368744177664        # 0x00004000_00000000
uint64 ALTITUDE_DATA_REJECTED        = 140737488355328       # 0x00008000_00000000

uint64 OPERATION_MODE_ZUP            = 281474976710656       # 0x00010000_00000000
uint64 ZUP_VALID                     = 562949953421312       # 0x00020000_00000000
uint64 OPERATION_MODE_ZUP_VALID      = 1125899906842624      # 0x00040000_00000000
uint64 ZUP_BENCH_VALID               = 2251799813685248      # 0x00080000_00000000

uint64 STATIC_ALIGNMENT              = 4503599627370496      # 0x00100000_00000000
uint64 GO_TO_NAV                     = 9007199254740992      # 0x00200000_00000000
uint64 RESERVED_3                    = 18014398509481984     # 0x00400000_00000000
uint64 RESERVED_4                    = 36028797018963968     # 0x00800000_00000000

uint64 EM_LOG_USED                   = 72057594037927936     # 0x01000000_00000000
uint64 EM_LOG_DATA_VALID             = 144115188075855872    # 0x02000000_00000000
uint64 EM_LOG_WAITING_FOR_DATA       = 288230376151711744    # 0x04000000_00000000
uint64 EM_LOG_DATA_REJECTED          = 576460752303423488    # 0x08000000_00000000

uint64 GPS_MANUAL_USED               = 1152921504606846976   # 0x10000000_00000000
uint64 GPS_MANUAL_DATA_VALID         = 2305843009213693952   # 0x20000000_00000000
uint64 GPS_MANUAL_WAITING_FOR_DATA   = 4611686018427387904   # 0x40000000_00000000
uint64 GPS_MANUAL_DATA_REJECTED      = 9223372036854775808   # 0x80000000_00000000

uint64 status

# Algorithm Status LSB enum
# PixseAlgstsLsb lsb

# Algorithm Status MSB enum
# PixseAlgstsMsb msb

uint8 checksum
"""
  # Pseudo-constants
  OPERATION_MODE_NAVIGATION = 1
  OPERATION_MODE_ALIGNMENT = 2
  OPERATION_MODE_FINE_ALIGNMENT = 4
  OPERATION_MODE_DECK_RECKONING = 8
  ALTITUDE_USING_GPS = 16
  ALTITUDE_USING_DEPTH = 32
  ALTITUDE_SABLILIZED = 64
  ALTITUDE_HYDRO = 128
  LOG_USED = 256
  LOG_DATA_VALID = 512
  LOG_WAITING_FOR_DATA = 1024
  LOG_DATA_REJECTED = 2048
  GPS_USED = 4096
  GPS_DATA_VALID = 8192
  GPS_WAITING_FOR_DATA = 16384
  GPS_DATA_REJECTED = 32768
  USBL_USED = 65536
  USBL_DATA_VALID = 131072
  USBL_WAITING_FOR_DATA = 262144
  USBL_DATA_REJECTED = 524288
  DEPTH_USED = 1048576
  DEPTH_DATA_VALID = 2097152
  DEPTH_WAITING_FOR_DATA = 4194304
  DEPTH_DATA_REJECTED = 8388608
  LBL_USED = 16777216
  LBL_DATA_VALID = 33554432
  LBL_WAITING_FOR_DATA = 67108864
  LBL_DATA_REJECTED = 134217728
  ALTITUDE_SATURATED = 268435456
  SPEED_SATURATED = 536870912
  RESERVED_1 = 1073741824
  RESERVED_2 = 2147483648
  WATER_TRACK_USED = 4294967296
  WATER_TRACK_DATA_VALID = 8589934592
  WATER_TRACK_WAITING_FOR_DATA = 17179869184
  WATER_TRACK_REJECTED = 34359738368
  GPS2_USED = 68719476736
  GPS2_DATA_VALID = 137438953472
  GPS2_WAITING_FOR_DATA = 274877906944
  GPS2_DATA_REJECTED = 549755813888
  METROLOGY_USED = 1099511627776
  METROLOGY_DATA_VALID = 2199023255552
  METROLOGY_WAITING_FOR_DATA = 4398046511104
  METROLOGY_DATA_REJECTED = 8796093022208
  ALTITUDE_USED = 17592186044416
  ALTITUDE_DATA_VALID = 35184372088832
  ALTITUDE_WAITING_FOR_DATA = 70368744177664
  ALTITUDE_DATA_REJECTED = 140737488355328
  OPERATION_MODE_ZUP = 281474976710656
  ZUP_VALID = 562949953421312
  OPERATION_MODE_ZUP_VALID = 1125899906842624
  ZUP_BENCH_VALID = 2251799813685248
  STATIC_ALIGNMENT = 4503599627370496
  GO_TO_NAV = 9007199254740992
  RESERVED_3 = 18014398509481984
  RESERVED_4 = 36028797018963968
  EM_LOG_USED = 72057594037927936
  EM_LOG_DATA_VALID = 144115188075855872
  EM_LOG_WAITING_FOR_DATA = 288230376151711744
  EM_LOG_DATA_REJECTED = 576460752303423488
  GPS_MANUAL_USED = 1152921504606846976
  GPS_MANUAL_DATA_VALID = 2305843009213693952
  GPS_MANUAL_WAITING_FOR_DATA = 4611686018427387904
  GPS_MANUAL_DATA_REJECTED = 9223372036854775808

  __slots__ = ['status','checksum']
  _slot_types = ['uint64','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       status,checksum

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PixseAlgsts, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.status is None:
        self.status = 0
      if self.checksum is None:
        self.checksum = 0
    else:
      self.status = 0
      self.checksum = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_QB().pack(_x.status, _x.checksum))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 9
      (_x.status, _x.checksum,) = _get_struct_QB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_QB().pack(_x.status, _x.checksum))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 9
      (_x.status, _x.checksum,) = _get_struct_QB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_QB = None
def _get_struct_QB():
    global _struct_QB
    if _struct_QB is None:
        _struct_QB = struct.Struct("<QB")
    return _struct_QB
