# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ds_nmea_msgs/PixseHtsts.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class PixseHtsts(genpy.Message):
  _md5sum = "78bf233ad3f7cf6823e55c18e0eb8573"
  _type = "ds_nmea_msgs/PixseHtsts"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#  $PIXSE,HT_STS,hhhhhhhh *hh<CR><LF>
#  where:
#  hhhhhhhh is the hexadecimal value of PHINS User status (see Table V-5)
#  hh is the checksum

#  Values of PHINS HT_STS status LSB (see Table V-5)

uint32 SYSTEM_OK                     = 1          # 0x00000001
uint32 ALIGNMENT_IN_PROGRESS         = 2          # 0x00000002
uint32 SYSTEM_ERROR                  = 4          # 0x00000004
uint32 SYSTEM_WARNING                = 8          # 0x00000008

uint32 SERIAL_INPUT_OK               = 16         # 0x00000010
uint32 SERIAL_INPUT_ERROR            = 32         # 0x00000020
uint32 SERIAL_OUTPUT_OK              = 64         # 0x00000040
uint32 SERIAL_OUTPUT_ERROR           = 128        # 0x00000080

uint32 ELECTRONIC_OK                 = 256        # 0x00000100
uint32 ELECTRONIC_ERROR              = 512        # 0x00000200
uint32 FOG_OK                        = 1024       # 0x00000400
uint32 FOG_ERROR                     = 2048       # 0x00000800

uint32 ACCEL_OK                      = 4096       # 0x00001000
uint32 ACCEL_ERROR                   = 8192       # 0x00002000
uint32 CPU_OK                        = 16384      # 0x00004000
uint32 CPU_ERROR                     = 32768      # 0x00008000

uint32 TEMP_OK                       = 65536      # 0x00010000
uint32 TEMP_ERROR                    = 131072     # 0x00020000
uint32 NO_GPS1_DETECTED              = 262144     # 0x00040000
uint32 NO_GPS2_DETECTED              = 524288     # 0x00080000

uint32 NO_MANUAL_GPS_DETECTED        = 1048576    # 0x00100000
uint32 NO_DVL_BOTTOM_TRACK_DETECTED  = 2097152    # 0x00200000
uint32 NO_DVL_WATER_TRACK_DETECTED   = 4194304    # 0x00400000
uint32 NO_EM_LOG_DETECTED            = 8388608    # 0x00800000

uint32 NO_DEPTH_DETECTED             = 16777216   # 0x01000000
uint32 NO_USBL_DETECTED              = 33554432   # 0x02000000
uint32 NO_LBL_DETECTED               = 67108864   # 0x04000000
uint32 NO_ALITITUDE_DETECTED         = 134217728  # 0x08000000

uint32 NO_UTC_SYNC_DETECTED          = 268435456  # 0x10000000
uint32 NO_PPS_SYNC_DETECTED          = 536870912  # 0x20000000
uint32 NO_CTD_DETECTED               = 1073741824 # 0x40000000
uint32 ZUP_MODE_ACTIVATED            = 2147483648 # 0x80000000

uint32 status
uint8 checksum"""
  # Pseudo-constants
  SYSTEM_OK = 1
  ALIGNMENT_IN_PROGRESS = 2
  SYSTEM_ERROR = 4
  SYSTEM_WARNING = 8
  SERIAL_INPUT_OK = 16
  SERIAL_INPUT_ERROR = 32
  SERIAL_OUTPUT_OK = 64
  SERIAL_OUTPUT_ERROR = 128
  ELECTRONIC_OK = 256
  ELECTRONIC_ERROR = 512
  FOG_OK = 1024
  FOG_ERROR = 2048
  ACCEL_OK = 4096
  ACCEL_ERROR = 8192
  CPU_OK = 16384
  CPU_ERROR = 32768
  TEMP_OK = 65536
  TEMP_ERROR = 131072
  NO_GPS1_DETECTED = 262144
  NO_GPS2_DETECTED = 524288
  NO_MANUAL_GPS_DETECTED = 1048576
  NO_DVL_BOTTOM_TRACK_DETECTED = 2097152
  NO_DVL_WATER_TRACK_DETECTED = 4194304
  NO_EM_LOG_DETECTED = 8388608
  NO_DEPTH_DETECTED = 16777216
  NO_USBL_DETECTED = 33554432
  NO_LBL_DETECTED = 67108864
  NO_ALITITUDE_DETECTED = 134217728
  NO_UTC_SYNC_DETECTED = 268435456
  NO_PPS_SYNC_DETECTED = 536870912
  NO_CTD_DETECTED = 1073741824
  ZUP_MODE_ACTIVATED = 2147483648

  __slots__ = ['status','checksum']
  _slot_types = ['uint32','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       status,checksum

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PixseHtsts, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.status is None:
        self.status = 0
      if self.checksum is None:
        self.checksum = 0
    else:
      self.status = 0
      self.checksum = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_IB().pack(_x.status, _x.checksum))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 5
      (_x.status, _x.checksum,) = _get_struct_IB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_IB().pack(_x.status, _x.checksum))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 5
      (_x.status, _x.checksum,) = _get_struct_IB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_IB = None
def _get_struct_IB():
    global _struct_IB
    if _struct_IB is None:
        _struct_IB = struct.Struct("<IB")
    return _struct_IB
