# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ds_nmea_msgs/Vtg.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Vtg(genpy.Message):
  _md5sum = "0d569c07461d690ce7df420862dd96ad"
  _type = "ds_nmea_msgs/Vtg"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# VTG Track Made Good and Ground Speed
#        1   2 3   4 5   6 7   8 9
#        |   | |   | |   | |   | |
# $--VTG,x.x,T,x.x,M,x.x,N,x.x,K,N*hh
# 1) Track Degrees
# 2) T = True
# 3) Track Degrees
# 4) M = Magnetic
# 5) Speed Knots
# 6) N = Knots
# 7) Speed Kph
# 8) K = Kilometres Per Hour
# 9) Mode Indicator
#    A = Automoous
#    D = Differential
#    E = Estimated / Dead Reckoning
#    M = Manual input
#    N = Data not valid.
# 9) Checksum

float64    VTG_NO_DATA=-999.999

string     talker
float64    track_degrees_true
float64    track_degrees_magnetic
float64    speed_knots
float64    speed_km_per_hour
string     mode
uint8      checksum
"""
  # Pseudo-constants
  VTG_NO_DATA = -999.999

  __slots__ = ['talker','track_degrees_true','track_degrees_magnetic','speed_knots','speed_km_per_hour','mode','checksum']
  _slot_types = ['string','float64','float64','float64','float64','string','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       talker,track_degrees_true,track_degrees_magnetic,speed_knots,speed_km_per_hour,mode,checksum

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Vtg, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.talker is None:
        self.talker = ''
      if self.track_degrees_true is None:
        self.track_degrees_true = 0.
      if self.track_degrees_magnetic is None:
        self.track_degrees_magnetic = 0.
      if self.speed_knots is None:
        self.speed_knots = 0.
      if self.speed_km_per_hour is None:
        self.speed_km_per_hour = 0.
      if self.mode is None:
        self.mode = ''
      if self.checksum is None:
        self.checksum = 0
    else:
      self.talker = ''
      self.track_degrees_true = 0.
      self.track_degrees_magnetic = 0.
      self.speed_knots = 0.
      self.speed_km_per_hour = 0.
      self.mode = ''
      self.checksum = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.talker
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4d().pack(_x.track_degrees_true, _x.track_degrees_magnetic, _x.speed_knots, _x.speed_km_per_hour))
      _x = self.mode
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.checksum
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.talker = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.talker = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.track_degrees_true, _x.track_degrees_magnetic, _x.speed_knots, _x.speed_km_per_hour,) = _get_struct_4d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.mode = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.mode = str[start:end]
      start = end
      end += 1
      (self.checksum,) = _get_struct_B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.talker
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4d().pack(_x.track_degrees_true, _x.track_degrees_magnetic, _x.speed_knots, _x.speed_km_per_hour))
      _x = self.mode
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.checksum
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.talker = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.talker = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.track_degrees_true, _x.track_degrees_magnetic, _x.speed_knots, _x.speed_km_per_hour,) = _get_struct_4d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.mode = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.mode = str[start:end]
      start = end
      end += 1
      (self.checksum,) = _get_struct_B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
