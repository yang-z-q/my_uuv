# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ds_nmea_msgs/Gll.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class Gll(genpy.Message):
  _md5sum = "3cbd960663673048b10980fd2d5a9b4e"
  _type = "ds_nmea_msgs/Gll"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# .       1      2 3        4 5         6 7
#         |      | |        | |         | |
# $--GLL,llll.ll,a,yyyyy.yy,a,hhmmss.ss,A*hh
# 1) Latitude
# 2) N or S (North or South)
# 3) Longitude
# 4) E or W (East or West)
# 5) Time (UTC)
# 6) Status A - Data Valid, V - Data Invalid
# 7) Checksum

float64    GLL_NO_DATA=-999.999

uint8 GLL_DATA_VALID=65     # (ascii 'A')
uint8 GLL_DATA_INVALID=86   # (ascii 'V')

string     talker
float64    latitude
uint8      latitude_dir
float64    longitude
uint8      longitude_dir
time       timestamp
uint8      status
uint8      checksum"""
  # Pseudo-constants
  GLL_NO_DATA = -999.999
  GLL_DATA_VALID = 65
  GLL_DATA_INVALID = 86

  __slots__ = ['talker','latitude','latitude_dir','longitude','longitude_dir','timestamp','status','checksum']
  _slot_types = ['string','float64','uint8','float64','uint8','time','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       talker,latitude,latitude_dir,longitude,longitude_dir,timestamp,status,checksum

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Gll, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.talker is None:
        self.talker = ''
      if self.latitude is None:
        self.latitude = 0.
      if self.latitude_dir is None:
        self.latitude_dir = 0
      if self.longitude is None:
        self.longitude = 0.
      if self.longitude_dir is None:
        self.longitude_dir = 0
      if self.timestamp is None:
        self.timestamp = genpy.Time()
      if self.status is None:
        self.status = 0
      if self.checksum is None:
        self.checksum = 0
    else:
      self.talker = ''
      self.latitude = 0.
      self.latitude_dir = 0
      self.longitude = 0.
      self.longitude_dir = 0
      self.timestamp = genpy.Time()
      self.status = 0
      self.checksum = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.talker
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_dBdB2I2B().pack(_x.latitude, _x.latitude_dir, _x.longitude, _x.longitude_dir, _x.timestamp.secs, _x.timestamp.nsecs, _x.status, _x.checksum))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.timestamp is None:
        self.timestamp = genpy.Time()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.talker = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.talker = str[start:end]
      _x = self
      start = end
      end += 28
      (_x.latitude, _x.latitude_dir, _x.longitude, _x.longitude_dir, _x.timestamp.secs, _x.timestamp.nsecs, _x.status, _x.checksum,) = _get_struct_dBdB2I2B().unpack(str[start:end])
      self.timestamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.talker
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_dBdB2I2B().pack(_x.latitude, _x.latitude_dir, _x.longitude, _x.longitude_dir, _x.timestamp.secs, _x.timestamp.nsecs, _x.status, _x.checksum))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.timestamp is None:
        self.timestamp = genpy.Time()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.talker = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.talker = str[start:end]
      _x = self
      start = end
      end += 28
      (_x.latitude, _x.latitude_dir, _x.longitude, _x.longitude_dir, _x.timestamp.secs, _x.timestamp.nsecs, _x.status, _x.checksum,) = _get_struct_dBdB2I2B().unpack(str[start:end])
      self.timestamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_dBdB2I2B = None
def _get_struct_dBdB2I2B():
    global _struct_dBdB2I2B
    if _struct_dBdB2I2B is None:
        _struct_dBdB2I2B = struct.Struct("<dBdB2I2B")
    return _struct_dBdB2I2B
