# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ds_nmea_msgs/PixseHspos.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class PixseHspos(genpy.Message):
  _md5sum = "ecf1675cf370394ebfc52d763265df25"
  _type = "ds_nmea_msgs/PixseHspos"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# $PIXSE,HSPOS_,hhmmss.ss,llmm.mmmmm,H,LLmm.mmmmm,D,d.dd,a.ad,x.xx,y.yy,z.zz,d.dd,nn,
#          c,e.e,n.n,m.mmmm,s.ssss,vvvv.v<CR><LF>
# where:
# hhmmss.ss      is the validity time of the latitude/longitude data transmitted in the
#                UTC time reference frame if available otherwise in the system
#                time reference frame
# llmm.mmmmm     is the latitude in deg, minutes, decimal minutes
# H              N: north, S: south
# LLLmm.mmmmm    is the longitude in deg, minutes, decimal minutes
# D              E: east, W: west
# d.dd           is the depth in meters
# a.aa           is the altitude in meters (from DVL)
# x.xx           is the latitude Std (meters)
# y.yy           is the longitude Std (meters)
# z.zz           is the latitude longitude error covariance (meters)
# d.dd           is the depth Std (meters)
# nn             is the longitude UTM zone (integer)
# c              is the latitude UTM zone (character)
# e.e            is the East UTM position (meters)
# n.n            is the North UTM position (meters)
# m.mmmm         is the log misalignment according to the heading in degrees
# s.ssss         is the log scale factor error estimation in %
# vvvv.v         is the sound velocity in m/s

time             timestamp
float64          latitude
uint8            latitude_dir
float64          longitude
uint8            longitude_dir
float64          depth
float64          altitude
float64          latitude_stdev
float64          longitude_stdev
float64          depth_stdev
int16            longitude_utm_zone
uint8            latitude_utm_zone
float64          eastings
float64          northings
float64          heading_misalignment
float64          heading_misalignment_scale_factor
float64          sound_velocity"""
  __slots__ = ['timestamp','latitude','latitude_dir','longitude','longitude_dir','depth','altitude','latitude_stdev','longitude_stdev','depth_stdev','longitude_utm_zone','latitude_utm_zone','eastings','northings','heading_misalignment','heading_misalignment_scale_factor','sound_velocity']
  _slot_types = ['time','float64','uint8','float64','uint8','float64','float64','float64','float64','float64','int16','uint8','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       timestamp,latitude,latitude_dir,longitude,longitude_dir,depth,altitude,latitude_stdev,longitude_stdev,depth_stdev,longitude_utm_zone,latitude_utm_zone,eastings,northings,heading_misalignment,heading_misalignment_scale_factor,sound_velocity

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PixseHspos, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.timestamp is None:
        self.timestamp = genpy.Time()
      if self.latitude is None:
        self.latitude = 0.
      if self.latitude_dir is None:
        self.latitude_dir = 0
      if self.longitude is None:
        self.longitude = 0.
      if self.longitude_dir is None:
        self.longitude_dir = 0
      if self.depth is None:
        self.depth = 0.
      if self.altitude is None:
        self.altitude = 0.
      if self.latitude_stdev is None:
        self.latitude_stdev = 0.
      if self.longitude_stdev is None:
        self.longitude_stdev = 0.
      if self.depth_stdev is None:
        self.depth_stdev = 0.
      if self.longitude_utm_zone is None:
        self.longitude_utm_zone = 0
      if self.latitude_utm_zone is None:
        self.latitude_utm_zone = 0
      if self.eastings is None:
        self.eastings = 0.
      if self.northings is None:
        self.northings = 0.
      if self.heading_misalignment is None:
        self.heading_misalignment = 0.
      if self.heading_misalignment_scale_factor is None:
        self.heading_misalignment_scale_factor = 0.
      if self.sound_velocity is None:
        self.sound_velocity = 0.
    else:
      self.timestamp = genpy.Time()
      self.latitude = 0.
      self.latitude_dir = 0
      self.longitude = 0.
      self.longitude_dir = 0
      self.depth = 0.
      self.altitude = 0.
      self.latitude_stdev = 0.
      self.longitude_stdev = 0.
      self.depth_stdev = 0.
      self.longitude_utm_zone = 0
      self.latitude_utm_zone = 0
      self.eastings = 0.
      self.northings = 0.
      self.heading_misalignment = 0.
      self.heading_misalignment_scale_factor = 0.
      self.sound_velocity = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2IdBdB5dhB5d().pack(_x.timestamp.secs, _x.timestamp.nsecs, _x.latitude, _x.latitude_dir, _x.longitude, _x.longitude_dir, _x.depth, _x.altitude, _x.latitude_stdev, _x.longitude_stdev, _x.depth_stdev, _x.longitude_utm_zone, _x.latitude_utm_zone, _x.eastings, _x.northings, _x.heading_misalignment, _x.heading_misalignment_scale_factor, _x.sound_velocity))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.timestamp is None:
        self.timestamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 109
      (_x.timestamp.secs, _x.timestamp.nsecs, _x.latitude, _x.latitude_dir, _x.longitude, _x.longitude_dir, _x.depth, _x.altitude, _x.latitude_stdev, _x.longitude_stdev, _x.depth_stdev, _x.longitude_utm_zone, _x.latitude_utm_zone, _x.eastings, _x.northings, _x.heading_misalignment, _x.heading_misalignment_scale_factor, _x.sound_velocity,) = _get_struct_2IdBdB5dhB5d().unpack(str[start:end])
      self.timestamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2IdBdB5dhB5d().pack(_x.timestamp.secs, _x.timestamp.nsecs, _x.latitude, _x.latitude_dir, _x.longitude, _x.longitude_dir, _x.depth, _x.altitude, _x.latitude_stdev, _x.longitude_stdev, _x.depth_stdev, _x.longitude_utm_zone, _x.latitude_utm_zone, _x.eastings, _x.northings, _x.heading_misalignment, _x.heading_misalignment_scale_factor, _x.sound_velocity))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.timestamp is None:
        self.timestamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 109
      (_x.timestamp.secs, _x.timestamp.nsecs, _x.latitude, _x.latitude_dir, _x.longitude, _x.longitude_dir, _x.depth, _x.altitude, _x.latitude_stdev, _x.longitude_stdev, _x.depth_stdev, _x.longitude_utm_zone, _x.latitude_utm_zone, _x.eastings, _x.northings, _x.heading_misalignment, _x.heading_misalignment_scale_factor, _x.sound_velocity,) = _get_struct_2IdBdB5dhB5d().unpack(str[start:end])
      self.timestamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2IdBdB5dhB5d = None
def _get_struct_2IdBdB5dhB5d():
    global _struct_2IdBdB5dhB5d
    if _struct_2IdBdB5dhB5d is None:
        _struct_2IdBdB5dhB5d = struct.Struct("<2IdBdB5dhB5d")
    return _struct_2IdBdB5dhB5d
