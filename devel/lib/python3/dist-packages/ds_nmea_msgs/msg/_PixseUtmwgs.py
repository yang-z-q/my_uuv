# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ds_nmea_msgs/PixseUtmwgs.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class PixseUtmwgs(genpy.Message):
  _md5sum = "1e85b504ef3574f02eaff5dc8eded397"
  _type = "ds_nmea_msgs/PixseUtmwgs"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# $PIXSE,UTMWGS,c,nn,x.xxx,y.yyy,z.zzz*hh<CR><LF>
# where:
# C is the latitude UTM zone (character)
# nn is the longitude UTM zone (integer)
# x.xxx is the east UTM position in meter
# y.yyy is the north UTM position in meter
# z.zzz is the altitude in meters
# hh is the checksum

uint8 latitude_utm_zone
int16 longitude_utm_zone
float64 eastings
float64 northings
float64 altitude
uint8 checksum
"""
  __slots__ = ['latitude_utm_zone','longitude_utm_zone','eastings','northings','altitude','checksum']
  _slot_types = ['uint8','int16','float64','float64','float64','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       latitude_utm_zone,longitude_utm_zone,eastings,northings,altitude,checksum

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PixseUtmwgs, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.latitude_utm_zone is None:
        self.latitude_utm_zone = 0
      if self.longitude_utm_zone is None:
        self.longitude_utm_zone = 0
      if self.eastings is None:
        self.eastings = 0.
      if self.northings is None:
        self.northings = 0.
      if self.altitude is None:
        self.altitude = 0.
      if self.checksum is None:
        self.checksum = 0
    else:
      self.latitude_utm_zone = 0
      self.longitude_utm_zone = 0
      self.eastings = 0.
      self.northings = 0.
      self.altitude = 0.
      self.checksum = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_Bh3dB().pack(_x.latitude_utm_zone, _x.longitude_utm_zone, _x.eastings, _x.northings, _x.altitude, _x.checksum))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 28
      (_x.latitude_utm_zone, _x.longitude_utm_zone, _x.eastings, _x.northings, _x.altitude, _x.checksum,) = _get_struct_Bh3dB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_Bh3dB().pack(_x.latitude_utm_zone, _x.longitude_utm_zone, _x.eastings, _x.northings, _x.altitude, _x.checksum))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 28
      (_x.latitude_utm_zone, _x.longitude_utm_zone, _x.eastings, _x.northings, _x.altitude, _x.checksum,) = _get_struct_Bh3dB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_Bh3dB = None
def _get_struct_Bh3dB():
    global _struct_Bh3dB
    if _struct_Bh3dB is None:
        _struct_Bh3dB = struct.Struct("<Bh3dB")
    return _struct_Bh3dB
