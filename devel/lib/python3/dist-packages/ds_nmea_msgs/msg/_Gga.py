# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ds_nmea_msgs/Gga.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class Gga(genpy.Message):
  _md5sum = "ac688c8c94235795168e8df4f2a7a2f9"
  _type = "ds_nmea_msgs/Gga"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#         1         2      3 4        5 6 7  8   9   10 |  12 13  14   15
#         |         |      | |        | | |  |   |   |  |  |  |   |    |
# $--GGA,hhmmss.ss,llll.ll,a,yyyyy.yy,a,x,xx,x.x,x.x,M,x.x,M,x.x,xxxx*hh
#  1) Time (UTC)
#  2) Latitude
#  3) N or S (North or South)
#  4) Longitude
#  5) E or W (East or West)
#  6) GPS Quality Indicator,
#  0 - fix not available,
#  1 - GPS fix,
#  2 - Differential GPS fix
#  7) Number of satellites in view, 00 - 12
#  8) Horizontal Dilution of precision
#  9) Antenna Altitude above/below mean-sea-level (geoid)
# 10) Units of antenna altitude, meters
# 11) Geoidal separation, the difference between the WGS-84 earth ellipsoid and mean-sea-level (geoid), "-" means mean-sea-level below ellipsoid
# 12) Units of geoidal separation, meters
# 13) Age of differential GPS data, time in seconds since last SC104 type 1 or 9 update, null field when DGPS is not used
# 14) Differential reference station ID, 0000-1023
# 15) Checksum

# No data value
float64 GGA_NO_DATA=-999.9999

# Enum values for fix_quality field.
uint8 FIX_NONE=0
uint8 FIX_GPS=1
uint8 FIX_DGPS=2

string           talker
time             timestamp
float64          latitude
uint8            latitude_dir
float64          longitude
uint8            longitude_dir
uint8            fix_quality
uint8            num_satellites
float64          hdop
float64          antenna_alt
uint8            antenna_alt_unit
float64          geoid_separation
uint8            geoid_separation_unit
float64          dgps_age
uint16           dgps_ref
uint8            checksum


"""
  # Pseudo-constants
  GGA_NO_DATA = -999.9999
  FIX_NONE = 0
  FIX_GPS = 1
  FIX_DGPS = 2

  __slots__ = ['talker','timestamp','latitude','latitude_dir','longitude','longitude_dir','fix_quality','num_satellites','hdop','antenna_alt','antenna_alt_unit','geoid_separation','geoid_separation_unit','dgps_age','dgps_ref','checksum']
  _slot_types = ['string','time','float64','uint8','float64','uint8','uint8','uint8','float64','float64','uint8','float64','uint8','float64','uint16','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       talker,timestamp,latitude,latitude_dir,longitude,longitude_dir,fix_quality,num_satellites,hdop,antenna_alt,antenna_alt_unit,geoid_separation,geoid_separation_unit,dgps_age,dgps_ref,checksum

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Gga, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.talker is None:
        self.talker = ''
      if self.timestamp is None:
        self.timestamp = genpy.Time()
      if self.latitude is None:
        self.latitude = 0.
      if self.latitude_dir is None:
        self.latitude_dir = 0
      if self.longitude is None:
        self.longitude = 0.
      if self.longitude_dir is None:
        self.longitude_dir = 0
      if self.fix_quality is None:
        self.fix_quality = 0
      if self.num_satellites is None:
        self.num_satellites = 0
      if self.hdop is None:
        self.hdop = 0.
      if self.antenna_alt is None:
        self.antenna_alt = 0.
      if self.antenna_alt_unit is None:
        self.antenna_alt_unit = 0
      if self.geoid_separation is None:
        self.geoid_separation = 0.
      if self.geoid_separation_unit is None:
        self.geoid_separation_unit = 0
      if self.dgps_age is None:
        self.dgps_age = 0.
      if self.dgps_ref is None:
        self.dgps_ref = 0
      if self.checksum is None:
        self.checksum = 0
    else:
      self.talker = ''
      self.timestamp = genpy.Time()
      self.latitude = 0.
      self.latitude_dir = 0
      self.longitude = 0.
      self.longitude_dir = 0
      self.fix_quality = 0
      self.num_satellites = 0
      self.hdop = 0.
      self.antenna_alt = 0.
      self.antenna_alt_unit = 0
      self.geoid_separation = 0.
      self.geoid_separation_unit = 0
      self.dgps_age = 0.
      self.dgps_ref = 0
      self.checksum = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.talker
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2IdBd3B2dBdBdHB().pack(_x.timestamp.secs, _x.timestamp.nsecs, _x.latitude, _x.latitude_dir, _x.longitude, _x.longitude_dir, _x.fix_quality, _x.num_satellites, _x.hdop, _x.antenna_alt, _x.antenna_alt_unit, _x.geoid_separation, _x.geoid_separation_unit, _x.dgps_age, _x.dgps_ref, _x.checksum))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.timestamp is None:
        self.timestamp = genpy.Time()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.talker = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.talker = str[start:end]
      _x = self
      start = end
      end += 65
      (_x.timestamp.secs, _x.timestamp.nsecs, _x.latitude, _x.latitude_dir, _x.longitude, _x.longitude_dir, _x.fix_quality, _x.num_satellites, _x.hdop, _x.antenna_alt, _x.antenna_alt_unit, _x.geoid_separation, _x.geoid_separation_unit, _x.dgps_age, _x.dgps_ref, _x.checksum,) = _get_struct_2IdBd3B2dBdBdHB().unpack(str[start:end])
      self.timestamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.talker
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2IdBd3B2dBdBdHB().pack(_x.timestamp.secs, _x.timestamp.nsecs, _x.latitude, _x.latitude_dir, _x.longitude, _x.longitude_dir, _x.fix_quality, _x.num_satellites, _x.hdop, _x.antenna_alt, _x.antenna_alt_unit, _x.geoid_separation, _x.geoid_separation_unit, _x.dgps_age, _x.dgps_ref, _x.checksum))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.timestamp is None:
        self.timestamp = genpy.Time()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.talker = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.talker = str[start:end]
      _x = self
      start = end
      end += 65
      (_x.timestamp.secs, _x.timestamp.nsecs, _x.latitude, _x.latitude_dir, _x.longitude, _x.longitude_dir, _x.fix_quality, _x.num_satellites, _x.hdop, _x.antenna_alt, _x.antenna_alt_unit, _x.geoid_separation, _x.geoid_separation_unit, _x.dgps_age, _x.dgps_ref, _x.checksum,) = _get_struct_2IdBd3B2dBdBdHB().unpack(str[start:end])
      self.timestamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2IdBd3B2dBdBdHB = None
def _get_struct_2IdBd3B2dBdBdHB():
    global _struct_2IdBd3B2dBdBdHB
    if _struct_2IdBd3B2dBdBdHB is None:
        _struct_2IdBd3B2dBdBdHB = struct.Struct("<2IdBd3B2dBdBdHB")
    return _struct_2IdBd3B2dBdBdHB
