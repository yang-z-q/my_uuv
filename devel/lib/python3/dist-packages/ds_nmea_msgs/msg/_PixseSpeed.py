# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ds_nmea_msgs/PixseSpeed.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class PixseSpeed(genpy.Message):
  _md5sum = "3f028522c0df046dec199efa0c56e7f7"
  _type = "ds_nmea_msgs/PixseSpeed"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# $PIXSE,SPEED_,x.xxx,y.yyy,z.zzz*hh<CR><LF>
# where:
# x.xxx is the east speed in m/s (in terrestrial reference frame)
# y.yyy is the north speed in m/s (in terrestrial reference frame)
# z.zzz is the vertical (Sign “+” towards up side) speed in m/s (in terrestrial reference frame)
# hh is the checksum

float64 east
float64 north
float64 vertical
uint8 checksum"""
  __slots__ = ['east','north','vertical','checksum']
  _slot_types = ['float64','float64','float64','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       east,north,vertical,checksum

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PixseSpeed, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.east is None:
        self.east = 0.
      if self.north is None:
        self.north = 0.
      if self.vertical is None:
        self.vertical = 0.
      if self.checksum is None:
        self.checksum = 0
    else:
      self.east = 0.
      self.north = 0.
      self.vertical = 0.
      self.checksum = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3dB().pack(_x.east, _x.north, _x.vertical, _x.checksum))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 25
      (_x.east, _x.north, _x.vertical, _x.checksum,) = _get_struct_3dB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3dB().pack(_x.east, _x.north, _x.vertical, _x.checksum))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 25
      (_x.east, _x.north, _x.vertical, _x.checksum,) = _get_struct_3dB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3dB = None
def _get_struct_3dB():
    global _struct_3dB
    if _struct_3dB is None:
        _struct_3dB = struct.Struct("<3dB")
    return _struct_3dB
