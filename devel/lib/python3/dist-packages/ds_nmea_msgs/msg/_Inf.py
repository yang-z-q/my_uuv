# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ds_nmea_msgs/Inf.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Inf(genpy.Message):
  _md5sum = "e4d60c2fdfcc64b5fd2650a1d8a49b0f"
  _type = "ds_nmea_msgs/Inf"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# $PHINF,hhhhhhhh*hh
#Bit 0 Heading not valid
#Bit 1 Roll not valid
#Bit 2 Pitch not valid
#Bit 3 Position (Heave, surge and sway) not valid
#Bit 4 Position calculation starting
#Bit 5 Initialization
#Bit 6 Reserved
#Bit 7 Reserved
#Bit 8 FOG X1 Error
#Bit 9 FOG X2 Error
#Bit 10 FOG X3 Error
#Bit 11 Optical source error
#Bit 12 Accelerometer X1 error
#Bit 13 Accelerometer X2 error
#Bit 14 Accelerometer X3 error
#Bit 15 Analog input A or B error
#Bit 16 Serial input A error
#Bit 17 Serial input B error
#Bit 18 Serial input C error
#Bit 19 FIFO Full
#Bit 20 Serial output A full
#Bit 21 Serial output B full
#Bit 22 Serial output C full
#Bit 23 Reserved
#Bit 24 Manual log used
#Bit 25 Manual latitude used

bool heading_invalid
bool pitch_invalid
bool roll_invalid
uint8 checksum"""
  __slots__ = ['heading_invalid','pitch_invalid','roll_invalid','checksum']
  _slot_types = ['bool','bool','bool','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       heading_invalid,pitch_invalid,roll_invalid,checksum

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Inf, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.heading_invalid is None:
        self.heading_invalid = False
      if self.pitch_invalid is None:
        self.pitch_invalid = False
      if self.roll_invalid is None:
        self.roll_invalid = False
      if self.checksum is None:
        self.checksum = 0
    else:
      self.heading_invalid = False
      self.pitch_invalid = False
      self.roll_invalid = False
      self.checksum = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4B().pack(_x.heading_invalid, _x.pitch_invalid, _x.roll_invalid, _x.checksum))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 4
      (_x.heading_invalid, _x.pitch_invalid, _x.roll_invalid, _x.checksum,) = _get_struct_4B().unpack(str[start:end])
      self.heading_invalid = bool(self.heading_invalid)
      self.pitch_invalid = bool(self.pitch_invalid)
      self.roll_invalid = bool(self.roll_invalid)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4B().pack(_x.heading_invalid, _x.pitch_invalid, _x.roll_invalid, _x.checksum))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 4
      (_x.heading_invalid, _x.pitch_invalid, _x.roll_invalid, _x.checksum,) = _get_struct_4B().unpack(str[start:end])
      self.heading_invalid = bool(self.heading_invalid)
      self.pitch_invalid = bool(self.pitch_invalid)
      self.roll_invalid = bool(self.roll_invalid)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4B = None
def _get_struct_4B():
    global _struct_4B
    if _struct_4B is None:
        _struct_4B = struct.Struct("<4B")
    return _struct_4B
