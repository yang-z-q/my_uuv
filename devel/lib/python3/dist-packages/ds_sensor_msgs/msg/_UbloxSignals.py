# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ds_sensor_msgs/UbloxSignals.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ds_core_msgs.msg
import ds_sensor_msgs.msg
import genpy
import std_msgs.msg

class UbloxSignals(genpy.Message):
  _md5sum = "d3cb094d8c68a58afaa63c59f32e9726"
  _type = "ds_sensor_msgs/UbloxSignals"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """# The standard 2-part DsHeader block
# This allows both a standard ROS header and DS-specific header blocks
# See HEADERS.md in ds_core_msgs for details
std_msgs/Header header
ds_core_msgs/DsHeader ds_header

# GPS time of this message
uint32 time_of_week

# So you probably want to call this one "signals".  But don't do that.  QT won't like it.  A LOT.
UbloxSignal[] sat_signals
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: ds_core_msgs/DsHeader
# This is half our standard header for ds_msgs; see
# HEADERS.md for details

# This header should ALWAYS be paired with a std_msgs/Header
# and should ALWAYS reference HEADERS.md.  If you're looking at this
# file to add headers to a type, you probably want to copy/paste
# the following block:
#
#     # The standard 2-part DsHeader block
#     # This allows both a standard ROS header and DS-specific header blocks
#     # See HEADERS.md in ds_core_msgs for details
#     std_msgs/Header header
#     ds_core_msgs/DsHeader ds_header
#

# Time data was received or sent out (i/o time)
time io_time

# Sensor source UUID
uint8[16] source_uuid


================================================================================
MSG: ds_sensor_msgs/UbloxSignal


# A string identifying which GNSS system is in use (e.g., GPS, BeiDou, GLONASS, etc)
string gnss_id

# The ID of the specific satellite that broadcast the signal.  Includes
# a letter indicating the service.  Example: GPS satellite #4 would be G4.
# IDs:
# G: GPS (US system)
# S: SBAS (Satellite Based Augmentation System, so WAAS, EGNOS, SDCM, GAGAN, etc)
# E: Galileo (European system)
# B: BeiDou (Chinese system)
# Q: QZSS (Japanese SBAS that also transmits GPS-style timing signals)
# R: GLONASS (Russian system)
string sat_id

# Signal ID (each satellite can broadcast multiple signals)
string sig_id

# Carrier-to-noise-density ratio (dBHz)
float32 carrier_noise

# Pseudorange residual, in meters
float32 pseudorange_residual

# Signal quality
uint16 quality_indicator
uint16 QUALITY_NOSIGNAL = 0
uint16 QUALITY_SEARCHING = 1
uint16 QUALITY_ACQUIRED = 2
uint16 QUALITY_UNUSABLE = 3
uint16 QUALITY_CODELOCKED = 4
uint16 QUALITY_CODECARRIERTIME_LOCKED_5 = 5
uint16 QUALITY_CODECARRIERTIME_LOCKED_6 = 6
uint16 QUALITY_CODECARRIERTIME_LOCKED_7 = 7

# Correction Source
uint16 correction_source
uint16 CORRECTIONS_NONE = 0
uint16 CORRECTIONS_SBAS = 1
uint16 CORRECTIONS_BEIDOU = 2
uint16 CORRECTIONS_RTCM2 = 3
uint16 CORRECTIONS_RTCM3OSR = 4
uint16 CORRECTIONS_RTCM3SSR = 5
uint16 CORRECTIONS_QZSSSLAS = 6

# Ionosphere Model Used
uint16 ionosphere_model
uint16 IONOMODEL_NONE = 0
uint16 IONOMODEL_KLOBUCHARGPS = 1
uint16 IONOMODEL_SBAS = 2
uint16 IONOMODEL_KLOBUCHARBEIDOU = 3

# flags
uint16 health
uint16 HEALTH_UNKNOWN = 0
uint16 HEALTH_HEALTHY = 1
uint16 HEALTH_UNHEALTH = 2

bool pseudorange_smoothed
bool pseudorange_used
bool carrier_range_used
bool doppler_used
bool pseudorange_corrections_applied
bool carrier_range_corrections_applied
bool doppler_corrections_applied
"""
  __slots__ = ['header','ds_header','time_of_week','sat_signals']
  _slot_types = ['std_msgs/Header','ds_core_msgs/DsHeader','uint32','ds_sensor_msgs/UbloxSignal[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,ds_header,time_of_week,sat_signals

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(UbloxSignals, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.ds_header is None:
        self.ds_header = ds_core_msgs.msg.DsHeader()
      if self.time_of_week is None:
        self.time_of_week = 0
      if self.sat_signals is None:
        self.sat_signals = []
    else:
      self.header = std_msgs.msg.Header()
      self.ds_header = ds_core_msgs.msg.DsHeader()
      self.time_of_week = 0
      self.sat_signals = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.ds_header.io_time.secs, _x.ds_header.io_time.nsecs))
      _x = self.ds_header.source_uuid
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_16B().pack(*_x))
      else:
        buff.write(_get_struct_16s().pack(_x))
      _x = self.time_of_week
      buff.write(_get_struct_I().pack(_x))
      length = len(self.sat_signals)
      buff.write(_struct_I.pack(length))
      for val1 in self.sat_signals:
        _x = val1.gnss_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.sat_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.sig_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2f4H7B().pack(_x.carrier_noise, _x.pseudorange_residual, _x.quality_indicator, _x.correction_source, _x.ionosphere_model, _x.health, _x.pseudorange_smoothed, _x.pseudorange_used, _x.carrier_range_used, _x.doppler_used, _x.pseudorange_corrections_applied, _x.carrier_range_corrections_applied, _x.doppler_corrections_applied))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.ds_header is None:
        self.ds_header = ds_core_msgs.msg.DsHeader()
      if self.sat_signals is None:
        self.sat_signals = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.ds_header.io_time.secs, _x.ds_header.io_time.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 16
      self.ds_header.source_uuid = str[start:end]
      start = end
      end += 4
      (self.time_of_week,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.sat_signals = []
      for i in range(0, length):
        val1 = ds_sensor_msgs.msg.UbloxSignal()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.gnss_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.gnss_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.sat_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.sat_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.sig_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.sig_id = str[start:end]
        _x = val1
        start = end
        end += 23
        (_x.carrier_noise, _x.pseudorange_residual, _x.quality_indicator, _x.correction_source, _x.ionosphere_model, _x.health, _x.pseudorange_smoothed, _x.pseudorange_used, _x.carrier_range_used, _x.doppler_used, _x.pseudorange_corrections_applied, _x.carrier_range_corrections_applied, _x.doppler_corrections_applied,) = _get_struct_2f4H7B().unpack(str[start:end])
        val1.pseudorange_smoothed = bool(val1.pseudorange_smoothed)
        val1.pseudorange_used = bool(val1.pseudorange_used)
        val1.carrier_range_used = bool(val1.carrier_range_used)
        val1.doppler_used = bool(val1.doppler_used)
        val1.pseudorange_corrections_applied = bool(val1.pseudorange_corrections_applied)
        val1.carrier_range_corrections_applied = bool(val1.carrier_range_corrections_applied)
        val1.doppler_corrections_applied = bool(val1.doppler_corrections_applied)
        self.sat_signals.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.ds_header.io_time.secs, _x.ds_header.io_time.nsecs))
      _x = self.ds_header.source_uuid
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_16B().pack(*_x))
      else:
        buff.write(_get_struct_16s().pack(_x))
      _x = self.time_of_week
      buff.write(_get_struct_I().pack(_x))
      length = len(self.sat_signals)
      buff.write(_struct_I.pack(length))
      for val1 in self.sat_signals:
        _x = val1.gnss_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.sat_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.sig_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2f4H7B().pack(_x.carrier_noise, _x.pseudorange_residual, _x.quality_indicator, _x.correction_source, _x.ionosphere_model, _x.health, _x.pseudorange_smoothed, _x.pseudorange_used, _x.carrier_range_used, _x.doppler_used, _x.pseudorange_corrections_applied, _x.carrier_range_corrections_applied, _x.doppler_corrections_applied))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.ds_header is None:
        self.ds_header = ds_core_msgs.msg.DsHeader()
      if self.sat_signals is None:
        self.sat_signals = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.ds_header.io_time.secs, _x.ds_header.io_time.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 16
      self.ds_header.source_uuid = str[start:end]
      start = end
      end += 4
      (self.time_of_week,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.sat_signals = []
      for i in range(0, length):
        val1 = ds_sensor_msgs.msg.UbloxSignal()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.gnss_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.gnss_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.sat_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.sat_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.sig_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.sig_id = str[start:end]
        _x = val1
        start = end
        end += 23
        (_x.carrier_noise, _x.pseudorange_residual, _x.quality_indicator, _x.correction_source, _x.ionosphere_model, _x.health, _x.pseudorange_smoothed, _x.pseudorange_used, _x.carrier_range_used, _x.doppler_used, _x.pseudorange_corrections_applied, _x.carrier_range_corrections_applied, _x.doppler_corrections_applied,) = _get_struct_2f4H7B().unpack(str[start:end])
        val1.pseudorange_smoothed = bool(val1.pseudorange_smoothed)
        val1.pseudorange_used = bool(val1.pseudorange_used)
        val1.carrier_range_used = bool(val1.carrier_range_used)
        val1.doppler_used = bool(val1.doppler_used)
        val1.pseudorange_corrections_applied = bool(val1.pseudorange_corrections_applied)
        val1.carrier_range_corrections_applied = bool(val1.carrier_range_corrections_applied)
        val1.doppler_corrections_applied = bool(val1.doppler_corrections_applied)
        self.sat_signals.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_16B = None
def _get_struct_16B():
    global _struct_16B
    if _struct_16B is None:
        _struct_16B = struct.Struct("<16B")
    return _struct_16B
_struct_16s = None
def _get_struct_16s():
    global _struct_16s
    if _struct_16s is None:
        _struct_16s = struct.Struct("<16s")
    return _struct_16s
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_2f4H7B = None
def _get_struct_2f4H7B():
    global _struct_2f4H7B
    if _struct_2f4H7B is None:
        _struct_2f4H7B = struct.Struct("<2f4H7B")
    return _struct_2f4H7B
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
