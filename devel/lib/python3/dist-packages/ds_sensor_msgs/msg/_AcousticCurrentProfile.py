# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ds_sensor_msgs/AcousticCurrentProfile.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class AcousticCurrentProfile(genpy.Message):
  _md5sum = "9b3ef39fd361d69ce05d2da04c704cc3"
  _type = "ds_sensor_msgs/AcousticCurrentProfile"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Sub-message of DVL "DopplerVelocity.msg"

# low-latency trigger flag
uint32 cx
# bottom track pings per ensemble
uint32 bp
# water profile pings per ensemble
uint32 wp
# number of bins
uint32 wn
# bin spaging [cm]
uint32 ws
# transmit length [cm]
uint32 wt
# blank after transmit [cm]
uint32 wf
# false target threshold
uint32 wa
# low correlation threshold
uint32 wc
# error correlation threshold
uint32 we
# data out flags
uint32 wd
# clip past bottom flag
uint32 wi
"""
  __slots__ = ['cx','bp','wp','wn','ws','wt','wf','wa','wc','we','wd','wi']
  _slot_types = ['uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       cx,bp,wp,wn,ws,wt,wf,wa,wc,we,wd,wi

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(AcousticCurrentProfile, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.cx is None:
        self.cx = 0
      if self.bp is None:
        self.bp = 0
      if self.wp is None:
        self.wp = 0
      if self.wn is None:
        self.wn = 0
      if self.ws is None:
        self.ws = 0
      if self.wt is None:
        self.wt = 0
      if self.wf is None:
        self.wf = 0
      if self.wa is None:
        self.wa = 0
      if self.wc is None:
        self.wc = 0
      if self.we is None:
        self.we = 0
      if self.wd is None:
        self.wd = 0
      if self.wi is None:
        self.wi = 0
    else:
      self.cx = 0
      self.bp = 0
      self.wp = 0
      self.wn = 0
      self.ws = 0
      self.wt = 0
      self.wf = 0
      self.wa = 0
      self.wc = 0
      self.we = 0
      self.wd = 0
      self.wi = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_12I().pack(_x.cx, _x.bp, _x.wp, _x.wn, _x.ws, _x.wt, _x.wf, _x.wa, _x.wc, _x.we, _x.wd, _x.wi))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 48
      (_x.cx, _x.bp, _x.wp, _x.wn, _x.ws, _x.wt, _x.wf, _x.wa, _x.wc, _x.we, _x.wd, _x.wi,) = _get_struct_12I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_12I().pack(_x.cx, _x.bp, _x.wp, _x.wn, _x.ws, _x.wt, _x.wf, _x.wa, _x.wc, _x.we, _x.wd, _x.wi))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 48
      (_x.cx, _x.bp, _x.wp, _x.wn, _x.ws, _x.wt, _x.wf, _x.wa, _x.wc, _x.we, _x.wd, _x.wi,) = _get_struct_12I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_12I = None
def _get_struct_12I():
    global _struct_12I
    if _struct_12I is None:
        _struct_12I = struct.Struct("<12I")
    return _struct_12I
