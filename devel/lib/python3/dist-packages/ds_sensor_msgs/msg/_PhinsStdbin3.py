# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ds_sensor_msgs/PhinsStdbin3.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ds_core_msgs.msg
import genpy
import std_msgs.msg

class PhinsStdbin3(genpy.Message):
  _md5sum = "43569f5d1f6be2bb19fb99698943aa05"
  _type = "ds_sensor_msgs/PhinsStdbin3"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """# The standard 2-part DsHeader block
# This allows both a standard ROS header and DS-specific header blocks
# See HEADERS.md in ds_core_msgs for details
std_msgs/Header header
ds_core_msgs/DsHeader ds_header

# This includes as much data from the Phins STDBIN Version 3 binary message.
# See the document 7-INS-InterfaceLibrary_MU-INSIII-AN-001-U.pdf for details on this
# format.  Where possible, the coordinate system for each field has been included in the
# field.  XV(1,2,3) are the body-frame.  XV(1,2,3)H are a body-centered local/level frame.
# East, North, Up, and Down are geographic.  Where possible, units are
# meters, meters/sec, degrees, degrees per second, etc.

# We include a couple header fields so at least w know what might be valid
uint32 nav_fields
uint32 extended_nav_fields
uint32 external_data_fields
float64 nav_validity_time
uint32 counter

# Heading, pitch, and roll have their own definitions
float32 heading
float32 roll
float32 pitch
float32 heading_stddev
float32 roll_stddev
float32 pitch_stddev

# Real-time heave at the selected lever-arm, in meters
float32[3] rt_heave_XVnH

# Time of validity for smart heave, in seconds
float64 smart_heave_validity_time

# Smart heave, at primary lever-arm.  Meters, positive up, XV3H
float32 smart_heave

# Heading, pitch, and roll rate.  Degrees / s
float32 heading_rate
float32 roll_rate
float32 pitch_rate

# Body rotation rates, degrees/s
float32[3] body_rates_XVn

# Body-frame accelerations at the primary lever-arm, m/s^2
# Corrected for gravity and Coriolois
float32[3] body_accel_XVn

# Lat/lon in degrees
float64 latitude
float64 longitude

# Altitude in meters, positive up.  Referenced as shown in reference field
float32 altitude
uint8 altitude_reference
uint8 ALTREF_GEOID = 0
uint8 ALTREF_ELLPS = 1

# Position covariance matrix, meters, row-major (doesnt' matter really...)
# north first
float32[4] position_cov
float32 altitude_stddev

# Geographic velocity, m/s, north/east/up
float32[3] velocity_NEU
float32[3] velocity_stddev_NEU

# Geographic current estimate, m/s, north/east
float32[2] current_NE
float32[2] current_stddev_NE

uint8 day
uint8 month
uint16 year

# Status words are recorded, but not decoded.  Refer to the manual for details
uint32[2] sensor_status
uint32[4] ins_algo_status
uint32[3] ins_system_status
uint32 ins_user_status
uint32 ahrs_algo_status
uint32[3] ahrs_system_status
uint32 ahrs_user_status

# m/s.  Note we put in the order 1-2-3, NOT the XV3H order shown in the manual
float32[3] heaveSurgeSway_speed_XVnH

# Body-frame velocity, primary lever-arm
float32[3] body_velocity_XVn

# Geographic frame accelerations, primary lever-arm.  m/s^2.  Not compensated for gravity.
# North East Up
float32[3] geo_accel_NEU

# degrees
float32 course_over_ground

# m/s
float32 speed_over_ground

# Average FOG temperature, deg C
float32 temp_avg_fog

# Average Accelerometer temperature, deg C
float32 temp_avg_acc

# Sensor Board temperature, deg C
float32 temp_board

# The attitude quaternion may or may not conform to the ROS standard
# Until that's determined, it stays a float32[4]
float32[4] attitude_quaternion
float32[3] attitude_quaternion_stddev

# Raw body-frame accelerations, m/s^2.  VERY quantized on non-export-controlled Phins.
float32[3] raw_accel_XVn

# Body-frame acceleration stddev, m/s^2
float32[3] body_accel_stddev_XVn

# Body-frame rotation rate standard deviation
float32[3] body_rotrate_stddev_XVn

# Raw body-rate rotation acceleration
float32[3] raw_rot_acc_XVn
float32[3] raw_rot_acc_stddev_XVn

# Raw vessel-frame rotation rate, not compensated for earth rate.  Quantized on
# non-export-controlled Phins
float32[3] raw_rot_rate_XVn



================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: ds_core_msgs/DsHeader
# This is half our standard header for ds_msgs; see
# HEADERS.md for details

# This header should ALWAYS be paired with a std_msgs/Header
# and should ALWAYS reference HEADERS.md.  If you're looking at this
# file to add headers to a type, you probably want to copy/paste
# the following block:
#
#     # The standard 2-part DsHeader block
#     # This allows both a standard ROS header and DS-specific header blocks
#     # See HEADERS.md in ds_core_msgs for details
#     std_msgs/Header header
#     ds_core_msgs/DsHeader ds_header
#

# Time data was received or sent out (i/o time)
time io_time

# Sensor source UUID
uint8[16] source_uuid

"""
  # Pseudo-constants
  ALTREF_GEOID = 0
  ALTREF_ELLPS = 1

  __slots__ = ['header','ds_header','nav_fields','extended_nav_fields','external_data_fields','nav_validity_time','counter','heading','roll','pitch','heading_stddev','roll_stddev','pitch_stddev','rt_heave_XVnH','smart_heave_validity_time','smart_heave','heading_rate','roll_rate','pitch_rate','body_rates_XVn','body_accel_XVn','latitude','longitude','altitude','altitude_reference','position_cov','altitude_stddev','velocity_NEU','velocity_stddev_NEU','current_NE','current_stddev_NE','day','month','year','sensor_status','ins_algo_status','ins_system_status','ins_user_status','ahrs_algo_status','ahrs_system_status','ahrs_user_status','heaveSurgeSway_speed_XVnH','body_velocity_XVn','geo_accel_NEU','course_over_ground','speed_over_ground','temp_avg_fog','temp_avg_acc','temp_board','attitude_quaternion','attitude_quaternion_stddev','raw_accel_XVn','body_accel_stddev_XVn','body_rotrate_stddev_XVn','raw_rot_acc_XVn','raw_rot_acc_stddev_XVn','raw_rot_rate_XVn']
  _slot_types = ['std_msgs/Header','ds_core_msgs/DsHeader','uint32','uint32','uint32','float64','uint32','float32','float32','float32','float32','float32','float32','float32[3]','float64','float32','float32','float32','float32','float32[3]','float32[3]','float64','float64','float32','uint8','float32[4]','float32','float32[3]','float32[3]','float32[2]','float32[2]','uint8','uint8','uint16','uint32[2]','uint32[4]','uint32[3]','uint32','uint32','uint32[3]','uint32','float32[3]','float32[3]','float32[3]','float32','float32','float32','float32','float32','float32[4]','float32[3]','float32[3]','float32[3]','float32[3]','float32[3]','float32[3]','float32[3]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,ds_header,nav_fields,extended_nav_fields,external_data_fields,nav_validity_time,counter,heading,roll,pitch,heading_stddev,roll_stddev,pitch_stddev,rt_heave_XVnH,smart_heave_validity_time,smart_heave,heading_rate,roll_rate,pitch_rate,body_rates_XVn,body_accel_XVn,latitude,longitude,altitude,altitude_reference,position_cov,altitude_stddev,velocity_NEU,velocity_stddev_NEU,current_NE,current_stddev_NE,day,month,year,sensor_status,ins_algo_status,ins_system_status,ins_user_status,ahrs_algo_status,ahrs_system_status,ahrs_user_status,heaveSurgeSway_speed_XVnH,body_velocity_XVn,geo_accel_NEU,course_over_ground,speed_over_ground,temp_avg_fog,temp_avg_acc,temp_board,attitude_quaternion,attitude_quaternion_stddev,raw_accel_XVn,body_accel_stddev_XVn,body_rotrate_stddev_XVn,raw_rot_acc_XVn,raw_rot_acc_stddev_XVn,raw_rot_rate_XVn

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PhinsStdbin3, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.ds_header is None:
        self.ds_header = ds_core_msgs.msg.DsHeader()
      if self.nav_fields is None:
        self.nav_fields = 0
      if self.extended_nav_fields is None:
        self.extended_nav_fields = 0
      if self.external_data_fields is None:
        self.external_data_fields = 0
      if self.nav_validity_time is None:
        self.nav_validity_time = 0.
      if self.counter is None:
        self.counter = 0
      if self.heading is None:
        self.heading = 0.
      if self.roll is None:
        self.roll = 0.
      if self.pitch is None:
        self.pitch = 0.
      if self.heading_stddev is None:
        self.heading_stddev = 0.
      if self.roll_stddev is None:
        self.roll_stddev = 0.
      if self.pitch_stddev is None:
        self.pitch_stddev = 0.
      if self.rt_heave_XVnH is None:
        self.rt_heave_XVnH = [0.] * 3
      if self.smart_heave_validity_time is None:
        self.smart_heave_validity_time = 0.
      if self.smart_heave is None:
        self.smart_heave = 0.
      if self.heading_rate is None:
        self.heading_rate = 0.
      if self.roll_rate is None:
        self.roll_rate = 0.
      if self.pitch_rate is None:
        self.pitch_rate = 0.
      if self.body_rates_XVn is None:
        self.body_rates_XVn = [0.] * 3
      if self.body_accel_XVn is None:
        self.body_accel_XVn = [0.] * 3
      if self.latitude is None:
        self.latitude = 0.
      if self.longitude is None:
        self.longitude = 0.
      if self.altitude is None:
        self.altitude = 0.
      if self.altitude_reference is None:
        self.altitude_reference = 0
      if self.position_cov is None:
        self.position_cov = [0.] * 4
      if self.altitude_stddev is None:
        self.altitude_stddev = 0.
      if self.velocity_NEU is None:
        self.velocity_NEU = [0.] * 3
      if self.velocity_stddev_NEU is None:
        self.velocity_stddev_NEU = [0.] * 3
      if self.current_NE is None:
        self.current_NE = [0.] * 2
      if self.current_stddev_NE is None:
        self.current_stddev_NE = [0.] * 2
      if self.day is None:
        self.day = 0
      if self.month is None:
        self.month = 0
      if self.year is None:
        self.year = 0
      if self.sensor_status is None:
        self.sensor_status = [0] * 2
      if self.ins_algo_status is None:
        self.ins_algo_status = [0] * 4
      if self.ins_system_status is None:
        self.ins_system_status = [0] * 3
      if self.ins_user_status is None:
        self.ins_user_status = 0
      if self.ahrs_algo_status is None:
        self.ahrs_algo_status = 0
      if self.ahrs_system_status is None:
        self.ahrs_system_status = [0] * 3
      if self.ahrs_user_status is None:
        self.ahrs_user_status = 0
      if self.heaveSurgeSway_speed_XVnH is None:
        self.heaveSurgeSway_speed_XVnH = [0.] * 3
      if self.body_velocity_XVn is None:
        self.body_velocity_XVn = [0.] * 3
      if self.geo_accel_NEU is None:
        self.geo_accel_NEU = [0.] * 3
      if self.course_over_ground is None:
        self.course_over_ground = 0.
      if self.speed_over_ground is None:
        self.speed_over_ground = 0.
      if self.temp_avg_fog is None:
        self.temp_avg_fog = 0.
      if self.temp_avg_acc is None:
        self.temp_avg_acc = 0.
      if self.temp_board is None:
        self.temp_board = 0.
      if self.attitude_quaternion is None:
        self.attitude_quaternion = [0.] * 4
      if self.attitude_quaternion_stddev is None:
        self.attitude_quaternion_stddev = [0.] * 3
      if self.raw_accel_XVn is None:
        self.raw_accel_XVn = [0.] * 3
      if self.body_accel_stddev_XVn is None:
        self.body_accel_stddev_XVn = [0.] * 3
      if self.body_rotrate_stddev_XVn is None:
        self.body_rotrate_stddev_XVn = [0.] * 3
      if self.raw_rot_acc_XVn is None:
        self.raw_rot_acc_XVn = [0.] * 3
      if self.raw_rot_acc_stddev_XVn is None:
        self.raw_rot_acc_stddev_XVn = [0.] * 3
      if self.raw_rot_rate_XVn is None:
        self.raw_rot_rate_XVn = [0.] * 3
    else:
      self.header = std_msgs.msg.Header()
      self.ds_header = ds_core_msgs.msg.DsHeader()
      self.nav_fields = 0
      self.extended_nav_fields = 0
      self.external_data_fields = 0
      self.nav_validity_time = 0.
      self.counter = 0
      self.heading = 0.
      self.roll = 0.
      self.pitch = 0.
      self.heading_stddev = 0.
      self.roll_stddev = 0.
      self.pitch_stddev = 0.
      self.rt_heave_XVnH = [0.] * 3
      self.smart_heave_validity_time = 0.
      self.smart_heave = 0.
      self.heading_rate = 0.
      self.roll_rate = 0.
      self.pitch_rate = 0.
      self.body_rates_XVn = [0.] * 3
      self.body_accel_XVn = [0.] * 3
      self.latitude = 0.
      self.longitude = 0.
      self.altitude = 0.
      self.altitude_reference = 0
      self.position_cov = [0.] * 4
      self.altitude_stddev = 0.
      self.velocity_NEU = [0.] * 3
      self.velocity_stddev_NEU = [0.] * 3
      self.current_NE = [0.] * 2
      self.current_stddev_NE = [0.] * 2
      self.day = 0
      self.month = 0
      self.year = 0
      self.sensor_status = [0] * 2
      self.ins_algo_status = [0] * 4
      self.ins_system_status = [0] * 3
      self.ins_user_status = 0
      self.ahrs_algo_status = 0
      self.ahrs_system_status = [0] * 3
      self.ahrs_user_status = 0
      self.heaveSurgeSway_speed_XVnH = [0.] * 3
      self.body_velocity_XVn = [0.] * 3
      self.geo_accel_NEU = [0.] * 3
      self.course_over_ground = 0.
      self.speed_over_ground = 0.
      self.temp_avg_fog = 0.
      self.temp_avg_acc = 0.
      self.temp_board = 0.
      self.attitude_quaternion = [0.] * 4
      self.attitude_quaternion_stddev = [0.] * 3
      self.raw_accel_XVn = [0.] * 3
      self.body_accel_stddev_XVn = [0.] * 3
      self.body_rotrate_stddev_XVn = [0.] * 3
      self.raw_rot_acc_XVn = [0.] * 3
      self.raw_rot_acc_stddev_XVn = [0.] * 3
      self.raw_rot_rate_XVn = [0.] * 3

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.ds_header.io_time.secs, _x.ds_header.io_time.nsecs))
      _x = self.ds_header.source_uuid
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_16B().pack(*_x))
      else:
        buff.write(_get_struct_16s().pack(_x))
      _x = self
      buff.write(_get_struct_3IdI6f().pack(_x.nav_fields, _x.extended_nav_fields, _x.external_data_fields, _x.nav_validity_time, _x.counter, _x.heading, _x.roll, _x.pitch, _x.heading_stddev, _x.roll_stddev, _x.pitch_stddev))
      buff.write(_get_struct_3f().pack(*self.rt_heave_XVnH))
      _x = self
      buff.write(_get_struct_d4f().pack(_x.smart_heave_validity_time, _x.smart_heave, _x.heading_rate, _x.roll_rate, _x.pitch_rate))
      buff.write(_get_struct_3f().pack(*self.body_rates_XVn))
      buff.write(_get_struct_3f().pack(*self.body_accel_XVn))
      _x = self
      buff.write(_get_struct_2dfB().pack(_x.latitude, _x.longitude, _x.altitude, _x.altitude_reference))
      buff.write(_get_struct_4f().pack(*self.position_cov))
      _x = self.altitude_stddev
      buff.write(_get_struct_f().pack(_x))
      buff.write(_get_struct_3f().pack(*self.velocity_NEU))
      buff.write(_get_struct_3f().pack(*self.velocity_stddev_NEU))
      buff.write(_get_struct_2f().pack(*self.current_NE))
      buff.write(_get_struct_2f().pack(*self.current_stddev_NE))
      _x = self
      buff.write(_get_struct_2BH().pack(_x.day, _x.month, _x.year))
      buff.write(_get_struct_2I().pack(*self.sensor_status))
      buff.write(_get_struct_4I().pack(*self.ins_algo_status))
      buff.write(_get_struct_3I().pack(*self.ins_system_status))
      _x = self
      buff.write(_get_struct_2I().pack(_x.ins_user_status, _x.ahrs_algo_status))
      buff.write(_get_struct_3I().pack(*self.ahrs_system_status))
      _x = self.ahrs_user_status
      buff.write(_get_struct_I().pack(_x))
      buff.write(_get_struct_3f().pack(*self.heaveSurgeSway_speed_XVnH))
      buff.write(_get_struct_3f().pack(*self.body_velocity_XVn))
      buff.write(_get_struct_3f().pack(*self.geo_accel_NEU))
      _x = self
      buff.write(_get_struct_5f().pack(_x.course_over_ground, _x.speed_over_ground, _x.temp_avg_fog, _x.temp_avg_acc, _x.temp_board))
      buff.write(_get_struct_4f().pack(*self.attitude_quaternion))
      buff.write(_get_struct_3f().pack(*self.attitude_quaternion_stddev))
      buff.write(_get_struct_3f().pack(*self.raw_accel_XVn))
      buff.write(_get_struct_3f().pack(*self.body_accel_stddev_XVn))
      buff.write(_get_struct_3f().pack(*self.body_rotrate_stddev_XVn))
      buff.write(_get_struct_3f().pack(*self.raw_rot_acc_XVn))
      buff.write(_get_struct_3f().pack(*self.raw_rot_acc_stddev_XVn))
      buff.write(_get_struct_3f().pack(*self.raw_rot_rate_XVn))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.ds_header is None:
        self.ds_header = ds_core_msgs.msg.DsHeader()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.ds_header.io_time.secs, _x.ds_header.io_time.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 16
      self.ds_header.source_uuid = str[start:end]
      _x = self
      start = end
      end += 48
      (_x.nav_fields, _x.extended_nav_fields, _x.external_data_fields, _x.nav_validity_time, _x.counter, _x.heading, _x.roll, _x.pitch, _x.heading_stddev, _x.roll_stddev, _x.pitch_stddev,) = _get_struct_3IdI6f().unpack(str[start:end])
      start = end
      end += 12
      self.rt_heave_XVnH = _get_struct_3f().unpack(str[start:end])
      _x = self
      start = end
      end += 24
      (_x.smart_heave_validity_time, _x.smart_heave, _x.heading_rate, _x.roll_rate, _x.pitch_rate,) = _get_struct_d4f().unpack(str[start:end])
      start = end
      end += 12
      self.body_rates_XVn = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 12
      self.body_accel_XVn = _get_struct_3f().unpack(str[start:end])
      _x = self
      start = end
      end += 21
      (_x.latitude, _x.longitude, _x.altitude, _x.altitude_reference,) = _get_struct_2dfB().unpack(str[start:end])
      start = end
      end += 16
      self.position_cov = _get_struct_4f().unpack(str[start:end])
      start = end
      end += 4
      (self.altitude_stddev,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 12
      self.velocity_NEU = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 12
      self.velocity_stddev_NEU = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 8
      self.current_NE = _get_struct_2f().unpack(str[start:end])
      start = end
      end += 8
      self.current_stddev_NE = _get_struct_2f().unpack(str[start:end])
      _x = self
      start = end
      end += 4
      (_x.day, _x.month, _x.year,) = _get_struct_2BH().unpack(str[start:end])
      start = end
      end += 8
      self.sensor_status = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 16
      self.ins_algo_status = _get_struct_4I().unpack(str[start:end])
      start = end
      end += 12
      self.ins_system_status = _get_struct_3I().unpack(str[start:end])
      _x = self
      start = end
      end += 8
      (_x.ins_user_status, _x.ahrs_algo_status,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 12
      self.ahrs_system_status = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (self.ahrs_user_status,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 12
      self.heaveSurgeSway_speed_XVnH = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 12
      self.body_velocity_XVn = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 12
      self.geo_accel_NEU = _get_struct_3f().unpack(str[start:end])
      _x = self
      start = end
      end += 20
      (_x.course_over_ground, _x.speed_over_ground, _x.temp_avg_fog, _x.temp_avg_acc, _x.temp_board,) = _get_struct_5f().unpack(str[start:end])
      start = end
      end += 16
      self.attitude_quaternion = _get_struct_4f().unpack(str[start:end])
      start = end
      end += 12
      self.attitude_quaternion_stddev = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 12
      self.raw_accel_XVn = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 12
      self.body_accel_stddev_XVn = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 12
      self.body_rotrate_stddev_XVn = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 12
      self.raw_rot_acc_XVn = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 12
      self.raw_rot_acc_stddev_XVn = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 12
      self.raw_rot_rate_XVn = _get_struct_3f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.ds_header.io_time.secs, _x.ds_header.io_time.nsecs))
      _x = self.ds_header.source_uuid
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_16B().pack(*_x))
      else:
        buff.write(_get_struct_16s().pack(_x))
      _x = self
      buff.write(_get_struct_3IdI6f().pack(_x.nav_fields, _x.extended_nav_fields, _x.external_data_fields, _x.nav_validity_time, _x.counter, _x.heading, _x.roll, _x.pitch, _x.heading_stddev, _x.roll_stddev, _x.pitch_stddev))
      buff.write(self.rt_heave_XVnH.tostring())
      _x = self
      buff.write(_get_struct_d4f().pack(_x.smart_heave_validity_time, _x.smart_heave, _x.heading_rate, _x.roll_rate, _x.pitch_rate))
      buff.write(self.body_rates_XVn.tostring())
      buff.write(self.body_accel_XVn.tostring())
      _x = self
      buff.write(_get_struct_2dfB().pack(_x.latitude, _x.longitude, _x.altitude, _x.altitude_reference))
      buff.write(self.position_cov.tostring())
      _x = self.altitude_stddev
      buff.write(_get_struct_f().pack(_x))
      buff.write(self.velocity_NEU.tostring())
      buff.write(self.velocity_stddev_NEU.tostring())
      buff.write(self.current_NE.tostring())
      buff.write(self.current_stddev_NE.tostring())
      _x = self
      buff.write(_get_struct_2BH().pack(_x.day, _x.month, _x.year))
      buff.write(self.sensor_status.tostring())
      buff.write(self.ins_algo_status.tostring())
      buff.write(self.ins_system_status.tostring())
      _x = self
      buff.write(_get_struct_2I().pack(_x.ins_user_status, _x.ahrs_algo_status))
      buff.write(self.ahrs_system_status.tostring())
      _x = self.ahrs_user_status
      buff.write(_get_struct_I().pack(_x))
      buff.write(self.heaveSurgeSway_speed_XVnH.tostring())
      buff.write(self.body_velocity_XVn.tostring())
      buff.write(self.geo_accel_NEU.tostring())
      _x = self
      buff.write(_get_struct_5f().pack(_x.course_over_ground, _x.speed_over_ground, _x.temp_avg_fog, _x.temp_avg_acc, _x.temp_board))
      buff.write(self.attitude_quaternion.tostring())
      buff.write(self.attitude_quaternion_stddev.tostring())
      buff.write(self.raw_accel_XVn.tostring())
      buff.write(self.body_accel_stddev_XVn.tostring())
      buff.write(self.body_rotrate_stddev_XVn.tostring())
      buff.write(self.raw_rot_acc_XVn.tostring())
      buff.write(self.raw_rot_acc_stddev_XVn.tostring())
      buff.write(self.raw_rot_rate_XVn.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.ds_header is None:
        self.ds_header = ds_core_msgs.msg.DsHeader()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.ds_header.io_time.secs, _x.ds_header.io_time.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 16
      self.ds_header.source_uuid = str[start:end]
      _x = self
      start = end
      end += 48
      (_x.nav_fields, _x.extended_nav_fields, _x.external_data_fields, _x.nav_validity_time, _x.counter, _x.heading, _x.roll, _x.pitch, _x.heading_stddev, _x.roll_stddev, _x.pitch_stddev,) = _get_struct_3IdI6f().unpack(str[start:end])
      start = end
      end += 12
      self.rt_heave_XVnH = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      _x = self
      start = end
      end += 24
      (_x.smart_heave_validity_time, _x.smart_heave, _x.heading_rate, _x.roll_rate, _x.pitch_rate,) = _get_struct_d4f().unpack(str[start:end])
      start = end
      end += 12
      self.body_rates_XVn = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 12
      self.body_accel_XVn = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      _x = self
      start = end
      end += 21
      (_x.latitude, _x.longitude, _x.altitude, _x.altitude_reference,) = _get_struct_2dfB().unpack(str[start:end])
      start = end
      end += 16
      self.position_cov = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=4)
      start = end
      end += 4
      (self.altitude_stddev,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 12
      self.velocity_NEU = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 12
      self.velocity_stddev_NEU = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 8
      self.current_NE = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=2)
      start = end
      end += 8
      self.current_stddev_NE = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=2)
      _x = self
      start = end
      end += 4
      (_x.day, _x.month, _x.year,) = _get_struct_2BH().unpack(str[start:end])
      start = end
      end += 8
      self.sensor_status = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=2)
      start = end
      end += 16
      self.ins_algo_status = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=4)
      start = end
      end += 12
      self.ins_system_status = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=3)
      _x = self
      start = end
      end += 8
      (_x.ins_user_status, _x.ahrs_algo_status,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 12
      self.ahrs_system_status = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=3)
      start = end
      end += 4
      (self.ahrs_user_status,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 12
      self.heaveSurgeSway_speed_XVnH = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 12
      self.body_velocity_XVn = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 12
      self.geo_accel_NEU = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      _x = self
      start = end
      end += 20
      (_x.course_over_ground, _x.speed_over_ground, _x.temp_avg_fog, _x.temp_avg_acc, _x.temp_board,) = _get_struct_5f().unpack(str[start:end])
      start = end
      end += 16
      self.attitude_quaternion = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=4)
      start = end
      end += 12
      self.attitude_quaternion_stddev = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 12
      self.raw_accel_XVn = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 12
      self.body_accel_stddev_XVn = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 12
      self.body_rotrate_stddev_XVn = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 12
      self.raw_rot_acc_XVn = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 12
      self.raw_rot_acc_stddev_XVn = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 12
      self.raw_rot_rate_XVn = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_16B = None
def _get_struct_16B():
    global _struct_16B
    if _struct_16B is None:
        _struct_16B = struct.Struct("<16B")
    return _struct_16B
_struct_16s = None
def _get_struct_16s():
    global _struct_16s
    if _struct_16s is None:
        _struct_16s = struct.Struct("<16s")
    return _struct_16s
_struct_2BH = None
def _get_struct_2BH():
    global _struct_2BH
    if _struct_2BH is None:
        _struct_2BH = struct.Struct("<2BH")
    return _struct_2BH
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_2dfB = None
def _get_struct_2dfB():
    global _struct_2dfB
    if _struct_2dfB is None:
        _struct_2dfB = struct.Struct("<2dfB")
    return _struct_2dfB
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3IdI6f = None
def _get_struct_3IdI6f():
    global _struct_3IdI6f
    if _struct_3IdI6f is None:
        _struct_3IdI6f = struct.Struct("<3IdI6f")
    return _struct_3IdI6f
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_4I = None
def _get_struct_4I():
    global _struct_4I
    if _struct_4I is None:
        _struct_4I = struct.Struct("<4I")
    return _struct_4I
_struct_4f = None
def _get_struct_4f():
    global _struct_4f
    if _struct_4f is None:
        _struct_4f = struct.Struct("<4f")
    return _struct_4f
_struct_5f = None
def _get_struct_5f():
    global _struct_5f
    if _struct_5f is None:
        _struct_5f = struct.Struct("<5f")
    return _struct_5f
_struct_d4f = None
def _get_struct_d4f():
    global _struct_d4f
    if _struct_d4f is None:
        _struct_d4f = struct.Struct("<d4f")
    return _struct_d4f
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
