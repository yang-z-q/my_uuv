# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ds_sensor_msgs/UbloxSignal.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class UbloxSignal(genpy.Message):
  _md5sum = "5f298e93eca6c7972a50754521ac02e7"
  _type = "ds_sensor_msgs/UbloxSignal"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """

# A string identifying which GNSS system is in use (e.g., GPS, BeiDou, GLONASS, etc)
string gnss_id

# The ID of the specific satellite that broadcast the signal.  Includes
# a letter indicating the service.  Example: GPS satellite #4 would be G4.
# IDs:
# G: GPS (US system)
# S: SBAS (Satellite Based Augmentation System, so WAAS, EGNOS, SDCM, GAGAN, etc)
# E: Galileo (European system)
# B: BeiDou (Chinese system)
# Q: QZSS (Japanese SBAS that also transmits GPS-style timing signals)
# R: GLONASS (Russian system)
string sat_id

# Signal ID (each satellite can broadcast multiple signals)
string sig_id

# Carrier-to-noise-density ratio (dBHz)
float32 carrier_noise

# Pseudorange residual, in meters
float32 pseudorange_residual

# Signal quality
uint16 quality_indicator
uint16 QUALITY_NOSIGNAL = 0
uint16 QUALITY_SEARCHING = 1
uint16 QUALITY_ACQUIRED = 2
uint16 QUALITY_UNUSABLE = 3
uint16 QUALITY_CODELOCKED = 4
uint16 QUALITY_CODECARRIERTIME_LOCKED_5 = 5
uint16 QUALITY_CODECARRIERTIME_LOCKED_6 = 6
uint16 QUALITY_CODECARRIERTIME_LOCKED_7 = 7

# Correction Source
uint16 correction_source
uint16 CORRECTIONS_NONE = 0
uint16 CORRECTIONS_SBAS = 1
uint16 CORRECTIONS_BEIDOU = 2
uint16 CORRECTIONS_RTCM2 = 3
uint16 CORRECTIONS_RTCM3OSR = 4
uint16 CORRECTIONS_RTCM3SSR = 5
uint16 CORRECTIONS_QZSSSLAS = 6

# Ionosphere Model Used
uint16 ionosphere_model
uint16 IONOMODEL_NONE = 0
uint16 IONOMODEL_KLOBUCHARGPS = 1
uint16 IONOMODEL_SBAS = 2
uint16 IONOMODEL_KLOBUCHARBEIDOU = 3

# flags
uint16 health
uint16 HEALTH_UNKNOWN = 0
uint16 HEALTH_HEALTHY = 1
uint16 HEALTH_UNHEALTH = 2

bool pseudorange_smoothed
bool pseudorange_used
bool carrier_range_used
bool doppler_used
bool pseudorange_corrections_applied
bool carrier_range_corrections_applied
bool doppler_corrections_applied
"""
  # Pseudo-constants
  QUALITY_NOSIGNAL = 0
  QUALITY_SEARCHING = 1
  QUALITY_ACQUIRED = 2
  QUALITY_UNUSABLE = 3
  QUALITY_CODELOCKED = 4
  QUALITY_CODECARRIERTIME_LOCKED_5 = 5
  QUALITY_CODECARRIERTIME_LOCKED_6 = 6
  QUALITY_CODECARRIERTIME_LOCKED_7 = 7
  CORRECTIONS_NONE = 0
  CORRECTIONS_SBAS = 1
  CORRECTIONS_BEIDOU = 2
  CORRECTIONS_RTCM2 = 3
  CORRECTIONS_RTCM3OSR = 4
  CORRECTIONS_RTCM3SSR = 5
  CORRECTIONS_QZSSSLAS = 6
  IONOMODEL_NONE = 0
  IONOMODEL_KLOBUCHARGPS = 1
  IONOMODEL_SBAS = 2
  IONOMODEL_KLOBUCHARBEIDOU = 3
  HEALTH_UNKNOWN = 0
  HEALTH_HEALTHY = 1
  HEALTH_UNHEALTH = 2

  __slots__ = ['gnss_id','sat_id','sig_id','carrier_noise','pseudorange_residual','quality_indicator','correction_source','ionosphere_model','health','pseudorange_smoothed','pseudorange_used','carrier_range_used','doppler_used','pseudorange_corrections_applied','carrier_range_corrections_applied','doppler_corrections_applied']
  _slot_types = ['string','string','string','float32','float32','uint16','uint16','uint16','uint16','bool','bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       gnss_id,sat_id,sig_id,carrier_noise,pseudorange_residual,quality_indicator,correction_source,ionosphere_model,health,pseudorange_smoothed,pseudorange_used,carrier_range_used,doppler_used,pseudorange_corrections_applied,carrier_range_corrections_applied,doppler_corrections_applied

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(UbloxSignal, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.gnss_id is None:
        self.gnss_id = ''
      if self.sat_id is None:
        self.sat_id = ''
      if self.sig_id is None:
        self.sig_id = ''
      if self.carrier_noise is None:
        self.carrier_noise = 0.
      if self.pseudorange_residual is None:
        self.pseudorange_residual = 0.
      if self.quality_indicator is None:
        self.quality_indicator = 0
      if self.correction_source is None:
        self.correction_source = 0
      if self.ionosphere_model is None:
        self.ionosphere_model = 0
      if self.health is None:
        self.health = 0
      if self.pseudorange_smoothed is None:
        self.pseudorange_smoothed = False
      if self.pseudorange_used is None:
        self.pseudorange_used = False
      if self.carrier_range_used is None:
        self.carrier_range_used = False
      if self.doppler_used is None:
        self.doppler_used = False
      if self.pseudorange_corrections_applied is None:
        self.pseudorange_corrections_applied = False
      if self.carrier_range_corrections_applied is None:
        self.carrier_range_corrections_applied = False
      if self.doppler_corrections_applied is None:
        self.doppler_corrections_applied = False
    else:
      self.gnss_id = ''
      self.sat_id = ''
      self.sig_id = ''
      self.carrier_noise = 0.
      self.pseudorange_residual = 0.
      self.quality_indicator = 0
      self.correction_source = 0
      self.ionosphere_model = 0
      self.health = 0
      self.pseudorange_smoothed = False
      self.pseudorange_used = False
      self.carrier_range_used = False
      self.doppler_used = False
      self.pseudorange_corrections_applied = False
      self.carrier_range_corrections_applied = False
      self.doppler_corrections_applied = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.gnss_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.sat_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.sig_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2f4H7B().pack(_x.carrier_noise, _x.pseudorange_residual, _x.quality_indicator, _x.correction_source, _x.ionosphere_model, _x.health, _x.pseudorange_smoothed, _x.pseudorange_used, _x.carrier_range_used, _x.doppler_used, _x.pseudorange_corrections_applied, _x.carrier_range_corrections_applied, _x.doppler_corrections_applied))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.gnss_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.gnss_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.sat_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.sat_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.sig_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.sig_id = str[start:end]
      _x = self
      start = end
      end += 23
      (_x.carrier_noise, _x.pseudorange_residual, _x.quality_indicator, _x.correction_source, _x.ionosphere_model, _x.health, _x.pseudorange_smoothed, _x.pseudorange_used, _x.carrier_range_used, _x.doppler_used, _x.pseudorange_corrections_applied, _x.carrier_range_corrections_applied, _x.doppler_corrections_applied,) = _get_struct_2f4H7B().unpack(str[start:end])
      self.pseudorange_smoothed = bool(self.pseudorange_smoothed)
      self.pseudorange_used = bool(self.pseudorange_used)
      self.carrier_range_used = bool(self.carrier_range_used)
      self.doppler_used = bool(self.doppler_used)
      self.pseudorange_corrections_applied = bool(self.pseudorange_corrections_applied)
      self.carrier_range_corrections_applied = bool(self.carrier_range_corrections_applied)
      self.doppler_corrections_applied = bool(self.doppler_corrections_applied)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.gnss_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.sat_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.sig_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2f4H7B().pack(_x.carrier_noise, _x.pseudorange_residual, _x.quality_indicator, _x.correction_source, _x.ionosphere_model, _x.health, _x.pseudorange_smoothed, _x.pseudorange_used, _x.carrier_range_used, _x.doppler_used, _x.pseudorange_corrections_applied, _x.carrier_range_corrections_applied, _x.doppler_corrections_applied))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.gnss_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.gnss_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.sat_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.sat_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.sig_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.sig_id = str[start:end]
      _x = self
      start = end
      end += 23
      (_x.carrier_noise, _x.pseudorange_residual, _x.quality_indicator, _x.correction_source, _x.ionosphere_model, _x.health, _x.pseudorange_smoothed, _x.pseudorange_used, _x.carrier_range_used, _x.doppler_used, _x.pseudorange_corrections_applied, _x.carrier_range_corrections_applied, _x.doppler_corrections_applied,) = _get_struct_2f4H7B().unpack(str[start:end])
      self.pseudorange_smoothed = bool(self.pseudorange_smoothed)
      self.pseudorange_used = bool(self.pseudorange_used)
      self.carrier_range_used = bool(self.carrier_range_used)
      self.doppler_used = bool(self.doppler_used)
      self.pseudorange_corrections_applied = bool(self.pseudorange_corrections_applied)
      self.carrier_range_corrections_applied = bool(self.carrier_range_corrections_applied)
      self.doppler_corrections_applied = bool(self.doppler_corrections_applied)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2f4H7B = None
def _get_struct_2f4H7B():
    global _struct_2f4H7B
    if _struct_2f4H7B is None:
        _struct_2f4H7B = struct.Struct("<2f4H7B")
    return _struct_2f4H7B
