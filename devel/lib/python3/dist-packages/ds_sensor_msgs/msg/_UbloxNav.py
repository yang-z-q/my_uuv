# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ds_sensor_msgs/UbloxNav.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ds_core_msgs.msg
import genpy
import std_msgs.msg

class UbloxNav(genpy.Message):
  _md5sum = "381dc34261bb2c25179b956078fe8f3f"
  _type = "ds_sensor_msgs/UbloxNav"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """# The standard 2-part DsHeader block
# This allows both a standard ROS header and DS-specific header blocks
# See HEADERS.md in ds_core_msgs for details
std_msgs/Header header
ds_core_msgs/DsHeader ds_header

# Mostly covered by the PVT messages, but can be overwritten by the high-precision
# Latlon position message if available

# Position
float64 latitude
float64 longitude
float64 height_ellipsoid
float64 height_msl

# Velocity
float32 velocity_north # m/s
float32 velocity_east  # m/s
float32 velocity_down  # m/s

# Accuracy Stats
float32 accuracy_horz # m
float32 accuracy_vert # m
float32 accuracy_time # s
float32 accuracy_vel  # m/s

# Status
uint64 time_of_week # used to aggregate messages
string fixtype

# Relative position stuff
uint16 relpos_station_id
float64 relpos_north # m
float64 relpos_east # m
float64 relpos_down # m
float64 relpos_length # m
float64 relpos_heading # deg

float32 relpos_accuracy_north
float32 relpos_accuracy_east
float32 relpos_accuracy_down
float32 relpos_accuracy_length
float32 relpos_accuracy_heading

uint16 relpos_flags
uint16 RELPOS_FLAGS_GNSSOK = 1 # 0x01
uint16 RELPOS_FLAGS_DIFFSOLN = 2 # 0x02
uint16 RELPOS_FLAGS_RELPOSVALID = 4 #0x04
uint16 RELPOS_FLAGS_CARRSOLN_MASK = 24 #0x18
uint16 RELPOS_FLAGS_ISMOVING = 32 # 0x20
uint16 RELPOS_FLAGS_REFPOSMISS = 64 # 0x40
uint16 RELPOS_FLAGS_REFOBSMISS = 128 # 0x80



================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: ds_core_msgs/DsHeader
# This is half our standard header for ds_msgs; see
# HEADERS.md for details

# This header should ALWAYS be paired with a std_msgs/Header
# and should ALWAYS reference HEADERS.md.  If you're looking at this
# file to add headers to a type, you probably want to copy/paste
# the following block:
#
#     # The standard 2-part DsHeader block
#     # This allows both a standard ROS header and DS-specific header blocks
#     # See HEADERS.md in ds_core_msgs for details
#     std_msgs/Header header
#     ds_core_msgs/DsHeader ds_header
#

# Time data was received or sent out (i/o time)
time io_time

# Sensor source UUID
uint8[16] source_uuid

"""
  # Pseudo-constants
  RELPOS_FLAGS_GNSSOK = 1
  RELPOS_FLAGS_DIFFSOLN = 2
  RELPOS_FLAGS_RELPOSVALID = 4
  RELPOS_FLAGS_CARRSOLN_MASK = 24
  RELPOS_FLAGS_ISMOVING = 32
  RELPOS_FLAGS_REFPOSMISS = 64
  RELPOS_FLAGS_REFOBSMISS = 128

  __slots__ = ['header','ds_header','latitude','longitude','height_ellipsoid','height_msl','velocity_north','velocity_east','velocity_down','accuracy_horz','accuracy_vert','accuracy_time','accuracy_vel','time_of_week','fixtype','relpos_station_id','relpos_north','relpos_east','relpos_down','relpos_length','relpos_heading','relpos_accuracy_north','relpos_accuracy_east','relpos_accuracy_down','relpos_accuracy_length','relpos_accuracy_heading','relpos_flags']
  _slot_types = ['std_msgs/Header','ds_core_msgs/DsHeader','float64','float64','float64','float64','float32','float32','float32','float32','float32','float32','float32','uint64','string','uint16','float64','float64','float64','float64','float64','float32','float32','float32','float32','float32','uint16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,ds_header,latitude,longitude,height_ellipsoid,height_msl,velocity_north,velocity_east,velocity_down,accuracy_horz,accuracy_vert,accuracy_time,accuracy_vel,time_of_week,fixtype,relpos_station_id,relpos_north,relpos_east,relpos_down,relpos_length,relpos_heading,relpos_accuracy_north,relpos_accuracy_east,relpos_accuracy_down,relpos_accuracy_length,relpos_accuracy_heading,relpos_flags

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(UbloxNav, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.ds_header is None:
        self.ds_header = ds_core_msgs.msg.DsHeader()
      if self.latitude is None:
        self.latitude = 0.
      if self.longitude is None:
        self.longitude = 0.
      if self.height_ellipsoid is None:
        self.height_ellipsoid = 0.
      if self.height_msl is None:
        self.height_msl = 0.
      if self.velocity_north is None:
        self.velocity_north = 0.
      if self.velocity_east is None:
        self.velocity_east = 0.
      if self.velocity_down is None:
        self.velocity_down = 0.
      if self.accuracy_horz is None:
        self.accuracy_horz = 0.
      if self.accuracy_vert is None:
        self.accuracy_vert = 0.
      if self.accuracy_time is None:
        self.accuracy_time = 0.
      if self.accuracy_vel is None:
        self.accuracy_vel = 0.
      if self.time_of_week is None:
        self.time_of_week = 0
      if self.fixtype is None:
        self.fixtype = ''
      if self.relpos_station_id is None:
        self.relpos_station_id = 0
      if self.relpos_north is None:
        self.relpos_north = 0.
      if self.relpos_east is None:
        self.relpos_east = 0.
      if self.relpos_down is None:
        self.relpos_down = 0.
      if self.relpos_length is None:
        self.relpos_length = 0.
      if self.relpos_heading is None:
        self.relpos_heading = 0.
      if self.relpos_accuracy_north is None:
        self.relpos_accuracy_north = 0.
      if self.relpos_accuracy_east is None:
        self.relpos_accuracy_east = 0.
      if self.relpos_accuracy_down is None:
        self.relpos_accuracy_down = 0.
      if self.relpos_accuracy_length is None:
        self.relpos_accuracy_length = 0.
      if self.relpos_accuracy_heading is None:
        self.relpos_accuracy_heading = 0.
      if self.relpos_flags is None:
        self.relpos_flags = 0
    else:
      self.header = std_msgs.msg.Header()
      self.ds_header = ds_core_msgs.msg.DsHeader()
      self.latitude = 0.
      self.longitude = 0.
      self.height_ellipsoid = 0.
      self.height_msl = 0.
      self.velocity_north = 0.
      self.velocity_east = 0.
      self.velocity_down = 0.
      self.accuracy_horz = 0.
      self.accuracy_vert = 0.
      self.accuracy_time = 0.
      self.accuracy_vel = 0.
      self.time_of_week = 0
      self.fixtype = ''
      self.relpos_station_id = 0
      self.relpos_north = 0.
      self.relpos_east = 0.
      self.relpos_down = 0.
      self.relpos_length = 0.
      self.relpos_heading = 0.
      self.relpos_accuracy_north = 0.
      self.relpos_accuracy_east = 0.
      self.relpos_accuracy_down = 0.
      self.relpos_accuracy_length = 0.
      self.relpos_accuracy_heading = 0.
      self.relpos_flags = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.ds_header.io_time.secs, _x.ds_header.io_time.nsecs))
      _x = self.ds_header.source_uuid
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_16B().pack(*_x))
      else:
        buff.write(_get_struct_16s().pack(_x))
      _x = self
      buff.write(_get_struct_4d7fQ().pack(_x.latitude, _x.longitude, _x.height_ellipsoid, _x.height_msl, _x.velocity_north, _x.velocity_east, _x.velocity_down, _x.accuracy_horz, _x.accuracy_vert, _x.accuracy_time, _x.accuracy_vel, _x.time_of_week))
      _x = self.fixtype
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_H5d5fH().pack(_x.relpos_station_id, _x.relpos_north, _x.relpos_east, _x.relpos_down, _x.relpos_length, _x.relpos_heading, _x.relpos_accuracy_north, _x.relpos_accuracy_east, _x.relpos_accuracy_down, _x.relpos_accuracy_length, _x.relpos_accuracy_heading, _x.relpos_flags))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.ds_header is None:
        self.ds_header = ds_core_msgs.msg.DsHeader()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.ds_header.io_time.secs, _x.ds_header.io_time.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 16
      self.ds_header.source_uuid = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.latitude, _x.longitude, _x.height_ellipsoid, _x.height_msl, _x.velocity_north, _x.velocity_east, _x.velocity_down, _x.accuracy_horz, _x.accuracy_vert, _x.accuracy_time, _x.accuracy_vel, _x.time_of_week,) = _get_struct_4d7fQ().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.fixtype = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.fixtype = str[start:end]
      _x = self
      start = end
      end += 64
      (_x.relpos_station_id, _x.relpos_north, _x.relpos_east, _x.relpos_down, _x.relpos_length, _x.relpos_heading, _x.relpos_accuracy_north, _x.relpos_accuracy_east, _x.relpos_accuracy_down, _x.relpos_accuracy_length, _x.relpos_accuracy_heading, _x.relpos_flags,) = _get_struct_H5d5fH().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.ds_header.io_time.secs, _x.ds_header.io_time.nsecs))
      _x = self.ds_header.source_uuid
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_16B().pack(*_x))
      else:
        buff.write(_get_struct_16s().pack(_x))
      _x = self
      buff.write(_get_struct_4d7fQ().pack(_x.latitude, _x.longitude, _x.height_ellipsoid, _x.height_msl, _x.velocity_north, _x.velocity_east, _x.velocity_down, _x.accuracy_horz, _x.accuracy_vert, _x.accuracy_time, _x.accuracy_vel, _x.time_of_week))
      _x = self.fixtype
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_H5d5fH().pack(_x.relpos_station_id, _x.relpos_north, _x.relpos_east, _x.relpos_down, _x.relpos_length, _x.relpos_heading, _x.relpos_accuracy_north, _x.relpos_accuracy_east, _x.relpos_accuracy_down, _x.relpos_accuracy_length, _x.relpos_accuracy_heading, _x.relpos_flags))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.ds_header is None:
        self.ds_header = ds_core_msgs.msg.DsHeader()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.ds_header.io_time.secs, _x.ds_header.io_time.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 16
      self.ds_header.source_uuid = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.latitude, _x.longitude, _x.height_ellipsoid, _x.height_msl, _x.velocity_north, _x.velocity_east, _x.velocity_down, _x.accuracy_horz, _x.accuracy_vert, _x.accuracy_time, _x.accuracy_vel, _x.time_of_week,) = _get_struct_4d7fQ().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.fixtype = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.fixtype = str[start:end]
      _x = self
      start = end
      end += 64
      (_x.relpos_station_id, _x.relpos_north, _x.relpos_east, _x.relpos_down, _x.relpos_length, _x.relpos_heading, _x.relpos_accuracy_north, _x.relpos_accuracy_east, _x.relpos_accuracy_down, _x.relpos_accuracy_length, _x.relpos_accuracy_heading, _x.relpos_flags,) = _get_struct_H5d5fH().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_16B = None
def _get_struct_16B():
    global _struct_16B
    if _struct_16B is None:
        _struct_16B = struct.Struct("<16B")
    return _struct_16B
_struct_16s = None
def _get_struct_16s():
    global _struct_16s
    if _struct_16s is None:
        _struct_16s = struct.Struct("<16s")
    return _struct_16s
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_4d7fQ = None
def _get_struct_4d7fQ():
    global _struct_4d7fQ
    if _struct_4d7fQ is None:
        _struct_4d7fQ = struct.Struct("<4d7fQ")
    return _struct_4d7fQ
_struct_H5d5fH = None
def _get_struct_H5d5fH():
    global _struct_H5d5fH
    if _struct_H5d5fH is None:
        _struct_H5d5fH = struct.Struct("<H5d5fH")
    return _struct_H5d5fH
