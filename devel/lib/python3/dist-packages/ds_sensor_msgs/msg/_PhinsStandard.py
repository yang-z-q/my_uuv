# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ds_sensor_msgs/PhinsStandard.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ds_core_msgs.msg
import genpy
import std_msgs.msg

class PhinsStandard(genpy.Message):
  _md5sum = "32de3f33ca7134cd5f6a8542f7811c53"
  _type = "ds_sensor_msgs/PhinsStandard"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """# The standard 2-part DsHeader block
# This allows both a standard ROS header and DS-specific header blocks
# See HEADERS.md in ds_core_msgs for details
std_msgs/Header header
ds_core_msgs/DsHeader ds_header

# Attiutde in DEGREES
float64 heading_deg
float64 pitch_deg
float64 roll_deg

# Position in DEGREES
float64 latitude_deg
float64 longitude_deg

# Altitude in meters
float64 altitude_m

# Speed in meters/second
float64 east_speed_m_s
float64 north_speed_m_s
float64 up_speed_m_s

# UTM zone information
uint8 lat_utm_zone           # This is a char
uint8 lon_utm_zone
float64 utm_east_pos_m
float64 utm_north_pos_m
float64 utm_altitude_m

float64 surge_m
float64 sway_m
float64 heave_m

float64 lat_std_dev_m
float64 lon_std_dev_m
float64 altitude_std_dev_m

float64 east_speed_std_dev_m_s
float64 north_speed_std_dev_m_s
float64 up_speed_std_dev_m_s

float64 time_pos

string algorithm_status_lsb
string algorithm_status_msb

string system_status_lsb
string system_status_msb

string user_status
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: ds_core_msgs/DsHeader
# This is half our standard header for ds_msgs; see
# HEADERS.md for details

# This header should ALWAYS be paired with a std_msgs/Header
# and should ALWAYS reference HEADERS.md.  If you're looking at this
# file to add headers to a type, you probably want to copy/paste
# the following block:
#
#     # The standard 2-part DsHeader block
#     # This allows both a standard ROS header and DS-specific header blocks
#     # See HEADERS.md in ds_core_msgs for details
#     std_msgs/Header header
#     ds_core_msgs/DsHeader ds_header
#

# Time data was received or sent out (i/o time)
time io_time

# Sensor source UUID
uint8[16] source_uuid

"""
  __slots__ = ['header','ds_header','heading_deg','pitch_deg','roll_deg','latitude_deg','longitude_deg','altitude_m','east_speed_m_s','north_speed_m_s','up_speed_m_s','lat_utm_zone','lon_utm_zone','utm_east_pos_m','utm_north_pos_m','utm_altitude_m','surge_m','sway_m','heave_m','lat_std_dev_m','lon_std_dev_m','altitude_std_dev_m','east_speed_std_dev_m_s','north_speed_std_dev_m_s','up_speed_std_dev_m_s','time_pos','algorithm_status_lsb','algorithm_status_msb','system_status_lsb','system_status_msb','user_status']
  _slot_types = ['std_msgs/Header','ds_core_msgs/DsHeader','float64','float64','float64','float64','float64','float64','float64','float64','float64','uint8','uint8','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','string','string','string','string','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,ds_header,heading_deg,pitch_deg,roll_deg,latitude_deg,longitude_deg,altitude_m,east_speed_m_s,north_speed_m_s,up_speed_m_s,lat_utm_zone,lon_utm_zone,utm_east_pos_m,utm_north_pos_m,utm_altitude_m,surge_m,sway_m,heave_m,lat_std_dev_m,lon_std_dev_m,altitude_std_dev_m,east_speed_std_dev_m_s,north_speed_std_dev_m_s,up_speed_std_dev_m_s,time_pos,algorithm_status_lsb,algorithm_status_msb,system_status_lsb,system_status_msb,user_status

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PhinsStandard, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.ds_header is None:
        self.ds_header = ds_core_msgs.msg.DsHeader()
      if self.heading_deg is None:
        self.heading_deg = 0.
      if self.pitch_deg is None:
        self.pitch_deg = 0.
      if self.roll_deg is None:
        self.roll_deg = 0.
      if self.latitude_deg is None:
        self.latitude_deg = 0.
      if self.longitude_deg is None:
        self.longitude_deg = 0.
      if self.altitude_m is None:
        self.altitude_m = 0.
      if self.east_speed_m_s is None:
        self.east_speed_m_s = 0.
      if self.north_speed_m_s is None:
        self.north_speed_m_s = 0.
      if self.up_speed_m_s is None:
        self.up_speed_m_s = 0.
      if self.lat_utm_zone is None:
        self.lat_utm_zone = 0
      if self.lon_utm_zone is None:
        self.lon_utm_zone = 0
      if self.utm_east_pos_m is None:
        self.utm_east_pos_m = 0.
      if self.utm_north_pos_m is None:
        self.utm_north_pos_m = 0.
      if self.utm_altitude_m is None:
        self.utm_altitude_m = 0.
      if self.surge_m is None:
        self.surge_m = 0.
      if self.sway_m is None:
        self.sway_m = 0.
      if self.heave_m is None:
        self.heave_m = 0.
      if self.lat_std_dev_m is None:
        self.lat_std_dev_m = 0.
      if self.lon_std_dev_m is None:
        self.lon_std_dev_m = 0.
      if self.altitude_std_dev_m is None:
        self.altitude_std_dev_m = 0.
      if self.east_speed_std_dev_m_s is None:
        self.east_speed_std_dev_m_s = 0.
      if self.north_speed_std_dev_m_s is None:
        self.north_speed_std_dev_m_s = 0.
      if self.up_speed_std_dev_m_s is None:
        self.up_speed_std_dev_m_s = 0.
      if self.time_pos is None:
        self.time_pos = 0.
      if self.algorithm_status_lsb is None:
        self.algorithm_status_lsb = ''
      if self.algorithm_status_msb is None:
        self.algorithm_status_msb = ''
      if self.system_status_lsb is None:
        self.system_status_lsb = ''
      if self.system_status_msb is None:
        self.system_status_msb = ''
      if self.user_status is None:
        self.user_status = ''
    else:
      self.header = std_msgs.msg.Header()
      self.ds_header = ds_core_msgs.msg.DsHeader()
      self.heading_deg = 0.
      self.pitch_deg = 0.
      self.roll_deg = 0.
      self.latitude_deg = 0.
      self.longitude_deg = 0.
      self.altitude_m = 0.
      self.east_speed_m_s = 0.
      self.north_speed_m_s = 0.
      self.up_speed_m_s = 0.
      self.lat_utm_zone = 0
      self.lon_utm_zone = 0
      self.utm_east_pos_m = 0.
      self.utm_north_pos_m = 0.
      self.utm_altitude_m = 0.
      self.surge_m = 0.
      self.sway_m = 0.
      self.heave_m = 0.
      self.lat_std_dev_m = 0.
      self.lon_std_dev_m = 0.
      self.altitude_std_dev_m = 0.
      self.east_speed_std_dev_m_s = 0.
      self.north_speed_std_dev_m_s = 0.
      self.up_speed_std_dev_m_s = 0.
      self.time_pos = 0.
      self.algorithm_status_lsb = ''
      self.algorithm_status_msb = ''
      self.system_status_lsb = ''
      self.system_status_msb = ''
      self.user_status = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.ds_header.io_time.secs, _x.ds_header.io_time.nsecs))
      _x = self.ds_header.source_uuid
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_16B().pack(*_x))
      else:
        buff.write(_get_struct_16s().pack(_x))
      _x = self
      buff.write(_get_struct_9d2B13d().pack(_x.heading_deg, _x.pitch_deg, _x.roll_deg, _x.latitude_deg, _x.longitude_deg, _x.altitude_m, _x.east_speed_m_s, _x.north_speed_m_s, _x.up_speed_m_s, _x.lat_utm_zone, _x.lon_utm_zone, _x.utm_east_pos_m, _x.utm_north_pos_m, _x.utm_altitude_m, _x.surge_m, _x.sway_m, _x.heave_m, _x.lat_std_dev_m, _x.lon_std_dev_m, _x.altitude_std_dev_m, _x.east_speed_std_dev_m_s, _x.north_speed_std_dev_m_s, _x.up_speed_std_dev_m_s, _x.time_pos))
      _x = self.algorithm_status_lsb
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.algorithm_status_msb
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.system_status_lsb
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.system_status_msb
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.user_status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.ds_header is None:
        self.ds_header = ds_core_msgs.msg.DsHeader()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.ds_header.io_time.secs, _x.ds_header.io_time.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 16
      self.ds_header.source_uuid = str[start:end]
      _x = self
      start = end
      end += 178
      (_x.heading_deg, _x.pitch_deg, _x.roll_deg, _x.latitude_deg, _x.longitude_deg, _x.altitude_m, _x.east_speed_m_s, _x.north_speed_m_s, _x.up_speed_m_s, _x.lat_utm_zone, _x.lon_utm_zone, _x.utm_east_pos_m, _x.utm_north_pos_m, _x.utm_altitude_m, _x.surge_m, _x.sway_m, _x.heave_m, _x.lat_std_dev_m, _x.lon_std_dev_m, _x.altitude_std_dev_m, _x.east_speed_std_dev_m_s, _x.north_speed_std_dev_m_s, _x.up_speed_std_dev_m_s, _x.time_pos,) = _get_struct_9d2B13d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.algorithm_status_lsb = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.algorithm_status_lsb = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.algorithm_status_msb = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.algorithm_status_msb = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.system_status_lsb = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.system_status_lsb = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.system_status_msb = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.system_status_msb = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.user_status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.user_status = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.ds_header.io_time.secs, _x.ds_header.io_time.nsecs))
      _x = self.ds_header.source_uuid
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_16B().pack(*_x))
      else:
        buff.write(_get_struct_16s().pack(_x))
      _x = self
      buff.write(_get_struct_9d2B13d().pack(_x.heading_deg, _x.pitch_deg, _x.roll_deg, _x.latitude_deg, _x.longitude_deg, _x.altitude_m, _x.east_speed_m_s, _x.north_speed_m_s, _x.up_speed_m_s, _x.lat_utm_zone, _x.lon_utm_zone, _x.utm_east_pos_m, _x.utm_north_pos_m, _x.utm_altitude_m, _x.surge_m, _x.sway_m, _x.heave_m, _x.lat_std_dev_m, _x.lon_std_dev_m, _x.altitude_std_dev_m, _x.east_speed_std_dev_m_s, _x.north_speed_std_dev_m_s, _x.up_speed_std_dev_m_s, _x.time_pos))
      _x = self.algorithm_status_lsb
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.algorithm_status_msb
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.system_status_lsb
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.system_status_msb
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.user_status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.ds_header is None:
        self.ds_header = ds_core_msgs.msg.DsHeader()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.ds_header.io_time.secs, _x.ds_header.io_time.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 16
      self.ds_header.source_uuid = str[start:end]
      _x = self
      start = end
      end += 178
      (_x.heading_deg, _x.pitch_deg, _x.roll_deg, _x.latitude_deg, _x.longitude_deg, _x.altitude_m, _x.east_speed_m_s, _x.north_speed_m_s, _x.up_speed_m_s, _x.lat_utm_zone, _x.lon_utm_zone, _x.utm_east_pos_m, _x.utm_north_pos_m, _x.utm_altitude_m, _x.surge_m, _x.sway_m, _x.heave_m, _x.lat_std_dev_m, _x.lon_std_dev_m, _x.altitude_std_dev_m, _x.east_speed_std_dev_m_s, _x.north_speed_std_dev_m_s, _x.up_speed_std_dev_m_s, _x.time_pos,) = _get_struct_9d2B13d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.algorithm_status_lsb = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.algorithm_status_lsb = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.algorithm_status_msb = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.algorithm_status_msb = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.system_status_lsb = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.system_status_lsb = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.system_status_msb = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.system_status_msb = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.user_status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.user_status = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_16B = None
def _get_struct_16B():
    global _struct_16B
    if _struct_16B is None:
        _struct_16B = struct.Struct("<16B")
    return _struct_16B
_struct_16s = None
def _get_struct_16s():
    global _struct_16s
    if _struct_16s is None:
        _struct_16s = struct.Struct("<16s")
    return _struct_16s
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_9d2B13d = None
def _get_struct_9d2B13d():
    global _struct_9d2B13d
    if _struct_9d2B13d is None:
        _struct_9d2B13d = struct.Struct("<9d2B13d")
    return _struct_9d2B13d
