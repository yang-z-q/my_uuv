# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ds_sensor_msgs/Adcp.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ds_core_msgs.msg
import ds_sensor_msgs.msg
import genpy
import geometry_msgs.msg
import std_msgs.msg

class Adcp(genpy.Message):
  _md5sum = "20cf0cc6667acb5c9186d027facfbfc5"
  _type = "ds_sensor_msgs/Adcp"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """#sub message of Dvl.msg for water current profiling funcionality
#	similar to Ranges3D.msg which is only available in bottom-track
#	Adcp.msg will only be available when in water-track mode

# The standard 2-part DsHeader block
# This allows both a standard ROS header and DS-specific header blocks
# See HEADERS.md in ds_core_msgs for details
std_msgs/Header header
ds_core_msgs/DsHeader ds_header

# ENUM: Coordinates system 
uint8 ADCP_COORD_BEAM=0
uint8 ADCP_COORD_INSTRUMENT=1
uint8 ADCP_COORD_SHIP=2
uint8 ADCP_COORD_EARTH=3


# ENUM: ADCP Type

# Standard array with one piston transducer for each beam
# If you have 4-5 individual disks on your DVL, use this one.
# Examples include Sonardyne Syrinx, Nortek DVLs, and RDI Workhorse
uint8 ADCP_TYPE_PISTON=0

# Newfangled phased-array DVL.  If you have one giant disk with complicated stuff on it,
# probably this one.
# Examples include newer RDI DVLs such as pathfinder, pioneer, and tasman.
uint8 ADCP_TYPE_PHASED_ARRAY=1
#####################################################################################################


# Coordinate system mode (see above)
uint8 coordinate_mode

# Type of DVL array employed (see above).  Necessary when
# deciding how to apply sound velocity corrections
uint8 adcp_type

#num bins 
uint8 cells

#length of each depth bin [m]
uint16 cell_depth

#Distance to middle of first depth bin [m]
float32 bin0_distance

# Raw data (unit vectors of each beam that show geometry of each beam relative to instrument)
geometry_msgs/Vector3[4] beam_unit_vec  # Geometry of each of the 4 beams

#Each element of vel_bin_beams array will correspond to a water 'bin' containing ocean current velocity information depending on coordinate system
WaterCurrentProfile[] vel_bin_beams
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: ds_core_msgs/DsHeader
# This is half our standard header for ds_msgs; see
# HEADERS.md for details

# This header should ALWAYS be paired with a std_msgs/Header
# and should ALWAYS reference HEADERS.md.  If you're looking at this
# file to add headers to a type, you probably want to copy/paste
# the following block:
#
#     # The standard 2-part DsHeader block
#     # This allows both a standard ROS header and DS-specific header blocks
#     # See HEADERS.md in ds_core_msgs for details
#     std_msgs/Header header
#     ds_core_msgs/DsHeader ds_header
#

# Time data was received or sent out (i/o time)
time io_time

# Sensor source UUID
uint8[16] source_uuid


================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: ds_sensor_msgs/WaterCurrentProfile
#Message format for Water Current Velocity Information at each depth bin


#if set to beam: the size of this velocity_bin_beam array is 4 (x,y,z velocity in each bin relative to each individual beam)
#if set to instrument,ship, earth: the size of this velocity_bin_beam array is 1 (x,y,z velocity in each bin relative to instrument frame)

geometry_msgs/Vector3[] velocity_bin_beam




#Intensity at each bin IN [dB]
#uint32[] bin_intensity

#Correlation Factor --> [0,255]
#uint16[] bin_correlation"""
  # Pseudo-constants
  ADCP_COORD_BEAM = 0
  ADCP_COORD_INSTRUMENT = 1
  ADCP_COORD_SHIP = 2
  ADCP_COORD_EARTH = 3
  ADCP_TYPE_PISTON = 0
  ADCP_TYPE_PHASED_ARRAY = 1

  __slots__ = ['header','ds_header','coordinate_mode','adcp_type','cells','cell_depth','bin0_distance','beam_unit_vec','vel_bin_beams']
  _slot_types = ['std_msgs/Header','ds_core_msgs/DsHeader','uint8','uint8','uint8','uint16','float32','geometry_msgs/Vector3[4]','ds_sensor_msgs/WaterCurrentProfile[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,ds_header,coordinate_mode,adcp_type,cells,cell_depth,bin0_distance,beam_unit_vec,vel_bin_beams

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Adcp, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.ds_header is None:
        self.ds_header = ds_core_msgs.msg.DsHeader()
      if self.coordinate_mode is None:
        self.coordinate_mode = 0
      if self.adcp_type is None:
        self.adcp_type = 0
      if self.cells is None:
        self.cells = 0
      if self.cell_depth is None:
        self.cell_depth = 0
      if self.bin0_distance is None:
        self.bin0_distance = 0.
      if self.beam_unit_vec is None:
        self.beam_unit_vec = [geometry_msgs.msg.Vector3() for _ in range(4)]
      if self.vel_bin_beams is None:
        self.vel_bin_beams = []
    else:
      self.header = std_msgs.msg.Header()
      self.ds_header = ds_core_msgs.msg.DsHeader()
      self.coordinate_mode = 0
      self.adcp_type = 0
      self.cells = 0
      self.cell_depth = 0
      self.bin0_distance = 0.
      self.beam_unit_vec = [geometry_msgs.msg.Vector3() for _ in range(4)]
      self.vel_bin_beams = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.ds_header.io_time.secs, _x.ds_header.io_time.nsecs))
      _x = self.ds_header.source_uuid
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_16B().pack(*_x))
      else:
        buff.write(_get_struct_16s().pack(_x))
      _x = self
      buff.write(_get_struct_3BHf().pack(_x.coordinate_mode, _x.adcp_type, _x.cells, _x.cell_depth, _x.bin0_distance))
      if len(self.beam_unit_vec) != 4:
        self._check_types(ValueError("Expecting %s items but found %s when writing '%s'" % (4, len(self.beam_unit_vec), 'self.beam_unit_vec')))
      for val1 in self.beam_unit_vec:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.vel_bin_beams)
      buff.write(_struct_I.pack(length))
      for val1 in self.vel_bin_beams:
        length = len(val1.velocity_bin_beam)
        buff.write(_struct_I.pack(length))
        for val2 in val1.velocity_bin_beam:
          _x = val2
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.ds_header is None:
        self.ds_header = ds_core_msgs.msg.DsHeader()
      if self.beam_unit_vec is None:
        self.beam_unit_vec = None
      if self.vel_bin_beams is None:
        self.vel_bin_beams = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.ds_header.io_time.secs, _x.ds_header.io_time.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 16
      self.ds_header.source_uuid = str[start:end]
      _x = self
      start = end
      end += 9
      (_x.coordinate_mode, _x.adcp_type, _x.cells, _x.cell_depth, _x.bin0_distance,) = _get_struct_3BHf().unpack(str[start:end])
      self.beam_unit_vec = []
      for i in range(0, 4):
        val1 = geometry_msgs.msg.Vector3()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.beam_unit_vec.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.vel_bin_beams = []
      for i in range(0, length):
        val1 = ds_sensor_msgs.msg.WaterCurrentProfile()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.velocity_bin_beam = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Vector3()
          _x = val2
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          val1.velocity_bin_beam.append(val2)
        self.vel_bin_beams.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.ds_header.io_time.secs, _x.ds_header.io_time.nsecs))
      _x = self.ds_header.source_uuid
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_16B().pack(*_x))
      else:
        buff.write(_get_struct_16s().pack(_x))
      _x = self
      buff.write(_get_struct_3BHf().pack(_x.coordinate_mode, _x.adcp_type, _x.cells, _x.cell_depth, _x.bin0_distance))
      if len(self.beam_unit_vec) != 4:
        self._check_types(ValueError("Expecting %s items but found %s when writing '%s'" % (4, len(self.beam_unit_vec), 'self.beam_unit_vec')))
      for val1 in self.beam_unit_vec:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.vel_bin_beams)
      buff.write(_struct_I.pack(length))
      for val1 in self.vel_bin_beams:
        length = len(val1.velocity_bin_beam)
        buff.write(_struct_I.pack(length))
        for val2 in val1.velocity_bin_beam:
          _x = val2
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.ds_header is None:
        self.ds_header = ds_core_msgs.msg.DsHeader()
      if self.beam_unit_vec is None:
        self.beam_unit_vec = None
      if self.vel_bin_beams is None:
        self.vel_bin_beams = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.ds_header.io_time.secs, _x.ds_header.io_time.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 16
      self.ds_header.source_uuid = str[start:end]
      _x = self
      start = end
      end += 9
      (_x.coordinate_mode, _x.adcp_type, _x.cells, _x.cell_depth, _x.bin0_distance,) = _get_struct_3BHf().unpack(str[start:end])
      self.beam_unit_vec = []
      for i in range(0, 4):
        val1 = geometry_msgs.msg.Vector3()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.beam_unit_vec.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.vel_bin_beams = []
      for i in range(0, length):
        val1 = ds_sensor_msgs.msg.WaterCurrentProfile()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.velocity_bin_beam = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Vector3()
          _x = val2
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          val1.velocity_bin_beam.append(val2)
        self.vel_bin_beams.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_16B = None
def _get_struct_16B():
    global _struct_16B
    if _struct_16B is None:
        _struct_16B = struct.Struct("<16B")
    return _struct_16B
_struct_16s = None
def _get_struct_16s():
    global _struct_16s
    if _struct_16s is None:
        _struct_16s = struct.Struct("<16s")
    return _struct_16s
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_3BHf = None
def _get_struct_3BHf():
    global _struct_3BHf
    if _struct_3BHf is None:
        _struct_3BHf = struct.Struct("<3BHf")
    return _struct_3BHf
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
