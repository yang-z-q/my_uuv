# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ds_multibeam_msgs/NorbitMB.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ds_core_msgs.msg
import genpy
import std_msgs.msg

class NorbitMB(genpy.Message):
  _md5sum = "aa32edb229e7b346065fdf3bad9e08de"
  _type = "ds_multibeam_msgs/NorbitMB"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """# The standard 2-part DsHeader block
# This allows both a standard ROS header and DS-specific header blocks
# See HEADERS.md in ds_core_msgs for details
std_msgs/Header header
ds_core_msgs/DsHeader ds_header

# Per Ping Info
float32 snd_velocity
float32 sample_rate
uint32 num_beams
uint32 ping_num
uint8 percent_good
uint16 max_depth
uint16 min_depth
uint16 center_depth
uint16 max_range
uint16 min_range
uint16 center_range
float64 ping_time
float64 time_net
float32 ping_rate
uint16 bathy_datatype
uint16[8] beam_dist_mode
uint8 sonar_mode
float32 tx_angle
float32 gain
float32 tx_freq
float32 tx_bw
float32 tx_len
float32 tx_voltage
float32 swath_dir
float32 swath_open
float32 gate_tilt

# Per Beam Information
uint32[] sample_num
float32[] beam_distance
float32[] angle
uint16[] upper_gate
uint16[] lower_gate
float32[] intensity
uint16[] flags
uint16[] quality_flag
uint16[] quality_val


================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: ds_core_msgs/DsHeader
# This is half our standard header for ds_msgs; see
# HEADERS.md for details

# This header should ALWAYS be paired with a std_msgs/Header
# and should ALWAYS reference HEADERS.md.  If you're looking at this
# file to add headers to a type, you probably want to copy/paste
# the following block:
#
#     # The standard 2-part DsHeader block
#     # This allows both a standard ROS header and DS-specific header blocks
#     # See HEADERS.md in ds_core_msgs for details
#     std_msgs/Header header
#     ds_core_msgs/DsHeader ds_header
#

# Time data was received or sent out (i/o time)
time io_time

# Sensor source UUID
uint8[16] source_uuid

"""
  __slots__ = ['header','ds_header','snd_velocity','sample_rate','num_beams','ping_num','percent_good','max_depth','min_depth','center_depth','max_range','min_range','center_range','ping_time','time_net','ping_rate','bathy_datatype','beam_dist_mode','sonar_mode','tx_angle','gain','tx_freq','tx_bw','tx_len','tx_voltage','swath_dir','swath_open','gate_tilt','sample_num','beam_distance','angle','upper_gate','lower_gate','intensity','flags','quality_flag','quality_val']
  _slot_types = ['std_msgs/Header','ds_core_msgs/DsHeader','float32','float32','uint32','uint32','uint8','uint16','uint16','uint16','uint16','uint16','uint16','float64','float64','float32','uint16','uint16[8]','uint8','float32','float32','float32','float32','float32','float32','float32','float32','float32','uint32[]','float32[]','float32[]','uint16[]','uint16[]','float32[]','uint16[]','uint16[]','uint16[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,ds_header,snd_velocity,sample_rate,num_beams,ping_num,percent_good,max_depth,min_depth,center_depth,max_range,min_range,center_range,ping_time,time_net,ping_rate,bathy_datatype,beam_dist_mode,sonar_mode,tx_angle,gain,tx_freq,tx_bw,tx_len,tx_voltage,swath_dir,swath_open,gate_tilt,sample_num,beam_distance,angle,upper_gate,lower_gate,intensity,flags,quality_flag,quality_val

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(NorbitMB, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.ds_header is None:
        self.ds_header = ds_core_msgs.msg.DsHeader()
      if self.snd_velocity is None:
        self.snd_velocity = 0.
      if self.sample_rate is None:
        self.sample_rate = 0.
      if self.num_beams is None:
        self.num_beams = 0
      if self.ping_num is None:
        self.ping_num = 0
      if self.percent_good is None:
        self.percent_good = 0
      if self.max_depth is None:
        self.max_depth = 0
      if self.min_depth is None:
        self.min_depth = 0
      if self.center_depth is None:
        self.center_depth = 0
      if self.max_range is None:
        self.max_range = 0
      if self.min_range is None:
        self.min_range = 0
      if self.center_range is None:
        self.center_range = 0
      if self.ping_time is None:
        self.ping_time = 0.
      if self.time_net is None:
        self.time_net = 0.
      if self.ping_rate is None:
        self.ping_rate = 0.
      if self.bathy_datatype is None:
        self.bathy_datatype = 0
      if self.beam_dist_mode is None:
        self.beam_dist_mode = [0] * 8
      if self.sonar_mode is None:
        self.sonar_mode = 0
      if self.tx_angle is None:
        self.tx_angle = 0.
      if self.gain is None:
        self.gain = 0.
      if self.tx_freq is None:
        self.tx_freq = 0.
      if self.tx_bw is None:
        self.tx_bw = 0.
      if self.tx_len is None:
        self.tx_len = 0.
      if self.tx_voltage is None:
        self.tx_voltage = 0.
      if self.swath_dir is None:
        self.swath_dir = 0.
      if self.swath_open is None:
        self.swath_open = 0.
      if self.gate_tilt is None:
        self.gate_tilt = 0.
      if self.sample_num is None:
        self.sample_num = []
      if self.beam_distance is None:
        self.beam_distance = []
      if self.angle is None:
        self.angle = []
      if self.upper_gate is None:
        self.upper_gate = []
      if self.lower_gate is None:
        self.lower_gate = []
      if self.intensity is None:
        self.intensity = []
      if self.flags is None:
        self.flags = []
      if self.quality_flag is None:
        self.quality_flag = []
      if self.quality_val is None:
        self.quality_val = []
    else:
      self.header = std_msgs.msg.Header()
      self.ds_header = ds_core_msgs.msg.DsHeader()
      self.snd_velocity = 0.
      self.sample_rate = 0.
      self.num_beams = 0
      self.ping_num = 0
      self.percent_good = 0
      self.max_depth = 0
      self.min_depth = 0
      self.center_depth = 0
      self.max_range = 0
      self.min_range = 0
      self.center_range = 0
      self.ping_time = 0.
      self.time_net = 0.
      self.ping_rate = 0.
      self.bathy_datatype = 0
      self.beam_dist_mode = [0] * 8
      self.sonar_mode = 0
      self.tx_angle = 0.
      self.gain = 0.
      self.tx_freq = 0.
      self.tx_bw = 0.
      self.tx_len = 0.
      self.tx_voltage = 0.
      self.swath_dir = 0.
      self.swath_open = 0.
      self.gate_tilt = 0.
      self.sample_num = []
      self.beam_distance = []
      self.angle = []
      self.upper_gate = []
      self.lower_gate = []
      self.intensity = []
      self.flags = []
      self.quality_flag = []
      self.quality_val = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.ds_header.io_time.secs, _x.ds_header.io_time.nsecs))
      _x = self.ds_header.source_uuid
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_16B().pack(*_x))
      else:
        buff.write(_get_struct_16s().pack(_x))
      _x = self
      buff.write(_get_struct_2f2IB6H2dfH().pack(_x.snd_velocity, _x.sample_rate, _x.num_beams, _x.ping_num, _x.percent_good, _x.max_depth, _x.min_depth, _x.center_depth, _x.max_range, _x.min_range, _x.center_range, _x.ping_time, _x.time_net, _x.ping_rate, _x.bathy_datatype))
      buff.write(_get_struct_8H().pack(*self.beam_dist_mode))
      _x = self
      buff.write(_get_struct_B9f().pack(_x.sonar_mode, _x.tx_angle, _x.gain, _x.tx_freq, _x.tx_bw, _x.tx_len, _x.tx_voltage, _x.swath_dir, _x.swath_open, _x.gate_tilt))
      length = len(self.sample_num)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.sample_num))
      length = len(self.beam_distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.beam_distance))
      length = len(self.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.angle))
      length = len(self.upper_gate)
      buff.write(_struct_I.pack(length))
      pattern = '<%sH'%length
      buff.write(struct.Struct(pattern).pack(*self.upper_gate))
      length = len(self.lower_gate)
      buff.write(_struct_I.pack(length))
      pattern = '<%sH'%length
      buff.write(struct.Struct(pattern).pack(*self.lower_gate))
      length = len(self.intensity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.intensity))
      length = len(self.flags)
      buff.write(_struct_I.pack(length))
      pattern = '<%sH'%length
      buff.write(struct.Struct(pattern).pack(*self.flags))
      length = len(self.quality_flag)
      buff.write(_struct_I.pack(length))
      pattern = '<%sH'%length
      buff.write(struct.Struct(pattern).pack(*self.quality_flag))
      length = len(self.quality_val)
      buff.write(_struct_I.pack(length))
      pattern = '<%sH'%length
      buff.write(struct.Struct(pattern).pack(*self.quality_val))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.ds_header is None:
        self.ds_header = ds_core_msgs.msg.DsHeader()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.ds_header.io_time.secs, _x.ds_header.io_time.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 16
      self.ds_header.source_uuid = str[start:end]
      _x = self
      start = end
      end += 51
      (_x.snd_velocity, _x.sample_rate, _x.num_beams, _x.ping_num, _x.percent_good, _x.max_depth, _x.min_depth, _x.center_depth, _x.max_range, _x.min_range, _x.center_range, _x.ping_time, _x.time_net, _x.ping_rate, _x.bathy_datatype,) = _get_struct_2f2IB6H2dfH().unpack(str[start:end])
      start = end
      end += 16
      self.beam_dist_mode = _get_struct_8H().unpack(str[start:end])
      _x = self
      start = end
      end += 37
      (_x.sonar_mode, _x.tx_angle, _x.gain, _x.tx_freq, _x.tx_bw, _x.tx_len, _x.tx_voltage, _x.swath_dir, _x.swath_open, _x.gate_tilt,) = _get_struct_B9f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.sample_num = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.beam_distance = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.angle = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sH'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.upper_gate = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sH'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.lower_gate = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.intensity = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sH'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.flags = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sH'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.quality_flag = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sH'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.quality_val = s.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.ds_header.io_time.secs, _x.ds_header.io_time.nsecs))
      _x = self.ds_header.source_uuid
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_16B().pack(*_x))
      else:
        buff.write(_get_struct_16s().pack(_x))
      _x = self
      buff.write(_get_struct_2f2IB6H2dfH().pack(_x.snd_velocity, _x.sample_rate, _x.num_beams, _x.ping_num, _x.percent_good, _x.max_depth, _x.min_depth, _x.center_depth, _x.max_range, _x.min_range, _x.center_range, _x.ping_time, _x.time_net, _x.ping_rate, _x.bathy_datatype))
      buff.write(self.beam_dist_mode.tostring())
      _x = self
      buff.write(_get_struct_B9f().pack(_x.sonar_mode, _x.tx_angle, _x.gain, _x.tx_freq, _x.tx_bw, _x.tx_len, _x.tx_voltage, _x.swath_dir, _x.swath_open, _x.gate_tilt))
      length = len(self.sample_num)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.sample_num.tostring())
      length = len(self.beam_distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.beam_distance.tostring())
      length = len(self.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.angle.tostring())
      length = len(self.upper_gate)
      buff.write(_struct_I.pack(length))
      pattern = '<%sH'%length
      buff.write(self.upper_gate.tostring())
      length = len(self.lower_gate)
      buff.write(_struct_I.pack(length))
      pattern = '<%sH'%length
      buff.write(self.lower_gate.tostring())
      length = len(self.intensity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.intensity.tostring())
      length = len(self.flags)
      buff.write(_struct_I.pack(length))
      pattern = '<%sH'%length
      buff.write(self.flags.tostring())
      length = len(self.quality_flag)
      buff.write(_struct_I.pack(length))
      pattern = '<%sH'%length
      buff.write(self.quality_flag.tostring())
      length = len(self.quality_val)
      buff.write(_struct_I.pack(length))
      pattern = '<%sH'%length
      buff.write(self.quality_val.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.ds_header is None:
        self.ds_header = ds_core_msgs.msg.DsHeader()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.ds_header.io_time.secs, _x.ds_header.io_time.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 16
      self.ds_header.source_uuid = str[start:end]
      _x = self
      start = end
      end += 51
      (_x.snd_velocity, _x.sample_rate, _x.num_beams, _x.ping_num, _x.percent_good, _x.max_depth, _x.min_depth, _x.center_depth, _x.max_range, _x.min_range, _x.center_range, _x.ping_time, _x.time_net, _x.ping_rate, _x.bathy_datatype,) = _get_struct_2f2IB6H2dfH().unpack(str[start:end])
      start = end
      end += 16
      self.beam_dist_mode = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=8)
      _x = self
      start = end
      end += 37
      (_x.sonar_mode, _x.tx_angle, _x.gain, _x.tx_freq, _x.tx_bw, _x.tx_len, _x.tx_voltage, _x.swath_dir, _x.swath_open, _x.gate_tilt,) = _get_struct_B9f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.sample_num = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.beam_distance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.angle = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sH'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.upper_gate = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sH'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.lower_gate = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.intensity = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sH'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.flags = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sH'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.quality_flag = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sH'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.quality_val = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_16B = None
def _get_struct_16B():
    global _struct_16B
    if _struct_16B is None:
        _struct_16B = struct.Struct("<16B")
    return _struct_16B
_struct_16s = None
def _get_struct_16s():
    global _struct_16s
    if _struct_16s is None:
        _struct_16s = struct.Struct("<16s")
    return _struct_16s
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_2f2IB6H2dfH = None
def _get_struct_2f2IB6H2dfH():
    global _struct_2f2IB6H2dfH
    if _struct_2f2IB6H2dfH is None:
        _struct_2f2IB6H2dfH = struct.Struct("<2f2IB6H2dfH")
    return _struct_2f2IB6H2dfH
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_8H = None
def _get_struct_8H():
    global _struct_8H
    if _struct_8H is None:
        _struct_8H = struct.Struct("<8H")
    return _struct_8H
_struct_B9f = None
def _get_struct_B9f():
    global _struct_B9f
    if _struct_B9f is None:
        _struct_B9f = struct.Struct("<B9f")
    return _struct_B9f
