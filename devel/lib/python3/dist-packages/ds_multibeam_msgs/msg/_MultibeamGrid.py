# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ds_multibeam_msgs/MultibeamGrid.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class MultibeamGrid(genpy.Message):
  _md5sum = "4465e52f2084cd282cf9e8b7367dfa65"
  _type = "ds_multibeam_msgs/MultibeamGrid"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """# Just use a simple standard header
std_msgs/Header header

# To ease processing, we need to specify our bounds
float64 northing_max
float64 northing_min

float64 easting_max
float64 easting_min

# + depth is down, so bigger numbers are lower
float64 depth_max
float64 depth_min

# We also need the dimensions of the final map
int32 cells_easting
int32 cells_northing

# and a Holiday (No data) value
float32 nodata_value

# Float32 only has 6-7 digits.  This is only a problem
# when doing millimeter-precision mapping at 1000+m depth,
# but that's a thing that sometimes happens.  We define
# offset fields that let users specify an overall offset.
float64 depth_offset

# Finally, the actual map data as a row-major array
# Note that size(depth_data) == cells_easting * cells_northing
float32[] depth_data

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','northing_max','northing_min','easting_max','easting_min','depth_max','depth_min','cells_easting','cells_northing','nodata_value','depth_offset','depth_data']
  _slot_types = ['std_msgs/Header','float64','float64','float64','float64','float64','float64','int32','int32','float32','float64','float32[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,northing_max,northing_min,easting_max,easting_min,depth_max,depth_min,cells_easting,cells_northing,nodata_value,depth_offset,depth_data

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MultibeamGrid, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.northing_max is None:
        self.northing_max = 0.
      if self.northing_min is None:
        self.northing_min = 0.
      if self.easting_max is None:
        self.easting_max = 0.
      if self.easting_min is None:
        self.easting_min = 0.
      if self.depth_max is None:
        self.depth_max = 0.
      if self.depth_min is None:
        self.depth_min = 0.
      if self.cells_easting is None:
        self.cells_easting = 0
      if self.cells_northing is None:
        self.cells_northing = 0
      if self.nodata_value is None:
        self.nodata_value = 0.
      if self.depth_offset is None:
        self.depth_offset = 0.
      if self.depth_data is None:
        self.depth_data = []
    else:
      self.header = std_msgs.msg.Header()
      self.northing_max = 0.
      self.northing_min = 0.
      self.easting_max = 0.
      self.easting_min = 0.
      self.depth_max = 0.
      self.depth_min = 0.
      self.cells_easting = 0
      self.cells_northing = 0
      self.nodata_value = 0.
      self.depth_offset = 0.
      self.depth_data = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_6d2ifd().pack(_x.northing_max, _x.northing_min, _x.easting_max, _x.easting_min, _x.depth_max, _x.depth_min, _x.cells_easting, _x.cells_northing, _x.nodata_value, _x.depth_offset))
      length = len(self.depth_data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.depth_data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.northing_max, _x.northing_min, _x.easting_max, _x.easting_min, _x.depth_max, _x.depth_min, _x.cells_easting, _x.cells_northing, _x.nodata_value, _x.depth_offset,) = _get_struct_6d2ifd().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.depth_data = s.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_6d2ifd().pack(_x.northing_max, _x.northing_min, _x.easting_max, _x.easting_min, _x.depth_max, _x.depth_min, _x.cells_easting, _x.cells_northing, _x.nodata_value, _x.depth_offset))
      length = len(self.depth_data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.depth_data.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.northing_max, _x.northing_min, _x.easting_max, _x.easting_min, _x.depth_max, _x.depth_min, _x.cells_easting, _x.cells_northing, _x.nodata_value, _x.depth_offset,) = _get_struct_6d2ifd().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.depth_data = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_6d2ifd = None
def _get_struct_6d2ifd():
    global _struct_6d2ifd
    if _struct_6d2ifd is None:
        _struct_6d2ifd = struct.Struct("<6d2ifd")
    return _struct_6d2ifd
