# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ds_multibeam_msgs/MultibeamFilterStats.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class MultibeamFilterStats(genpy.Message):
  _md5sum = "6ec87b28dbe780d7bc9822273b67a219"
  _type = "ds_multibeam_msgs/MultibeamFilterStats"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Overall total / accepted
uint64 soundings
uint64 accepted

# Reason points were not accepted, by criterion
uint64 preflagged
uint64 range_condition
uint64 altitude_condition
uint64 depth_condition
uint64 backup_condition"""
  __slots__ = ['soundings','accepted','preflagged','range_condition','altitude_condition','depth_condition','backup_condition']
  _slot_types = ['uint64','uint64','uint64','uint64','uint64','uint64','uint64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       soundings,accepted,preflagged,range_condition,altitude_condition,depth_condition,backup_condition

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MultibeamFilterStats, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.soundings is None:
        self.soundings = 0
      if self.accepted is None:
        self.accepted = 0
      if self.preflagged is None:
        self.preflagged = 0
      if self.range_condition is None:
        self.range_condition = 0
      if self.altitude_condition is None:
        self.altitude_condition = 0
      if self.depth_condition is None:
        self.depth_condition = 0
      if self.backup_condition is None:
        self.backup_condition = 0
    else:
      self.soundings = 0
      self.accepted = 0
      self.preflagged = 0
      self.range_condition = 0
      self.altitude_condition = 0
      self.depth_condition = 0
      self.backup_condition = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_7Q().pack(_x.soundings, _x.accepted, _x.preflagged, _x.range_condition, _x.altitude_condition, _x.depth_condition, _x.backup_condition))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 56
      (_x.soundings, _x.accepted, _x.preflagged, _x.range_condition, _x.altitude_condition, _x.depth_condition, _x.backup_condition,) = _get_struct_7Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_7Q().pack(_x.soundings, _x.accepted, _x.preflagged, _x.range_condition, _x.altitude_condition, _x.depth_condition, _x.backup_condition))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 56
      (_x.soundings, _x.accepted, _x.preflagged, _x.range_condition, _x.altitude_condition, _x.depth_condition, _x.backup_condition,) = _get_struct_7Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7Q = None
def _get_struct_7Q():
    global _struct_7Q
    if _struct_7Q is None:
        _struct_7Q = struct.Struct("<7Q")
    return _struct_7Q
