# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ds_multibeam_msgs/MultibeamGridStats.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class MultibeamGridStats(genpy.Message):
  _md5sum = "e52348903229cd516a72d60f15c1e17b"
  _type = "ds_multibeam_msgs/MultibeamGridStats"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Total soundings
uint64 soundings_total

# Added to grid
uint64 soundings_accepted

# Soundings rejected because they were flagged
uint64 soundings_flagged

# Soundings dropped by the gridder
uint64 soundings_dropped

# Grid dimensions
float32 cell_size

# Grid dimensions in cells
uint32 width
uint32 height

# Grid cells filled in
uint64 grid_cells_used
uint64 grid_cells_total

# Grid memory usage stats
float32 grid_memory_mb
float32 grid_memory_limit_mb

# Grid location
float64 grid_origin_easting
float64 grid_origin_northing
"""
  __slots__ = ['soundings_total','soundings_accepted','soundings_flagged','soundings_dropped','cell_size','width','height','grid_cells_used','grid_cells_total','grid_memory_mb','grid_memory_limit_mb','grid_origin_easting','grid_origin_northing']
  _slot_types = ['uint64','uint64','uint64','uint64','float32','uint32','uint32','uint64','uint64','float32','float32','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       soundings_total,soundings_accepted,soundings_flagged,soundings_dropped,cell_size,width,height,grid_cells_used,grid_cells_total,grid_memory_mb,grid_memory_limit_mb,grid_origin_easting,grid_origin_northing

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MultibeamGridStats, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.soundings_total is None:
        self.soundings_total = 0
      if self.soundings_accepted is None:
        self.soundings_accepted = 0
      if self.soundings_flagged is None:
        self.soundings_flagged = 0
      if self.soundings_dropped is None:
        self.soundings_dropped = 0
      if self.cell_size is None:
        self.cell_size = 0.
      if self.width is None:
        self.width = 0
      if self.height is None:
        self.height = 0
      if self.grid_cells_used is None:
        self.grid_cells_used = 0
      if self.grid_cells_total is None:
        self.grid_cells_total = 0
      if self.grid_memory_mb is None:
        self.grid_memory_mb = 0.
      if self.grid_memory_limit_mb is None:
        self.grid_memory_limit_mb = 0.
      if self.grid_origin_easting is None:
        self.grid_origin_easting = 0.
      if self.grid_origin_northing is None:
        self.grid_origin_northing = 0.
    else:
      self.soundings_total = 0
      self.soundings_accepted = 0
      self.soundings_flagged = 0
      self.soundings_dropped = 0
      self.cell_size = 0.
      self.width = 0
      self.height = 0
      self.grid_cells_used = 0
      self.grid_cells_total = 0
      self.grid_memory_mb = 0.
      self.grid_memory_limit_mb = 0.
      self.grid_origin_easting = 0.
      self.grid_origin_northing = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4Qf2I2Q2f2d().pack(_x.soundings_total, _x.soundings_accepted, _x.soundings_flagged, _x.soundings_dropped, _x.cell_size, _x.width, _x.height, _x.grid_cells_used, _x.grid_cells_total, _x.grid_memory_mb, _x.grid_memory_limit_mb, _x.grid_origin_easting, _x.grid_origin_northing))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 84
      (_x.soundings_total, _x.soundings_accepted, _x.soundings_flagged, _x.soundings_dropped, _x.cell_size, _x.width, _x.height, _x.grid_cells_used, _x.grid_cells_total, _x.grid_memory_mb, _x.grid_memory_limit_mb, _x.grid_origin_easting, _x.grid_origin_northing,) = _get_struct_4Qf2I2Q2f2d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4Qf2I2Q2f2d().pack(_x.soundings_total, _x.soundings_accepted, _x.soundings_flagged, _x.soundings_dropped, _x.cell_size, _x.width, _x.height, _x.grid_cells_used, _x.grid_cells_total, _x.grid_memory_mb, _x.grid_memory_limit_mb, _x.grid_origin_easting, _x.grid_origin_northing))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 84
      (_x.soundings_total, _x.soundings_accepted, _x.soundings_flagged, _x.soundings_dropped, _x.cell_size, _x.width, _x.height, _x.grid_cells_used, _x.grid_cells_total, _x.grid_memory_mb, _x.grid_memory_limit_mb, _x.grid_origin_easting, _x.grid_origin_northing,) = _get_struct_4Qf2I2Q2f2d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4Qf2I2Q2f2d = None
def _get_struct_4Qf2I2Q2f2d():
    global _struct_4Qf2I2Q2f2d
    if _struct_4Qf2I2Q2f2d is None:
        _struct_4Qf2I2Q2f2d = struct.Struct("<4Qf2I2Q2f2d")
    return _struct_4Qf2I2Q2f2d
