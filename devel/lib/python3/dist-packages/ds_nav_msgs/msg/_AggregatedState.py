# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ds_nav_msgs/AggregatedState.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ds_core_msgs.msg
import ds_nav_msgs.msg
import genpy
import std_msgs.msg

class AggregatedState(genpy.Message):
  _md5sum = "c4c1d3330df2d1410f75b9342dd03428"
  _type = "ds_nav_msgs/AggregatedState"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """# The standard 2-part DsHeader block
# This allows both a standard ROS header and DS-specific header blocks
# See HEADERS.md in ds_core_msgs for details
std_msgs/Header header
ds_core_msgs/DsHeader ds_header

# Position
FlaggedDouble northing
FlaggedDouble easting
FlaggedDouble down
FlaggedDouble roll
FlaggedDouble pitch
FlaggedDouble heading

# Rates
FlaggedDouble surge_u
FlaggedDouble sway_v
FlaggedDouble heave_w
FlaggedDouble p
FlaggedDouble q
FlaggedDouble r

# Accelerations
FlaggedDouble du_dt
FlaggedDouble dv_dt
FlaggedDouble dw_dt
FlaggedDouble dp_dt
FlaggedDouble dq_dt
FlaggedDouble dr_dt

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: ds_core_msgs/DsHeader
# This is half our standard header for ds_msgs; see
# HEADERS.md for details

# This header should ALWAYS be paired with a std_msgs/Header
# and should ALWAYS reference HEADERS.md.  If you're looking at this
# file to add headers to a type, you probably want to copy/paste
# the following block:
#
#     # The standard 2-part DsHeader block
#     # This allows both a standard ROS header and DS-specific header blocks
#     # See HEADERS.md in ds_core_msgs for details
#     std_msgs/Header header
#     ds_core_msgs/DsHeader ds_header
#

# Time data was received or sent out (i/o time)
time io_time

# Sensor source UUID
uint8[16] source_uuid


================================================================================
MSG: ds_nav_msgs/FlaggedDouble
# This enum states whether or not a particular DOF value is valid
uint8 VALUE_INVALID=0
uint8 VALUE_VALID=1

float64 value
uint8   valid"""
  __slots__ = ['header','ds_header','northing','easting','down','roll','pitch','heading','surge_u','sway_v','heave_w','p','q','r','du_dt','dv_dt','dw_dt','dp_dt','dq_dt','dr_dt']
  _slot_types = ['std_msgs/Header','ds_core_msgs/DsHeader','ds_nav_msgs/FlaggedDouble','ds_nav_msgs/FlaggedDouble','ds_nav_msgs/FlaggedDouble','ds_nav_msgs/FlaggedDouble','ds_nav_msgs/FlaggedDouble','ds_nav_msgs/FlaggedDouble','ds_nav_msgs/FlaggedDouble','ds_nav_msgs/FlaggedDouble','ds_nav_msgs/FlaggedDouble','ds_nav_msgs/FlaggedDouble','ds_nav_msgs/FlaggedDouble','ds_nav_msgs/FlaggedDouble','ds_nav_msgs/FlaggedDouble','ds_nav_msgs/FlaggedDouble','ds_nav_msgs/FlaggedDouble','ds_nav_msgs/FlaggedDouble','ds_nav_msgs/FlaggedDouble','ds_nav_msgs/FlaggedDouble']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,ds_header,northing,easting,down,roll,pitch,heading,surge_u,sway_v,heave_w,p,q,r,du_dt,dv_dt,dw_dt,dp_dt,dq_dt,dr_dt

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(AggregatedState, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.ds_header is None:
        self.ds_header = ds_core_msgs.msg.DsHeader()
      if self.northing is None:
        self.northing = ds_nav_msgs.msg.FlaggedDouble()
      if self.easting is None:
        self.easting = ds_nav_msgs.msg.FlaggedDouble()
      if self.down is None:
        self.down = ds_nav_msgs.msg.FlaggedDouble()
      if self.roll is None:
        self.roll = ds_nav_msgs.msg.FlaggedDouble()
      if self.pitch is None:
        self.pitch = ds_nav_msgs.msg.FlaggedDouble()
      if self.heading is None:
        self.heading = ds_nav_msgs.msg.FlaggedDouble()
      if self.surge_u is None:
        self.surge_u = ds_nav_msgs.msg.FlaggedDouble()
      if self.sway_v is None:
        self.sway_v = ds_nav_msgs.msg.FlaggedDouble()
      if self.heave_w is None:
        self.heave_w = ds_nav_msgs.msg.FlaggedDouble()
      if self.p is None:
        self.p = ds_nav_msgs.msg.FlaggedDouble()
      if self.q is None:
        self.q = ds_nav_msgs.msg.FlaggedDouble()
      if self.r is None:
        self.r = ds_nav_msgs.msg.FlaggedDouble()
      if self.du_dt is None:
        self.du_dt = ds_nav_msgs.msg.FlaggedDouble()
      if self.dv_dt is None:
        self.dv_dt = ds_nav_msgs.msg.FlaggedDouble()
      if self.dw_dt is None:
        self.dw_dt = ds_nav_msgs.msg.FlaggedDouble()
      if self.dp_dt is None:
        self.dp_dt = ds_nav_msgs.msg.FlaggedDouble()
      if self.dq_dt is None:
        self.dq_dt = ds_nav_msgs.msg.FlaggedDouble()
      if self.dr_dt is None:
        self.dr_dt = ds_nav_msgs.msg.FlaggedDouble()
    else:
      self.header = std_msgs.msg.Header()
      self.ds_header = ds_core_msgs.msg.DsHeader()
      self.northing = ds_nav_msgs.msg.FlaggedDouble()
      self.easting = ds_nav_msgs.msg.FlaggedDouble()
      self.down = ds_nav_msgs.msg.FlaggedDouble()
      self.roll = ds_nav_msgs.msg.FlaggedDouble()
      self.pitch = ds_nav_msgs.msg.FlaggedDouble()
      self.heading = ds_nav_msgs.msg.FlaggedDouble()
      self.surge_u = ds_nav_msgs.msg.FlaggedDouble()
      self.sway_v = ds_nav_msgs.msg.FlaggedDouble()
      self.heave_w = ds_nav_msgs.msg.FlaggedDouble()
      self.p = ds_nav_msgs.msg.FlaggedDouble()
      self.q = ds_nav_msgs.msg.FlaggedDouble()
      self.r = ds_nav_msgs.msg.FlaggedDouble()
      self.du_dt = ds_nav_msgs.msg.FlaggedDouble()
      self.dv_dt = ds_nav_msgs.msg.FlaggedDouble()
      self.dw_dt = ds_nav_msgs.msg.FlaggedDouble()
      self.dp_dt = ds_nav_msgs.msg.FlaggedDouble()
      self.dq_dt = ds_nav_msgs.msg.FlaggedDouble()
      self.dr_dt = ds_nav_msgs.msg.FlaggedDouble()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.ds_header.io_time.secs, _x.ds_header.io_time.nsecs))
      _x = self.ds_header.source_uuid
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_16B().pack(*_x))
      else:
        buff.write(_get_struct_16s().pack(_x))
      _x = self
      buff.write(_get_struct_dBdBdBdBdBdBdBdBdBdBdBdBdBdBdBdBdBdB().pack(_x.northing.value, _x.northing.valid, _x.easting.value, _x.easting.valid, _x.down.value, _x.down.valid, _x.roll.value, _x.roll.valid, _x.pitch.value, _x.pitch.valid, _x.heading.value, _x.heading.valid, _x.surge_u.value, _x.surge_u.valid, _x.sway_v.value, _x.sway_v.valid, _x.heave_w.value, _x.heave_w.valid, _x.p.value, _x.p.valid, _x.q.value, _x.q.valid, _x.r.value, _x.r.valid, _x.du_dt.value, _x.du_dt.valid, _x.dv_dt.value, _x.dv_dt.valid, _x.dw_dt.value, _x.dw_dt.valid, _x.dp_dt.value, _x.dp_dt.valid, _x.dq_dt.value, _x.dq_dt.valid, _x.dr_dt.value, _x.dr_dt.valid))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.ds_header is None:
        self.ds_header = ds_core_msgs.msg.DsHeader()
      if self.northing is None:
        self.northing = ds_nav_msgs.msg.FlaggedDouble()
      if self.easting is None:
        self.easting = ds_nav_msgs.msg.FlaggedDouble()
      if self.down is None:
        self.down = ds_nav_msgs.msg.FlaggedDouble()
      if self.roll is None:
        self.roll = ds_nav_msgs.msg.FlaggedDouble()
      if self.pitch is None:
        self.pitch = ds_nav_msgs.msg.FlaggedDouble()
      if self.heading is None:
        self.heading = ds_nav_msgs.msg.FlaggedDouble()
      if self.surge_u is None:
        self.surge_u = ds_nav_msgs.msg.FlaggedDouble()
      if self.sway_v is None:
        self.sway_v = ds_nav_msgs.msg.FlaggedDouble()
      if self.heave_w is None:
        self.heave_w = ds_nav_msgs.msg.FlaggedDouble()
      if self.p is None:
        self.p = ds_nav_msgs.msg.FlaggedDouble()
      if self.q is None:
        self.q = ds_nav_msgs.msg.FlaggedDouble()
      if self.r is None:
        self.r = ds_nav_msgs.msg.FlaggedDouble()
      if self.du_dt is None:
        self.du_dt = ds_nav_msgs.msg.FlaggedDouble()
      if self.dv_dt is None:
        self.dv_dt = ds_nav_msgs.msg.FlaggedDouble()
      if self.dw_dt is None:
        self.dw_dt = ds_nav_msgs.msg.FlaggedDouble()
      if self.dp_dt is None:
        self.dp_dt = ds_nav_msgs.msg.FlaggedDouble()
      if self.dq_dt is None:
        self.dq_dt = ds_nav_msgs.msg.FlaggedDouble()
      if self.dr_dt is None:
        self.dr_dt = ds_nav_msgs.msg.FlaggedDouble()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.ds_header.io_time.secs, _x.ds_header.io_time.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 16
      self.ds_header.source_uuid = str[start:end]
      _x = self
      start = end
      end += 162
      (_x.northing.value, _x.northing.valid, _x.easting.value, _x.easting.valid, _x.down.value, _x.down.valid, _x.roll.value, _x.roll.valid, _x.pitch.value, _x.pitch.valid, _x.heading.value, _x.heading.valid, _x.surge_u.value, _x.surge_u.valid, _x.sway_v.value, _x.sway_v.valid, _x.heave_w.value, _x.heave_w.valid, _x.p.value, _x.p.valid, _x.q.value, _x.q.valid, _x.r.value, _x.r.valid, _x.du_dt.value, _x.du_dt.valid, _x.dv_dt.value, _x.dv_dt.valid, _x.dw_dt.value, _x.dw_dt.valid, _x.dp_dt.value, _x.dp_dt.valid, _x.dq_dt.value, _x.dq_dt.valid, _x.dr_dt.value, _x.dr_dt.valid,) = _get_struct_dBdBdBdBdBdBdBdBdBdBdBdBdBdBdBdBdBdB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.ds_header.io_time.secs, _x.ds_header.io_time.nsecs))
      _x = self.ds_header.source_uuid
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_16B().pack(*_x))
      else:
        buff.write(_get_struct_16s().pack(_x))
      _x = self
      buff.write(_get_struct_dBdBdBdBdBdBdBdBdBdBdBdBdBdBdBdBdBdB().pack(_x.northing.value, _x.northing.valid, _x.easting.value, _x.easting.valid, _x.down.value, _x.down.valid, _x.roll.value, _x.roll.valid, _x.pitch.value, _x.pitch.valid, _x.heading.value, _x.heading.valid, _x.surge_u.value, _x.surge_u.valid, _x.sway_v.value, _x.sway_v.valid, _x.heave_w.value, _x.heave_w.valid, _x.p.value, _x.p.valid, _x.q.value, _x.q.valid, _x.r.value, _x.r.valid, _x.du_dt.value, _x.du_dt.valid, _x.dv_dt.value, _x.dv_dt.valid, _x.dw_dt.value, _x.dw_dt.valid, _x.dp_dt.value, _x.dp_dt.valid, _x.dq_dt.value, _x.dq_dt.valid, _x.dr_dt.value, _x.dr_dt.valid))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.ds_header is None:
        self.ds_header = ds_core_msgs.msg.DsHeader()
      if self.northing is None:
        self.northing = ds_nav_msgs.msg.FlaggedDouble()
      if self.easting is None:
        self.easting = ds_nav_msgs.msg.FlaggedDouble()
      if self.down is None:
        self.down = ds_nav_msgs.msg.FlaggedDouble()
      if self.roll is None:
        self.roll = ds_nav_msgs.msg.FlaggedDouble()
      if self.pitch is None:
        self.pitch = ds_nav_msgs.msg.FlaggedDouble()
      if self.heading is None:
        self.heading = ds_nav_msgs.msg.FlaggedDouble()
      if self.surge_u is None:
        self.surge_u = ds_nav_msgs.msg.FlaggedDouble()
      if self.sway_v is None:
        self.sway_v = ds_nav_msgs.msg.FlaggedDouble()
      if self.heave_w is None:
        self.heave_w = ds_nav_msgs.msg.FlaggedDouble()
      if self.p is None:
        self.p = ds_nav_msgs.msg.FlaggedDouble()
      if self.q is None:
        self.q = ds_nav_msgs.msg.FlaggedDouble()
      if self.r is None:
        self.r = ds_nav_msgs.msg.FlaggedDouble()
      if self.du_dt is None:
        self.du_dt = ds_nav_msgs.msg.FlaggedDouble()
      if self.dv_dt is None:
        self.dv_dt = ds_nav_msgs.msg.FlaggedDouble()
      if self.dw_dt is None:
        self.dw_dt = ds_nav_msgs.msg.FlaggedDouble()
      if self.dp_dt is None:
        self.dp_dt = ds_nav_msgs.msg.FlaggedDouble()
      if self.dq_dt is None:
        self.dq_dt = ds_nav_msgs.msg.FlaggedDouble()
      if self.dr_dt is None:
        self.dr_dt = ds_nav_msgs.msg.FlaggedDouble()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.ds_header.io_time.secs, _x.ds_header.io_time.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 16
      self.ds_header.source_uuid = str[start:end]
      _x = self
      start = end
      end += 162
      (_x.northing.value, _x.northing.valid, _x.easting.value, _x.easting.valid, _x.down.value, _x.down.valid, _x.roll.value, _x.roll.valid, _x.pitch.value, _x.pitch.valid, _x.heading.value, _x.heading.valid, _x.surge_u.value, _x.surge_u.valid, _x.sway_v.value, _x.sway_v.valid, _x.heave_w.value, _x.heave_w.valid, _x.p.value, _x.p.valid, _x.q.value, _x.q.valid, _x.r.value, _x.r.valid, _x.du_dt.value, _x.du_dt.valid, _x.dv_dt.value, _x.dv_dt.valid, _x.dw_dt.value, _x.dw_dt.valid, _x.dp_dt.value, _x.dp_dt.valid, _x.dq_dt.value, _x.dq_dt.valid, _x.dr_dt.value, _x.dr_dt.valid,) = _get_struct_dBdBdBdBdBdBdBdBdBdBdBdBdBdBdBdBdBdB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_16B = None
def _get_struct_16B():
    global _struct_16B
    if _struct_16B is None:
        _struct_16B = struct.Struct("<16B")
    return _struct_16B
_struct_16s = None
def _get_struct_16s():
    global _struct_16s
    if _struct_16s is None:
        _struct_16s = struct.Struct("<16s")
    return _struct_16s
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_dBdBdBdBdBdBdBdBdBdBdBdBdBdBdBdBdBdB = None
def _get_struct_dBdBdBdBdBdBdBdBdBdBdBdBdBdBdBdBdBdB():
    global _struct_dBdBdBdBdBdBdBdBdBdBdBdBdBdBdBdBdBdB
    if _struct_dBdBdBdBdBdBdBdBdBdBdBdBdBdBdBdBdBdB is None:
        _struct_dBdBdBdBdBdBdBdBdBdBdBdBdBdBdBdBdBdB = struct.Struct("<dBdBdBdBdBdBdBdBdBdBdBdBdBdBdBdBdBdB")
    return _struct_dBdBdBdBdBdBdBdBdBdBdBdBdBdBdBdBdBdB
