// Generated by gencpp from file marine_acoustic_msgs/PingInfo.msg
// DO NOT EDIT!


#ifndef MARINE_ACOUSTIC_MSGS_MESSAGE_PINGINFO_H
#define MARINE_ACOUSTIC_MSGS_MESSAGE_PINGINFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace marine_acoustic_msgs
{
template <class ContainerAllocator>
struct PingInfo_
{
  typedef PingInfo_<ContainerAllocator> Type;

  PingInfo_()
    : frequency(0.0)
    , sound_speed(0.0)
    , tx_beamwidths()
    , rx_beamwidths()  {
    }
  PingInfo_(const ContainerAllocator& _alloc)
    : frequency(0.0)
    , sound_speed(0.0)
    , tx_beamwidths(_alloc)
    , rx_beamwidths(_alloc)  {
  (void)_alloc;
    }



   typedef float _frequency_type;
  _frequency_type frequency;

   typedef float _sound_speed_type;
  _sound_speed_type sound_speed;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _tx_beamwidths_type;
  _tx_beamwidths_type tx_beamwidths;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _rx_beamwidths_type;
  _rx_beamwidths_type rx_beamwidths;





  typedef boost::shared_ptr< ::marine_acoustic_msgs::PingInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::marine_acoustic_msgs::PingInfo_<ContainerAllocator> const> ConstPtr;

}; // struct PingInfo_

typedef ::marine_acoustic_msgs::PingInfo_<std::allocator<void> > PingInfo;

typedef boost::shared_ptr< ::marine_acoustic_msgs::PingInfo > PingInfoPtr;
typedef boost::shared_ptr< ::marine_acoustic_msgs::PingInfo const> PingInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::marine_acoustic_msgs::PingInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::marine_acoustic_msgs::PingInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::marine_acoustic_msgs::PingInfo_<ContainerAllocator1> & lhs, const ::marine_acoustic_msgs::PingInfo_<ContainerAllocator2> & rhs)
{
  return lhs.frequency == rhs.frequency &&
    lhs.sound_speed == rhs.sound_speed &&
    lhs.tx_beamwidths == rhs.tx_beamwidths &&
    lhs.rx_beamwidths == rhs.rx_beamwidths;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::marine_acoustic_msgs::PingInfo_<ContainerAllocator1> & lhs, const ::marine_acoustic_msgs::PingInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace marine_acoustic_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::marine_acoustic_msgs::PingInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::marine_acoustic_msgs::PingInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::marine_acoustic_msgs::PingInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::marine_acoustic_msgs::PingInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::marine_acoustic_msgs::PingInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::marine_acoustic_msgs::PingInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::marine_acoustic_msgs::PingInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a0641c363452e8f5b02c57db588deecc";
  }

  static const char* value(const ::marine_acoustic_msgs::PingInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa0641c363452e8f5ULL;
  static const uint64_t static_value2 = 0xb02c57db588deeccULL;
};

template<class ContainerAllocator>
struct DataType< ::marine_acoustic_msgs::PingInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "marine_acoustic_msgs/PingInfo";
  }

  static const char* value(const ::marine_acoustic_msgs::PingInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::marine_acoustic_msgs::PingInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Center frequency of sonar in Hz\n"
"# Set to 0 if unavailable\n"
"float32 frequency\n"
"\n"
"# Speed of sound (m/s) used to calculate ranges;\n"
"# Set to 0 if unavailable\n"
"float32 sound_speed\n"
"\n"
"# Sonar reported -3db beamwidths\n"
"# May be empty if not reported\n"
"# reported in radians\n"
"float32[] tx_beamwidths\n"
"float32[] rx_beamwidths\n"
;
  }

  static const char* value(const ::marine_acoustic_msgs::PingInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::marine_acoustic_msgs::PingInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.frequency);
      stream.next(m.sound_speed);
      stream.next(m.tx_beamwidths);
      stream.next(m.rx_beamwidths);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PingInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::marine_acoustic_msgs::PingInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::marine_acoustic_msgs::PingInfo_<ContainerAllocator>& v)
  {
    s << indent << "frequency: ";
    Printer<float>::stream(s, indent + "  ", v.frequency);
    s << indent << "sound_speed: ";
    Printer<float>::stream(s, indent + "  ", v.sound_speed);
    s << indent << "tx_beamwidths[]" << std::endl;
    for (size_t i = 0; i < v.tx_beamwidths.size(); ++i)
    {
      s << indent << "  tx_beamwidths[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.tx_beamwidths[i]);
    }
    s << indent << "rx_beamwidths[]" << std::endl;
    for (size_t i = 0; i < v.rx_beamwidths.size(); ++i)
    {
      s << indent << "  rx_beamwidths[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.rx_beamwidths[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MARINE_ACOUSTIC_MSGS_MESSAGE_PINGINFO_H
