// Generated by gencpp from file marine_acoustic_msgs/RawSonarImage.msg
// DO NOT EDIT!


#ifndef MARINE_ACOUSTIC_MSGS_MESSAGE_RAWSONARIMAGE_H
#define MARINE_ACOUSTIC_MSGS_MESSAGE_RAWSONARIMAGE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <marine_acoustic_msgs/PingInfo.h>
#include <marine_acoustic_msgs/SonarImageData.h>

namespace marine_acoustic_msgs
{
template <class ContainerAllocator>
struct RawSonarImage_
{
  typedef RawSonarImage_<ContainerAllocator> Type;

  RawSonarImage_()
    : header()
    , ping_info()
    , sample_rate(0.0)
    , samples_per_beam(0)
    , sample0(0)
    , tx_delays()
    , tx_angles()
    , rx_angles()
    , image()  {
    }
  RawSonarImage_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , ping_info(_alloc)
    , sample_rate(0.0)
    , samples_per_beam(0)
    , sample0(0)
    , tx_delays(_alloc)
    , tx_angles(_alloc)
    , rx_angles(_alloc)
    , image(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::marine_acoustic_msgs::PingInfo_<ContainerAllocator>  _ping_info_type;
  _ping_info_type ping_info;

   typedef float _sample_rate_type;
  _sample_rate_type sample_rate;

   typedef uint32_t _samples_per_beam_type;
  _samples_per_beam_type samples_per_beam;

   typedef uint32_t _sample0_type;
  _sample0_type sample0;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _tx_delays_type;
  _tx_delays_type tx_delays;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _tx_angles_type;
  _tx_angles_type tx_angles;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _rx_angles_type;
  _rx_angles_type rx_angles;

   typedef  ::marine_acoustic_msgs::SonarImageData_<ContainerAllocator>  _image_type;
  _image_type image;





  typedef boost::shared_ptr< ::marine_acoustic_msgs::RawSonarImage_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::marine_acoustic_msgs::RawSonarImage_<ContainerAllocator> const> ConstPtr;

}; // struct RawSonarImage_

typedef ::marine_acoustic_msgs::RawSonarImage_<std::allocator<void> > RawSonarImage;

typedef boost::shared_ptr< ::marine_acoustic_msgs::RawSonarImage > RawSonarImagePtr;
typedef boost::shared_ptr< ::marine_acoustic_msgs::RawSonarImage const> RawSonarImageConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::marine_acoustic_msgs::RawSonarImage_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::marine_acoustic_msgs::RawSonarImage_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::marine_acoustic_msgs::RawSonarImage_<ContainerAllocator1> & lhs, const ::marine_acoustic_msgs::RawSonarImage_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.ping_info == rhs.ping_info &&
    lhs.sample_rate == rhs.sample_rate &&
    lhs.samples_per_beam == rhs.samples_per_beam &&
    lhs.sample0 == rhs.sample0 &&
    lhs.tx_delays == rhs.tx_delays &&
    lhs.tx_angles == rhs.tx_angles &&
    lhs.rx_angles == rhs.rx_angles &&
    lhs.image == rhs.image;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::marine_acoustic_msgs::RawSonarImage_<ContainerAllocator1> & lhs, const ::marine_acoustic_msgs::RawSonarImage_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace marine_acoustic_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::marine_acoustic_msgs::RawSonarImage_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::marine_acoustic_msgs::RawSonarImage_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::marine_acoustic_msgs::RawSonarImage_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::marine_acoustic_msgs::RawSonarImage_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::marine_acoustic_msgs::RawSonarImage_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::marine_acoustic_msgs::RawSonarImage_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::marine_acoustic_msgs::RawSonarImage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "84d7210aa67320a9262e0908f3e466c5";
  }

  static const char* value(const ::marine_acoustic_msgs::RawSonarImage_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x84d7210aa67320a9ULL;
  static const uint64_t static_value2 = 0x262e0908f3e466c5ULL;
};

template<class ContainerAllocator>
struct DataType< ::marine_acoustic_msgs::RawSonarImage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "marine_acoustic_msgs/RawSonarImage";
  }

  static const char* value(const ::marine_acoustic_msgs::RawSonarImage_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::marine_acoustic_msgs::RawSonarImage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"# The header time should be the time the ping was transmitted, not\n"
"# the time the message was received.\n"
"# Note that these two could potentially be several seconds apart,\n"
"# especially in deep water.\n"
"std_msgs/Header header\n"
"\n"
"PingInfo ping_info\n"
"\n"
"float32 sample_rate   # hz\n"
"\n"
"uint32  samples_per_beam  # the number of samples in each beam\n"
"\n"
"# Many sonars have some kind of upper gate for water column data\n"
"# this represents the sample number of the first non empty sample\n"
"# for beam n\n"
"uint32 sample0\n"
"\n"
"# Multi-sector multibeams can transmit different sectors at different times\n"
"# The Reson doesn't but we include a TX delay for each beam anyway.\n"
"#\n"
"# Overall, therefore, our overall time is:\n"
"#\n"
"# header.stamp: TX cycle starts\n"
"# Each beam's TX time: header.stamp + transmit_delay[i]\n"
"# Each beam's RX time: header.stamp + transmit_delay[i] + sample_rate*image_row\n"
"float32[] tx_delays\n"
"# Steering angle applied to tx beam\n"
"# reported in radians\n"
"float32[] tx_angles\n"
"\n"
"# Steering angle applied to rx beam\n"
"# reported in radians\n"
"float32[] rx_angles\n"
"\n"
"SonarImageData image\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: marine_acoustic_msgs/PingInfo\n"
"# Center frequency of sonar in Hz\n"
"# Set to 0 if unavailable\n"
"float32 frequency\n"
"\n"
"# Speed of sound (m/s) used to calculate ranges;\n"
"# Set to 0 if unavailable\n"
"float32 sound_speed\n"
"\n"
"# Sonar reported -3db beamwidths\n"
"# May be empty if not reported\n"
"# reported in radians\n"
"float32[] tx_beamwidths\n"
"float32[] rx_beamwidths\n"
"\n"
"================================================================================\n"
"MSG: marine_acoustic_msgs/SonarImageData\n"
"bool    is_bigendian\n"
"\n"
"uint32  DTYPE_UINT8 = 0\n"
"uint32  DTYPE_INT8 = 1\n"
"uint32  DTYPE_UINT16 = 2\n"
"uint32  DTYPE_INT16 = 3\n"
"uint32  DTYPE_UINT32 = 4\n"
"uint32  DTYPE_INT32 = 5\n"
"uint32  DTYPE_UINT64 = 6\n"
"uint32  DTYPE_INT64 = 7\n"
"uint32  DTYPE_FLOAT32 = 8\n"
"uint32  DTYPE_FLOAT64 = 9\n"
"\n"
"uint32  dtype\n"
"\n"
"# the number of beams associated with the image\n"
"uint32 beam_count\n"
"\n"
"# The actually pixel data in row-major (beam_index major) format\n"
"uint8[] data\n"
;
  }

  static const char* value(const ::marine_acoustic_msgs::RawSonarImage_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::marine_acoustic_msgs::RawSonarImage_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.ping_info);
      stream.next(m.sample_rate);
      stream.next(m.samples_per_beam);
      stream.next(m.sample0);
      stream.next(m.tx_delays);
      stream.next(m.tx_angles);
      stream.next(m.rx_angles);
      stream.next(m.image);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RawSonarImage_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::marine_acoustic_msgs::RawSonarImage_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::marine_acoustic_msgs::RawSonarImage_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "ping_info: ";
    s << std::endl;
    Printer< ::marine_acoustic_msgs::PingInfo_<ContainerAllocator> >::stream(s, indent + "  ", v.ping_info);
    s << indent << "sample_rate: ";
    Printer<float>::stream(s, indent + "  ", v.sample_rate);
    s << indent << "samples_per_beam: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.samples_per_beam);
    s << indent << "sample0: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.sample0);
    s << indent << "tx_delays[]" << std::endl;
    for (size_t i = 0; i < v.tx_delays.size(); ++i)
    {
      s << indent << "  tx_delays[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.tx_delays[i]);
    }
    s << indent << "tx_angles[]" << std::endl;
    for (size_t i = 0; i < v.tx_angles.size(); ++i)
    {
      s << indent << "  tx_angles[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.tx_angles[i]);
    }
    s << indent << "rx_angles[]" << std::endl;
    for (size_t i = 0; i < v.rx_angles.size(); ++i)
    {
      s << indent << "  rx_angles[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.rx_angles[i]);
    }
    s << indent << "image: ";
    s << std::endl;
    Printer< ::marine_acoustic_msgs::SonarImageData_<ContainerAllocator> >::stream(s, indent + "  ", v.image);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MARINE_ACOUSTIC_MSGS_MESSAGE_RAWSONARIMAGE_H
