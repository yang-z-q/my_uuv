// Generated by gencpp from file marine_acoustic_msgs/SonarRanges.msg
// DO NOT EDIT!


#ifndef MARINE_ACOUSTIC_MSGS_MESSAGE_SONARRANGES_H
#define MARINE_ACOUSTIC_MSGS_MESSAGE_SONARRANGES_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <marine_acoustic_msgs/PingInfo.h>
#include <marine_acoustic_msgs/DetectionFlag.h>
#include <geometry_msgs/Vector3.h>

namespace marine_acoustic_msgs
{
template <class ContainerAllocator>
struct SonarRanges_
{
  typedef SonarRanges_<ContainerAllocator> Type;

  SonarRanges_()
    : header()
    , ping_info()
    , flags()
    , transmit_delays()
    , intensities()
    , beam_unit_vec()
    , ranges()  {
    }
  SonarRanges_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , ping_info(_alloc)
    , flags(_alloc)
    , transmit_delays(_alloc)
    , intensities(_alloc)
    , beam_unit_vec(_alloc)
    , ranges(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::marine_acoustic_msgs::PingInfo_<ContainerAllocator>  _ping_info_type;
  _ping_info_type ping_info;

   typedef std::vector< ::marine_acoustic_msgs::DetectionFlag_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::marine_acoustic_msgs::DetectionFlag_<ContainerAllocator> >> _flags_type;
  _flags_type flags;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _transmit_delays_type;
  _transmit_delays_type transmit_delays;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _intensities_type;
  _intensities_type intensities;

   typedef std::vector< ::geometry_msgs::Vector3_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Vector3_<ContainerAllocator> >> _beam_unit_vec_type;
  _beam_unit_vec_type beam_unit_vec;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _ranges_type;
  _ranges_type ranges;





  typedef boost::shared_ptr< ::marine_acoustic_msgs::SonarRanges_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::marine_acoustic_msgs::SonarRanges_<ContainerAllocator> const> ConstPtr;

}; // struct SonarRanges_

typedef ::marine_acoustic_msgs::SonarRanges_<std::allocator<void> > SonarRanges;

typedef boost::shared_ptr< ::marine_acoustic_msgs::SonarRanges > SonarRangesPtr;
typedef boost::shared_ptr< ::marine_acoustic_msgs::SonarRanges const> SonarRangesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::marine_acoustic_msgs::SonarRanges_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::marine_acoustic_msgs::SonarRanges_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::marine_acoustic_msgs::SonarRanges_<ContainerAllocator1> & lhs, const ::marine_acoustic_msgs::SonarRanges_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.ping_info == rhs.ping_info &&
    lhs.flags == rhs.flags &&
    lhs.transmit_delays == rhs.transmit_delays &&
    lhs.intensities == rhs.intensities &&
    lhs.beam_unit_vec == rhs.beam_unit_vec &&
    lhs.ranges == rhs.ranges;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::marine_acoustic_msgs::SonarRanges_<ContainerAllocator1> & lhs, const ::marine_acoustic_msgs::SonarRanges_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace marine_acoustic_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::marine_acoustic_msgs::SonarRanges_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::marine_acoustic_msgs::SonarRanges_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::marine_acoustic_msgs::SonarRanges_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::marine_acoustic_msgs::SonarRanges_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::marine_acoustic_msgs::SonarRanges_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::marine_acoustic_msgs::SonarRanges_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::marine_acoustic_msgs::SonarRanges_<ContainerAllocator> >
{
  static const char* value()
  {
    return "be94c27604dc96cadea282ffc5faacb9";
  }

  static const char* value(const ::marine_acoustic_msgs::SonarRanges_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbe94c27604dc96caULL;
  static const uint64_t static_value2 = 0xdea282ffc5faacb9ULL;
};

template<class ContainerAllocator>
struct DataType< ::marine_acoustic_msgs::SonarRanges_<ContainerAllocator> >
{
  static const char* value()
  {
    return "marine_acoustic_msgs/SonarRanges";
  }

  static const char* value(const ::marine_acoustic_msgs::SonarRanges_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::marine_acoustic_msgs::SonarRanges_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Single ping from a profiling sonar.\n"
"#\n"
"# This message is modeled after WHOI's MultibeamRaw.msg, from the\n"
"# ds_multibeam_msgs package (released under a BSD license).\n"
"# Modifications were made by UW-APL.\n"
"\n"
"# The header time should be the time the ping was transmitted, not\n"
"# the time the message was received.\n"
"# Note that these two could potentially be several seconds apart,\n"
"# especially in deep water.\n"
"std_msgs/Header header\n"
"\n"
"PingInfo ping_info\n"
"\n"
"# Constants declaring whether each beam is good or bad.\n"
"# This is implemented as an 8-bit masked value; it is possible for more\n"
"# than one thing to flag beams as bad. To check if a beam is good, simply\n"
"# check if it is zero.\n"
"\n"
"DetectionFlag[] flags\n"
"\n"
"# Multi-sector multibeams can transmit different sectors at different times\n"
"# The Reson doesn't but we include a TX delay for each beam anyway.\n"
"#\n"
"# Overall, therefore, our overall time is:\n"
"#\n"
"# header.stamp: TX cycle starts\n"
"# Each beam's TX time: header.stamp + txDelay[i]\n"
"# Each beam's RX time: header.stamp + txDelay[i] + twowayTravelTime[i]\n"
"float32[] transmit_delays\n"
"\n"
"# Sonar-reported intensity.  Usually uncalibrated and crude\n"
"float32[] intensities\n"
"\n"
"geometry_msgs/Vector3[] beam_unit_vec\n"
"\n"
"float32[] ranges\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: marine_acoustic_msgs/PingInfo\n"
"# Center frequency of sonar in Hz\n"
"# Set to 0 if unavailable\n"
"float32 frequency\n"
"\n"
"# Speed of sound (m/s) used to calculate ranges;\n"
"# Set to 0 if unavailable\n"
"float32 sound_speed\n"
"\n"
"# Sonar reported -3db beamwidths\n"
"# May be empty if not reported\n"
"# reported in radians\n"
"float32[] tx_beamwidths\n"
"float32[] rx_beamwidths\n"
"\n"
"================================================================================\n"
"MSG: marine_acoustic_msgs/DetectionFlag\n"
"# Beam is OK\n"
"uint8 DETECT_OK = 0\n"
"# Beam is flagged as bad by the sonar.  Think hard before second-guessing\n"
"uint8 DETECT_BAD_SONAR = 1\n"
"# Beam is flagged as bad by some automated filter applied during processing.\n"
"uint8 DETECT_BAD_FILTER = 2\n"
"# Beam is flagged as bad by the user. This is probably not happening in\n"
"# realtime, but is included here so the same message can be used throughout\n"
"# a post-processing pipeline.\n"
"uint8 DETECT_BAD_USER = 4\n"
"\n"
"# These arrays should have the same dimensions, and should match\n"
"# the number of beams for this sonar.\n"
"#\n"
"# Some fields are optional.  Those should have 0 length.\n"
"\n"
"# Flag values for every beam\n"
"uint8 flag\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::marine_acoustic_msgs::SonarRanges_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::marine_acoustic_msgs::SonarRanges_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.ping_info);
      stream.next(m.flags);
      stream.next(m.transmit_delays);
      stream.next(m.intensities);
      stream.next(m.beam_unit_vec);
      stream.next(m.ranges);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SonarRanges_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::marine_acoustic_msgs::SonarRanges_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::marine_acoustic_msgs::SonarRanges_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "ping_info: ";
    s << std::endl;
    Printer< ::marine_acoustic_msgs::PingInfo_<ContainerAllocator> >::stream(s, indent + "  ", v.ping_info);
    s << indent << "flags[]" << std::endl;
    for (size_t i = 0; i < v.flags.size(); ++i)
    {
      s << indent << "  flags[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::marine_acoustic_msgs::DetectionFlag_<ContainerAllocator> >::stream(s, indent + "    ", v.flags[i]);
    }
    s << indent << "transmit_delays[]" << std::endl;
    for (size_t i = 0; i < v.transmit_delays.size(); ++i)
    {
      s << indent << "  transmit_delays[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.transmit_delays[i]);
    }
    s << indent << "intensities[]" << std::endl;
    for (size_t i = 0; i < v.intensities.size(); ++i)
    {
      s << indent << "  intensities[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.intensities[i]);
    }
    s << indent << "beam_unit_vec[]" << std::endl;
    for (size_t i = 0; i < v.beam_unit_vec.size(); ++i)
    {
      s << indent << "  beam_unit_vec[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "    ", v.beam_unit_vec[i]);
    }
    s << indent << "ranges[]" << std::endl;
    for (size_t i = 0; i < v.ranges.size(); ++i)
    {
      s << indent << "  ranges[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.ranges[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MARINE_ACOUSTIC_MSGS_MESSAGE_SONARRANGES_H
