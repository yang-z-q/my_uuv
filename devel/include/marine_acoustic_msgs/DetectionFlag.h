// Generated by gencpp from file marine_acoustic_msgs/DetectionFlag.msg
// DO NOT EDIT!


#ifndef MARINE_ACOUSTIC_MSGS_MESSAGE_DETECTIONFLAG_H
#define MARINE_ACOUSTIC_MSGS_MESSAGE_DETECTIONFLAG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace marine_acoustic_msgs
{
template <class ContainerAllocator>
struct DetectionFlag_
{
  typedef DetectionFlag_<ContainerAllocator> Type;

  DetectionFlag_()
    : flag(0)  {
    }
  DetectionFlag_(const ContainerAllocator& _alloc)
    : flag(0)  {
  (void)_alloc;
    }



   typedef uint8_t _flag_type;
  _flag_type flag;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(DETECT_OK)
  #undef DETECT_OK
#endif
#if defined(_WIN32) && defined(DETECT_BAD_SONAR)
  #undef DETECT_BAD_SONAR
#endif
#if defined(_WIN32) && defined(DETECT_BAD_FILTER)
  #undef DETECT_BAD_FILTER
#endif
#if defined(_WIN32) && defined(DETECT_BAD_USER)
  #undef DETECT_BAD_USER
#endif

  enum {
    DETECT_OK = 0u,
    DETECT_BAD_SONAR = 1u,
    DETECT_BAD_FILTER = 2u,
    DETECT_BAD_USER = 4u,
  };


  typedef boost::shared_ptr< ::marine_acoustic_msgs::DetectionFlag_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::marine_acoustic_msgs::DetectionFlag_<ContainerAllocator> const> ConstPtr;

}; // struct DetectionFlag_

typedef ::marine_acoustic_msgs::DetectionFlag_<std::allocator<void> > DetectionFlag;

typedef boost::shared_ptr< ::marine_acoustic_msgs::DetectionFlag > DetectionFlagPtr;
typedef boost::shared_ptr< ::marine_acoustic_msgs::DetectionFlag const> DetectionFlagConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::marine_acoustic_msgs::DetectionFlag_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::marine_acoustic_msgs::DetectionFlag_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::marine_acoustic_msgs::DetectionFlag_<ContainerAllocator1> & lhs, const ::marine_acoustic_msgs::DetectionFlag_<ContainerAllocator2> & rhs)
{
  return lhs.flag == rhs.flag;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::marine_acoustic_msgs::DetectionFlag_<ContainerAllocator1> & lhs, const ::marine_acoustic_msgs::DetectionFlag_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace marine_acoustic_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::marine_acoustic_msgs::DetectionFlag_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::marine_acoustic_msgs::DetectionFlag_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::marine_acoustic_msgs::DetectionFlag_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::marine_acoustic_msgs::DetectionFlag_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::marine_acoustic_msgs::DetectionFlag_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::marine_acoustic_msgs::DetectionFlag_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::marine_acoustic_msgs::DetectionFlag_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2c45bd69e61e55c2962ccd8337e7d00d";
  }

  static const char* value(const ::marine_acoustic_msgs::DetectionFlag_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2c45bd69e61e55c2ULL;
  static const uint64_t static_value2 = 0x962ccd8337e7d00dULL;
};

template<class ContainerAllocator>
struct DataType< ::marine_acoustic_msgs::DetectionFlag_<ContainerAllocator> >
{
  static const char* value()
  {
    return "marine_acoustic_msgs/DetectionFlag";
  }

  static const char* value(const ::marine_acoustic_msgs::DetectionFlag_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::marine_acoustic_msgs::DetectionFlag_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Beam is OK\n"
"uint8 DETECT_OK = 0\n"
"# Beam is flagged as bad by the sonar.  Think hard before second-guessing\n"
"uint8 DETECT_BAD_SONAR = 1\n"
"# Beam is flagged as bad by some automated filter applied during processing.\n"
"uint8 DETECT_BAD_FILTER = 2\n"
"# Beam is flagged as bad by the user. This is probably not happening in\n"
"# realtime, but is included here so the same message can be used throughout\n"
"# a post-processing pipeline.\n"
"uint8 DETECT_BAD_USER = 4\n"
"\n"
"# These arrays should have the same dimensions, and should match\n"
"# the number of beams for this sonar.\n"
"#\n"
"# Some fields are optional.  Those should have 0 length.\n"
"\n"
"# Flag values for every beam\n"
"uint8 flag\n"
;
  }

  static const char* value(const ::marine_acoustic_msgs::DetectionFlag_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::marine_acoustic_msgs::DetectionFlag_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.flag);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DetectionFlag_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::marine_acoustic_msgs::DetectionFlag_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::marine_acoustic_msgs::DetectionFlag_<ContainerAllocator>& v)
  {
    s << indent << "flag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.flag);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MARINE_ACOUSTIC_MSGS_MESSAGE_DETECTIONFLAG_H
