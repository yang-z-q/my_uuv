// Generated by gencpp from file ds_acomms_msgs/QueueDefinition.msg
// DO NOT EDIT!


#ifndef DS_ACOMMS_MSGS_MESSAGE_QUEUEDEFINITION_H
#define DS_ACOMMS_MSGS_MESSAGE_QUEUEDEFINITION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ds_acomms_msgs
{
template <class ContainerAllocator>
struct QueueDefinition_
{
  typedef QueueDefinition_<ContainerAllocator> Type;

  QueueDefinition_()
    : background_data()
    , send_once_topics()
    , queue_topics()
    , queue_periods()  {
    }
  QueueDefinition_(const ContainerAllocator& _alloc)
    : background_data(_alloc)
    , send_once_topics(_alloc)
    , queue_topics(_alloc)
    , queue_periods(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _background_data_type;
  _background_data_type background_data;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _send_once_topics_type;
  _send_once_topics_type send_once_topics;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _queue_topics_type;
  _queue_topics_type queue_topics;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _queue_periods_type;
  _queue_periods_type queue_periods;





  typedef boost::shared_ptr< ::ds_acomms_msgs::QueueDefinition_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ds_acomms_msgs::QueueDefinition_<ContainerAllocator> const> ConstPtr;

}; // struct QueueDefinition_

typedef ::ds_acomms_msgs::QueueDefinition_<std::allocator<void> > QueueDefinition;

typedef boost::shared_ptr< ::ds_acomms_msgs::QueueDefinition > QueueDefinitionPtr;
typedef boost::shared_ptr< ::ds_acomms_msgs::QueueDefinition const> QueueDefinitionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ds_acomms_msgs::QueueDefinition_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ds_acomms_msgs::QueueDefinition_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ds_acomms_msgs::QueueDefinition_<ContainerAllocator1> & lhs, const ::ds_acomms_msgs::QueueDefinition_<ContainerAllocator2> & rhs)
{
  return lhs.background_data == rhs.background_data &&
    lhs.send_once_topics == rhs.send_once_topics &&
    lhs.queue_topics == rhs.queue_topics &&
    lhs.queue_periods == rhs.queue_periods;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ds_acomms_msgs::QueueDefinition_<ContainerAllocator1> & lhs, const ::ds_acomms_msgs::QueueDefinition_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ds_acomms_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ds_acomms_msgs::QueueDefinition_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ds_acomms_msgs::QueueDefinition_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_acomms_msgs::QueueDefinition_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_acomms_msgs::QueueDefinition_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_acomms_msgs::QueueDefinition_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_acomms_msgs::QueueDefinition_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ds_acomms_msgs::QueueDefinition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b34664678bbbbb8dd2e6eeee08a29a6e";
  }

  static const char* value(const ::ds_acomms_msgs::QueueDefinition_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb34664678bbbbb8dULL;
  static const uint64_t static_value2 = 0xd2e6eeee08a29a6eULL;
};

template<class ContainerAllocator>
struct DataType< ::ds_acomms_msgs::QueueDefinition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ds_acomms_msgs/QueueDefinition";
  }

  static const char* value(const ::ds_acomms_msgs::QueueDefinition_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ds_acomms_msgs::QueueDefinition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8[] background_data  # length always 0 or 1\n"
"\n"
"# TODO: Need to split send-once out, but AFTER the other renaming.\n"
"uint8[] send_once_topics\n"
"\n"
"\n"
"# one-byte codes that map to a topic and message type\n"
"uint8[] queue_topics\n"
"# What mode to queue data for the corresponding topic\n"
"# 0 is RPC (next message transmitted)\n"
"# 1-63 is sampled every i-th transmit cycle\n"
"# 255 is service call with fixed number of bytes\n"
"# TODO: service calls (vs single-shot messages) are NYI\n"
"uint8[] queue_periods\n"
;
  }

  static const char* value(const ::ds_acomms_msgs::QueueDefinition_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ds_acomms_msgs::QueueDefinition_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.background_data);
      stream.next(m.send_once_topics);
      stream.next(m.queue_topics);
      stream.next(m.queue_periods);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct QueueDefinition_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ds_acomms_msgs::QueueDefinition_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ds_acomms_msgs::QueueDefinition_<ContainerAllocator>& v)
  {
    s << indent << "background_data[]" << std::endl;
    for (size_t i = 0; i < v.background_data.size(); ++i)
    {
      s << indent << "  background_data[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.background_data[i]);
    }
    s << indent << "send_once_topics[]" << std::endl;
    for (size_t i = 0; i < v.send_once_topics.size(); ++i)
    {
      s << indent << "  send_once_topics[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.send_once_topics[i]);
    }
    s << indent << "queue_topics[]" << std::endl;
    for (size_t i = 0; i < v.queue_topics.size(); ++i)
    {
      s << indent << "  queue_topics[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.queue_topics[i]);
    }
    s << indent << "queue_periods[]" << std::endl;
    for (size_t i = 0; i < v.queue_periods.size(); ++i)
    {
      s << indent << "  queue_periods[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.queue_periods[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DS_ACOMMS_MSGS_MESSAGE_QUEUEDEFINITION_H
