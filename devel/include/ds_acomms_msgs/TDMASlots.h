// Generated by gencpp from file ds_acomms_msgs/TDMASlots.msg
// DO NOT EDIT!


#ifndef DS_ACOMMS_MSGS_MESSAGE_TDMASLOTS_H
#define DS_ACOMMS_MSGS_MESSAGE_TDMASLOTS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ds_acomms_msgs
{
template <class ContainerAllocator>
struct TDMASlots_
{
  typedef TDMASlots_<ContainerAllocator> Type;

  TDMASlots_()
    : starts()
    , durations()
    , rates()  {
    }
  TDMASlots_(const ContainerAllocator& _alloc)
    : starts(_alloc)
    , durations(_alloc)
    , rates(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _starts_type;
  _starts_type starts;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _durations_type;
  _durations_type durations;

   typedef std::vector<int8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int8_t>> _rates_type;
  _rates_type rates;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(DEFAULT)
  #undef DEFAULT
#endif
#if defined(_WIN32) && defined(MM1)
  #undef MM1
#endif
#if defined(_WIN32) && defined(MM4)
  #undef MM4
#endif
#if defined(_WIN32) && defined(MM5)
  #undef MM5
#endif

  enum {
    DEFAULT = 0u,
    MM1 = 1u,
    MM4 = 4u,
    MM5 = 5u,
  };


  typedef boost::shared_ptr< ::ds_acomms_msgs::TDMASlots_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ds_acomms_msgs::TDMASlots_<ContainerAllocator> const> ConstPtr;

}; // struct TDMASlots_

typedef ::ds_acomms_msgs::TDMASlots_<std::allocator<void> > TDMASlots;

typedef boost::shared_ptr< ::ds_acomms_msgs::TDMASlots > TDMASlotsPtr;
typedef boost::shared_ptr< ::ds_acomms_msgs::TDMASlots const> TDMASlotsConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ds_acomms_msgs::TDMASlots_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ds_acomms_msgs::TDMASlots_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ds_acomms_msgs::TDMASlots_<ContainerAllocator1> & lhs, const ::ds_acomms_msgs::TDMASlots_<ContainerAllocator2> & rhs)
{
  return lhs.starts == rhs.starts &&
    lhs.durations == rhs.durations &&
    lhs.rates == rhs.rates;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ds_acomms_msgs::TDMASlots_<ContainerAllocator1> & lhs, const ::ds_acomms_msgs::TDMASlots_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ds_acomms_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ds_acomms_msgs::TDMASlots_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ds_acomms_msgs::TDMASlots_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_acomms_msgs::TDMASlots_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_acomms_msgs::TDMASlots_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_acomms_msgs::TDMASlots_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_acomms_msgs::TDMASlots_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ds_acomms_msgs::TDMASlots_<ContainerAllocator> >
{
  static const char* value()
  {
    return "53b8fbe38ac53e2dd6096f98da38de09";
  }

  static const char* value(const ::ds_acomms_msgs::TDMASlots_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x53b8fbe38ac53e2dULL;
  static const uint64_t static_value2 = 0xd6096f98da38de09ULL;
};

template<class ContainerAllocator>
struct DataType< ::ds_acomms_msgs::TDMASlots_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ds_acomms_msgs/TDMASlots";
  }

  static const char* value(const ::ds_acomms_msgs::TDMASlots_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ds_acomms_msgs::TDMASlots_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Starting time for each slot, in seconds after start of the minute\n"
"float32[] starts\n"
"# Duration of each slot\n"
"float32[] durations\n"
"# rate for each slot\n"
"int8[] rates\n"
"\n"
"uint8 DEFAULT=0 # Let Comms Manager choose rate to use\n"
"uint8 MM1=1     # If device is a micromodem, use rate 1\n"
"uint8 MM4=4     # If device is a micromodem, use rate 4\n"
"uint8 MM5=5     # If device is a micromodem, use rate 5\n"
;
  }

  static const char* value(const ::ds_acomms_msgs::TDMASlots_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ds_acomms_msgs::TDMASlots_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.starts);
      stream.next(m.durations);
      stream.next(m.rates);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TDMASlots_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ds_acomms_msgs::TDMASlots_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ds_acomms_msgs::TDMASlots_<ContainerAllocator>& v)
  {
    s << indent << "starts[]" << std::endl;
    for (size_t i = 0; i < v.starts.size(); ++i)
    {
      s << indent << "  starts[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.starts[i]);
    }
    s << indent << "durations[]" << std::endl;
    for (size_t i = 0; i < v.durations.size(); ++i)
    {
      s << indent << "  durations[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.durations[i]);
    }
    s << indent << "rates[]" << std::endl;
    for (size_t i = 0; i < v.rates.size(); ++i)
    {
      s << indent << "  rates[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.rates[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DS_ACOMMS_MSGS_MESSAGE_TDMASLOTS_H
