// Generated by gencpp from file ds_hotel_msgs/BatMan.msg
// DO NOT EDIT!


#ifndef DS_HOTEL_MSGS_MESSAGE_BATMAN_H
#define DS_HOTEL_MSGS_MESSAGE_BATMAN_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <ds_core_msgs/DsHeader.h>

namespace ds_hotel_msgs
{
template <class ContainerAllocator>
struct BatMan_
{
  typedef BatMan_<ContainerAllocator> Type;

  BatMan_()
    : header()
    , ds_header()
    , num_bats(0)
    , maxModuleVolt(0.0)
    , minModuleVolt(0.0)
    , maxSwitchTemp(0.0)
    , minSwitchTemp(0.0)
    , maxCellVolt(0.0)
    , minCellVolt(0.0)
    , maxCellTemp(0.0)
    , minCellTemp(0.0)
    , capacityCoulombs(0.0)
    , capacityAh(0.0)
    , chargeCoulombs(0.0)
    , chargeAh(0.0)
    , percentFull(0.0)
    , moduleVolt()
    , moduleAh()
    , moduleCapacity()
    , modulePercent()
    , moduleDischarging()
    , moduleCharging()  {
    }
  BatMan_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , ds_header(_alloc)
    , num_bats(0)
    , maxModuleVolt(0.0)
    , minModuleVolt(0.0)
    , maxSwitchTemp(0.0)
    , minSwitchTemp(0.0)
    , maxCellVolt(0.0)
    , minCellVolt(0.0)
    , maxCellTemp(0.0)
    , minCellTemp(0.0)
    , capacityCoulombs(0.0)
    , capacityAh(0.0)
    , chargeCoulombs(0.0)
    , chargeAh(0.0)
    , percentFull(0.0)
    , moduleVolt(_alloc)
    , moduleAh(_alloc)
    , moduleCapacity(_alloc)
    , modulePercent(_alloc)
    , moduleDischarging(_alloc)
    , moduleCharging(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::ds_core_msgs::DsHeader_<ContainerAllocator>  _ds_header_type;
  _ds_header_type ds_header;

   typedef int32_t _num_bats_type;
  _num_bats_type num_bats;

   typedef float _maxModuleVolt_type;
  _maxModuleVolt_type maxModuleVolt;

   typedef float _minModuleVolt_type;
  _minModuleVolt_type minModuleVolt;

   typedef float _maxSwitchTemp_type;
  _maxSwitchTemp_type maxSwitchTemp;

   typedef float _minSwitchTemp_type;
  _minSwitchTemp_type minSwitchTemp;

   typedef float _maxCellVolt_type;
  _maxCellVolt_type maxCellVolt;

   typedef float _minCellVolt_type;
  _minCellVolt_type minCellVolt;

   typedef float _maxCellTemp_type;
  _maxCellTemp_type maxCellTemp;

   typedef float _minCellTemp_type;
  _minCellTemp_type minCellTemp;

   typedef double _capacityCoulombs_type;
  _capacityCoulombs_type capacityCoulombs;

   typedef double _capacityAh_type;
  _capacityAh_type capacityAh;

   typedef double _chargeCoulombs_type;
  _chargeCoulombs_type chargeCoulombs;

   typedef double _chargeAh_type;
  _chargeAh_type chargeAh;

   typedef double _percentFull_type;
  _percentFull_type percentFull;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _moduleVolt_type;
  _moduleVolt_type moduleVolt;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _moduleAh_type;
  _moduleAh_type moduleAh;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _moduleCapacity_type;
  _moduleCapacity_type moduleCapacity;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _modulePercent_type;
  _modulePercent_type modulePercent;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _moduleDischarging_type;
  _moduleDischarging_type moduleDischarging;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _moduleCharging_type;
  _moduleCharging_type moduleCharging;





  typedef boost::shared_ptr< ::ds_hotel_msgs::BatMan_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ds_hotel_msgs::BatMan_<ContainerAllocator> const> ConstPtr;

}; // struct BatMan_

typedef ::ds_hotel_msgs::BatMan_<std::allocator<void> > BatMan;

typedef boost::shared_ptr< ::ds_hotel_msgs::BatMan > BatManPtr;
typedef boost::shared_ptr< ::ds_hotel_msgs::BatMan const> BatManConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ds_hotel_msgs::BatMan_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ds_hotel_msgs::BatMan_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ds_hotel_msgs::BatMan_<ContainerAllocator1> & lhs, const ::ds_hotel_msgs::BatMan_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.ds_header == rhs.ds_header &&
    lhs.num_bats == rhs.num_bats &&
    lhs.maxModuleVolt == rhs.maxModuleVolt &&
    lhs.minModuleVolt == rhs.minModuleVolt &&
    lhs.maxSwitchTemp == rhs.maxSwitchTemp &&
    lhs.minSwitchTemp == rhs.minSwitchTemp &&
    lhs.maxCellVolt == rhs.maxCellVolt &&
    lhs.minCellVolt == rhs.minCellVolt &&
    lhs.maxCellTemp == rhs.maxCellTemp &&
    lhs.minCellTemp == rhs.minCellTemp &&
    lhs.capacityCoulombs == rhs.capacityCoulombs &&
    lhs.capacityAh == rhs.capacityAh &&
    lhs.chargeCoulombs == rhs.chargeCoulombs &&
    lhs.chargeAh == rhs.chargeAh &&
    lhs.percentFull == rhs.percentFull &&
    lhs.moduleVolt == rhs.moduleVolt &&
    lhs.moduleAh == rhs.moduleAh &&
    lhs.moduleCapacity == rhs.moduleCapacity &&
    lhs.modulePercent == rhs.modulePercent &&
    lhs.moduleDischarging == rhs.moduleDischarging &&
    lhs.moduleCharging == rhs.moduleCharging;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ds_hotel_msgs::BatMan_<ContainerAllocator1> & lhs, const ::ds_hotel_msgs::BatMan_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ds_hotel_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ds_hotel_msgs::BatMan_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ds_hotel_msgs::BatMan_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_hotel_msgs::BatMan_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_hotel_msgs::BatMan_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_hotel_msgs::BatMan_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_hotel_msgs::BatMan_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ds_hotel_msgs::BatMan_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f3159eb1767ecbe966600482b7e002f0";
  }

  static const char* value(const ::ds_hotel_msgs::BatMan_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf3159eb1767ecbe9ULL;
  static const uint64_t static_value2 = 0x66600482b7e002f0ULL;
};

template<class ContainerAllocator>
struct DataType< ::ds_hotel_msgs::BatMan_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ds_hotel_msgs/BatMan";
  }

  static const char* value(const ::ds_hotel_msgs::BatMan_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ds_hotel_msgs::BatMan_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# The standard 2-part DsHeader block\n"
"# This allows both a standard ROS header and DS-specific header blocks\n"
"# See HEADERS.md in ds_core_msgs for details\n"
"std_msgs/Header header\n"
"ds_core_msgs/DsHeader ds_header\n"
"\n"
"int32 num_bats\n"
"\n"
"float32 maxModuleVolt\n"
"float32 minModuleVolt\n"
"float32 maxSwitchTemp\n"
"float32 minSwitchTemp\n"
"\n"
"float32 maxCellVolt\n"
"float32 minCellVolt\n"
"float32 maxCellTemp\n"
"float32 minCellTemp\n"
"\n"
"float64 capacityCoulombs\n"
"float64 capacityAh\n"
"float64 chargeCoulombs\n"
"float64 chargeAh\n"
"float64 percentFull\n"
"\n"
"float32[] moduleVolt\n"
"float64[] moduleAh\n"
"float64[] moduleCapacity\n"
"float64[] modulePercent\n"
"bool[] moduleDischarging\n"
"bool[] moduleCharging\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: ds_core_msgs/DsHeader\n"
"# This is half our standard header for ds_msgs; see\n"
"# HEADERS.md for details\n"
"\n"
"# This header should ALWAYS be paired with a std_msgs/Header\n"
"# and should ALWAYS reference HEADERS.md.  If you're looking at this\n"
"# file to add headers to a type, you probably want to copy/paste\n"
"# the following block:\n"
"#\n"
"#     # The standard 2-part DsHeader block\n"
"#     # This allows both a standard ROS header and DS-specific header blocks\n"
"#     # See HEADERS.md in ds_core_msgs for details\n"
"#     std_msgs/Header header\n"
"#     ds_core_msgs/DsHeader ds_header\n"
"#\n"
"\n"
"# Time data was received or sent out (i/o time)\n"
"time io_time\n"
"\n"
"# Sensor source UUID\n"
"uint8[16] source_uuid\n"
"\n"
;
  }

  static const char* value(const ::ds_hotel_msgs::BatMan_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ds_hotel_msgs::BatMan_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.ds_header);
      stream.next(m.num_bats);
      stream.next(m.maxModuleVolt);
      stream.next(m.minModuleVolt);
      stream.next(m.maxSwitchTemp);
      stream.next(m.minSwitchTemp);
      stream.next(m.maxCellVolt);
      stream.next(m.minCellVolt);
      stream.next(m.maxCellTemp);
      stream.next(m.minCellTemp);
      stream.next(m.capacityCoulombs);
      stream.next(m.capacityAh);
      stream.next(m.chargeCoulombs);
      stream.next(m.chargeAh);
      stream.next(m.percentFull);
      stream.next(m.moduleVolt);
      stream.next(m.moduleAh);
      stream.next(m.moduleCapacity);
      stream.next(m.modulePercent);
      stream.next(m.moduleDischarging);
      stream.next(m.moduleCharging);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BatMan_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ds_hotel_msgs::BatMan_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ds_hotel_msgs::BatMan_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "ds_header: ";
    s << std::endl;
    Printer< ::ds_core_msgs::DsHeader_<ContainerAllocator> >::stream(s, indent + "  ", v.ds_header);
    s << indent << "num_bats: ";
    Printer<int32_t>::stream(s, indent + "  ", v.num_bats);
    s << indent << "maxModuleVolt: ";
    Printer<float>::stream(s, indent + "  ", v.maxModuleVolt);
    s << indent << "minModuleVolt: ";
    Printer<float>::stream(s, indent + "  ", v.minModuleVolt);
    s << indent << "maxSwitchTemp: ";
    Printer<float>::stream(s, indent + "  ", v.maxSwitchTemp);
    s << indent << "minSwitchTemp: ";
    Printer<float>::stream(s, indent + "  ", v.minSwitchTemp);
    s << indent << "maxCellVolt: ";
    Printer<float>::stream(s, indent + "  ", v.maxCellVolt);
    s << indent << "minCellVolt: ";
    Printer<float>::stream(s, indent + "  ", v.minCellVolt);
    s << indent << "maxCellTemp: ";
    Printer<float>::stream(s, indent + "  ", v.maxCellTemp);
    s << indent << "minCellTemp: ";
    Printer<float>::stream(s, indent + "  ", v.minCellTemp);
    s << indent << "capacityCoulombs: ";
    Printer<double>::stream(s, indent + "  ", v.capacityCoulombs);
    s << indent << "capacityAh: ";
    Printer<double>::stream(s, indent + "  ", v.capacityAh);
    s << indent << "chargeCoulombs: ";
    Printer<double>::stream(s, indent + "  ", v.chargeCoulombs);
    s << indent << "chargeAh: ";
    Printer<double>::stream(s, indent + "  ", v.chargeAh);
    s << indent << "percentFull: ";
    Printer<double>::stream(s, indent + "  ", v.percentFull);
    s << indent << "moduleVolt[]" << std::endl;
    for (size_t i = 0; i < v.moduleVolt.size(); ++i)
    {
      s << indent << "  moduleVolt[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.moduleVolt[i]);
    }
    s << indent << "moduleAh[]" << std::endl;
    for (size_t i = 0; i < v.moduleAh.size(); ++i)
    {
      s << indent << "  moduleAh[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.moduleAh[i]);
    }
    s << indent << "moduleCapacity[]" << std::endl;
    for (size_t i = 0; i < v.moduleCapacity.size(); ++i)
    {
      s << indent << "  moduleCapacity[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.moduleCapacity[i]);
    }
    s << indent << "modulePercent[]" << std::endl;
    for (size_t i = 0; i < v.modulePercent.size(); ++i)
    {
      s << indent << "  modulePercent[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.modulePercent[i]);
    }
    s << indent << "moduleDischarging[]" << std::endl;
    for (size_t i = 0; i < v.moduleDischarging.size(); ++i)
    {
      s << indent << "  moduleDischarging[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.moduleDischarging[i]);
    }
    s << indent << "moduleCharging[]" << std::endl;
    for (size_t i = 0; i < v.moduleCharging.size(); ++i)
    {
      s << indent << "  moduleCharging[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.moduleCharging[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DS_HOTEL_MSGS_MESSAGE_BATMAN_H
