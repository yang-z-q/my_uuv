// Generated by gencpp from file ds_hotel_msgs/PwrSwitchCmdRequest.msg
// DO NOT EDIT!


#ifndef DS_HOTEL_MSGS_MESSAGE_PWRSWITCHCMDREQUEST_H
#define DS_HOTEL_MSGS_MESSAGE_PWRSWITCHCMDREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ds_hotel_msgs
{
template <class ContainerAllocator>
struct PwrSwitchCmdRequest_
{
  typedef PwrSwitchCmdRequest_<ContainerAllocator> Type;

  PwrSwitchCmdRequest_()
    : device_name()
    , desired_state()  {
    }
  PwrSwitchCmdRequest_(const ContainerAllocator& _alloc)
    : device_name(_alloc)
    , desired_state(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _device_name_type;
  _device_name_type device_name;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _desired_state_type;
  _desired_state_type desired_state;





  typedef boost::shared_ptr< ::ds_hotel_msgs::PwrSwitchCmdRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ds_hotel_msgs::PwrSwitchCmdRequest_<ContainerAllocator> const> ConstPtr;

}; // struct PwrSwitchCmdRequest_

typedef ::ds_hotel_msgs::PwrSwitchCmdRequest_<std::allocator<void> > PwrSwitchCmdRequest;

typedef boost::shared_ptr< ::ds_hotel_msgs::PwrSwitchCmdRequest > PwrSwitchCmdRequestPtr;
typedef boost::shared_ptr< ::ds_hotel_msgs::PwrSwitchCmdRequest const> PwrSwitchCmdRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ds_hotel_msgs::PwrSwitchCmdRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ds_hotel_msgs::PwrSwitchCmdRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ds_hotel_msgs::PwrSwitchCmdRequest_<ContainerAllocator1> & lhs, const ::ds_hotel_msgs::PwrSwitchCmdRequest_<ContainerAllocator2> & rhs)
{
  return lhs.device_name == rhs.device_name &&
    lhs.desired_state == rhs.desired_state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ds_hotel_msgs::PwrSwitchCmdRequest_<ContainerAllocator1> & lhs, const ::ds_hotel_msgs::PwrSwitchCmdRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ds_hotel_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ds_hotel_msgs::PwrSwitchCmdRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ds_hotel_msgs::PwrSwitchCmdRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_hotel_msgs::PwrSwitchCmdRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_hotel_msgs::PwrSwitchCmdRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_hotel_msgs::PwrSwitchCmdRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_hotel_msgs::PwrSwitchCmdRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ds_hotel_msgs::PwrSwitchCmdRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "764edda3292a002f57d8575de4097af1";
  }

  static const char* value(const ::ds_hotel_msgs::PwrSwitchCmdRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x764edda3292a002fULL;
  static const uint64_t static_value2 = 0x57d8575de4097af1ULL;
};

template<class ContainerAllocator>
struct DataType< ::ds_hotel_msgs::PwrSwitchCmdRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ds_hotel_msgs/PwrSwitchCmdRequest";
  }

  static const char* value(const ::ds_hotel_msgs::PwrSwitchCmdRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ds_hotel_msgs::PwrSwitchCmdRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string device_name\n"
"string desired_state\n"
;
  }

  static const char* value(const ::ds_hotel_msgs::PwrSwitchCmdRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ds_hotel_msgs::PwrSwitchCmdRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.device_name);
      stream.next(m.desired_state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PwrSwitchCmdRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ds_hotel_msgs::PwrSwitchCmdRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ds_hotel_msgs::PwrSwitchCmdRequest_<ContainerAllocator>& v)
  {
    s << indent << "device_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.device_name);
    s << indent << "desired_state: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.desired_state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DS_HOTEL_MSGS_MESSAGE_PWRSWITCHCMDREQUEST_H
