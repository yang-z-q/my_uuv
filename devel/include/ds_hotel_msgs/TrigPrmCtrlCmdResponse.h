// Generated by gencpp from file ds_hotel_msgs/TrigPrmCtrlCmdResponse.msg
// DO NOT EDIT!


#ifndef DS_HOTEL_MSGS_MESSAGE_TRIGPRMCTRLCMDRESPONSE_H
#define DS_HOTEL_MSGS_MESSAGE_TRIGPRMCTRLCMDRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ds_hotel_msgs
{
template <class ContainerAllocator>
struct TrigPrmCtrlCmdResponse_
{
  typedef TrigPrmCtrlCmdResponse_<ContainerAllocator> Type;

  TrigPrmCtrlCmdResponse_()
    : is_successful(false)
    , action_done(0)
    , reason()  {
    }
  TrigPrmCtrlCmdResponse_(const ContainerAllocator& _alloc)
    : is_successful(false)
    , action_done(0)
    , reason(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _is_successful_type;
  _is_successful_type is_successful;

   typedef uint8_t _action_done_type;
  _action_done_type action_done;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _reason_type;
  _reason_type reason;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(BOARD_ENABLED)
  #undef BOARD_ENABLED
#endif
#if defined(_WIN32) && defined(BOARD_DISABLED)
  #undef BOARD_DISABLED
#endif

  enum {
    BOARD_ENABLED = 1u,
    BOARD_DISABLED = 2u,
  };


  typedef boost::shared_ptr< ::ds_hotel_msgs::TrigPrmCtrlCmdResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ds_hotel_msgs::TrigPrmCtrlCmdResponse_<ContainerAllocator> const> ConstPtr;

}; // struct TrigPrmCtrlCmdResponse_

typedef ::ds_hotel_msgs::TrigPrmCtrlCmdResponse_<std::allocator<void> > TrigPrmCtrlCmdResponse;

typedef boost::shared_ptr< ::ds_hotel_msgs::TrigPrmCtrlCmdResponse > TrigPrmCtrlCmdResponsePtr;
typedef boost::shared_ptr< ::ds_hotel_msgs::TrigPrmCtrlCmdResponse const> TrigPrmCtrlCmdResponseConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ds_hotel_msgs::TrigPrmCtrlCmdResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ds_hotel_msgs::TrigPrmCtrlCmdResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ds_hotel_msgs::TrigPrmCtrlCmdResponse_<ContainerAllocator1> & lhs, const ::ds_hotel_msgs::TrigPrmCtrlCmdResponse_<ContainerAllocator2> & rhs)
{
  return lhs.is_successful == rhs.is_successful &&
    lhs.action_done == rhs.action_done &&
    lhs.reason == rhs.reason;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ds_hotel_msgs::TrigPrmCtrlCmdResponse_<ContainerAllocator1> & lhs, const ::ds_hotel_msgs::TrigPrmCtrlCmdResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ds_hotel_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ds_hotel_msgs::TrigPrmCtrlCmdResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ds_hotel_msgs::TrigPrmCtrlCmdResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_hotel_msgs::TrigPrmCtrlCmdResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_hotel_msgs::TrigPrmCtrlCmdResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_hotel_msgs::TrigPrmCtrlCmdResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_hotel_msgs::TrigPrmCtrlCmdResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ds_hotel_msgs::TrigPrmCtrlCmdResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e2b4c13b85324fb56648e216a74a4b45";
  }

  static const char* value(const ::ds_hotel_msgs::TrigPrmCtrlCmdResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe2b4c13b85324fb5ULL;
  static const uint64_t static_value2 = 0x6648e216a74a4b45ULL;
};

template<class ContainerAllocator>
struct DataType< ::ds_hotel_msgs::TrigPrmCtrlCmdResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ds_hotel_msgs/TrigPrmCtrlCmdResponse";
  }

  static const char* value(const ::ds_hotel_msgs::TrigPrmCtrlCmdResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ds_hotel_msgs::TrigPrmCtrlCmdResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Constants signifying whether the board is triggering or secured (enums for action_done)\n"
"uint8 BOARD_ENABLED = 1\n"
"uint8 BOARD_DISABLED = 2\n"
"\n"
"# represents the overall success of the service call\n"
"bool is_successful\n"
"\n"
"# More specifics on what the service call did\n"
"uint8 action_done\n"
"\n"
"# Explains why the service failed (only used for board configuration checking right now)\n"
"string reason\n"
"\n"
;
  }

  static const char* value(const ::ds_hotel_msgs::TrigPrmCtrlCmdResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ds_hotel_msgs::TrigPrmCtrlCmdResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.is_successful);
      stream.next(m.action_done);
      stream.next(m.reason);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrigPrmCtrlCmdResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ds_hotel_msgs::TrigPrmCtrlCmdResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ds_hotel_msgs::TrigPrmCtrlCmdResponse_<ContainerAllocator>& v)
  {
    s << indent << "is_successful: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_successful);
    s << indent << "action_done: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.action_done);
    s << indent << "reason: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.reason);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DS_HOTEL_MSGS_MESSAGE_TRIGPRMCTRLCMDRESPONSE_H
