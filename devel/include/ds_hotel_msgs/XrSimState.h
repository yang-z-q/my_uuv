// Generated by gencpp from file ds_hotel_msgs/XrSimState.msg
// DO NOT EDIT!


#ifndef DS_HOTEL_MSGS_MESSAGE_XRSIMSTATE_H
#define DS_HOTEL_MSGS_MESSAGE_XRSIMSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ds_hotel_msgs
{
template <class ContainerAllocator>
struct XrSimState_
{
  typedef XrSimState_<ContainerAllocator> Type;

  XrSimState_()
    : stamp()
    , idx(0)
    , dcams_actual()
    , wires_actual()
    , dcams_cmds()
    , wires_cmds()
    , motor_secs()
    , burnwire_secs()
    , short_deadsecs(0.0)
    , deadsecs(0.0)
    , acoustic_code(0)
    , dcam_open_pct()
    , wire_burn_pct()  {
    }
  XrSimState_(const ContainerAllocator& _alloc)
    : stamp()
    , idx(0)
    , dcams_actual(_alloc)
    , wires_actual(_alloc)
    , dcams_cmds(_alloc)
    , wires_cmds(_alloc)
    , motor_secs(_alloc)
    , burnwire_secs(_alloc)
    , short_deadsecs(0.0)
    , deadsecs(0.0)
    , acoustic_code(0)
    , dcam_open_pct(_alloc)
    , wire_burn_pct(_alloc)  {
  (void)_alloc;
    }



   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef int8_t _idx_type;
  _idx_type idx;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _dcams_actual_type;
  _dcams_actual_type dcams_actual;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _wires_actual_type;
  _wires_actual_type wires_actual;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _dcams_cmds_type;
  _dcams_cmds_type dcams_cmds;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _wires_cmds_type;
  _wires_cmds_type wires_cmds;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _motor_secs_type;
  _motor_secs_type motor_secs;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _burnwire_secs_type;
  _burnwire_secs_type burnwire_secs;

   typedef float _short_deadsecs_type;
  _short_deadsecs_type short_deadsecs;

   typedef float _deadsecs_type;
  _deadsecs_type deadsecs;

   typedef uint8_t _acoustic_code_type;
  _acoustic_code_type acoustic_code;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _dcam_open_pct_type;
  _dcam_open_pct_type dcam_open_pct;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _wire_burn_pct_type;
  _wire_burn_pct_type wire_burn_pct;





  typedef boost::shared_ptr< ::ds_hotel_msgs::XrSimState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ds_hotel_msgs::XrSimState_<ContainerAllocator> const> ConstPtr;

}; // struct XrSimState_

typedef ::ds_hotel_msgs::XrSimState_<std::allocator<void> > XrSimState;

typedef boost::shared_ptr< ::ds_hotel_msgs::XrSimState > XrSimStatePtr;
typedef boost::shared_ptr< ::ds_hotel_msgs::XrSimState const> XrSimStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ds_hotel_msgs::XrSimState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ds_hotel_msgs::XrSimState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ds_hotel_msgs::XrSimState_<ContainerAllocator1> & lhs, const ::ds_hotel_msgs::XrSimState_<ContainerAllocator2> & rhs)
{
  return lhs.stamp == rhs.stamp &&
    lhs.idx == rhs.idx &&
    lhs.dcams_actual == rhs.dcams_actual &&
    lhs.wires_actual == rhs.wires_actual &&
    lhs.dcams_cmds == rhs.dcams_cmds &&
    lhs.wires_cmds == rhs.wires_cmds &&
    lhs.motor_secs == rhs.motor_secs &&
    lhs.burnwire_secs == rhs.burnwire_secs &&
    lhs.short_deadsecs == rhs.short_deadsecs &&
    lhs.deadsecs == rhs.deadsecs &&
    lhs.acoustic_code == rhs.acoustic_code &&
    lhs.dcam_open_pct == rhs.dcam_open_pct &&
    lhs.wire_burn_pct == rhs.wire_burn_pct;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ds_hotel_msgs::XrSimState_<ContainerAllocator1> & lhs, const ::ds_hotel_msgs::XrSimState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ds_hotel_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ds_hotel_msgs::XrSimState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ds_hotel_msgs::XrSimState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_hotel_msgs::XrSimState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_hotel_msgs::XrSimState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_hotel_msgs::XrSimState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_hotel_msgs::XrSimState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ds_hotel_msgs::XrSimState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "61a12b72d95554795d5956ac77f9546d";
  }

  static const char* value(const ::ds_hotel_msgs::XrSimState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x61a12b72d9555479ULL;
  static const uint64_t static_value2 = 0x5d5956ac77f9546dULL;
};

template<class ContainerAllocator>
struct DataType< ::ds_hotel_msgs::XrSimState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ds_hotel_msgs/XrSimState";
  }

  static const char* value(const ::ds_hotel_msgs::XrSimState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ds_hotel_msgs::XrSimState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time stamp\n"
"\n"
"# XR Index\n"
"int8 idx\n"
"\n"
"# Actual state of things, as of last report\n"
"bool[] dcams_actual\n"
"bool[] wires_actual\n"
"\n"
"# Currently-commanded state\n"
"bool[] dcams_cmds\n"
"bool[] wires_cmds\n"
"\n"
"# Seconds burnwire, etc are to remain active\n"
"float32[] motor_secs\n"
"float32[] burnwire_secs\n"
"\n"
"# Short deadman\n"
"float32 short_deadsecs\n"
"\n"
"# Long deadman\n"
"float32 deadsecs\n"
"\n"
"# This is an acoustic command code that gets passed along to the status message\n"
"uint8 acoustic_code\n"
"\n"
"# How open a dcam is (from 0% to 100%)\n"
"float32[] dcam_open_pct\n"
"\n"
"# Values for burned a wire is.  From \"100\" for fully intact to \"0\" \n"
"# for fully burned\n"
"float32[] wire_burn_pct\n"
;
  }

  static const char* value(const ::ds_hotel_msgs::XrSimState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ds_hotel_msgs::XrSimState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamp);
      stream.next(m.idx);
      stream.next(m.dcams_actual);
      stream.next(m.wires_actual);
      stream.next(m.dcams_cmds);
      stream.next(m.wires_cmds);
      stream.next(m.motor_secs);
      stream.next(m.burnwire_secs);
      stream.next(m.short_deadsecs);
      stream.next(m.deadsecs);
      stream.next(m.acoustic_code);
      stream.next(m.dcam_open_pct);
      stream.next(m.wire_burn_pct);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct XrSimState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ds_hotel_msgs::XrSimState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ds_hotel_msgs::XrSimState_<ContainerAllocator>& v)
  {
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "idx: ";
    Printer<int8_t>::stream(s, indent + "  ", v.idx);
    s << indent << "dcams_actual[]" << std::endl;
    for (size_t i = 0; i < v.dcams_actual.size(); ++i)
    {
      s << indent << "  dcams_actual[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.dcams_actual[i]);
    }
    s << indent << "wires_actual[]" << std::endl;
    for (size_t i = 0; i < v.wires_actual.size(); ++i)
    {
      s << indent << "  wires_actual[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.wires_actual[i]);
    }
    s << indent << "dcams_cmds[]" << std::endl;
    for (size_t i = 0; i < v.dcams_cmds.size(); ++i)
    {
      s << indent << "  dcams_cmds[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.dcams_cmds[i]);
    }
    s << indent << "wires_cmds[]" << std::endl;
    for (size_t i = 0; i < v.wires_cmds.size(); ++i)
    {
      s << indent << "  wires_cmds[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.wires_cmds[i]);
    }
    s << indent << "motor_secs[]" << std::endl;
    for (size_t i = 0; i < v.motor_secs.size(); ++i)
    {
      s << indent << "  motor_secs[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.motor_secs[i]);
    }
    s << indent << "burnwire_secs[]" << std::endl;
    for (size_t i = 0; i < v.burnwire_secs.size(); ++i)
    {
      s << indent << "  burnwire_secs[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.burnwire_secs[i]);
    }
    s << indent << "short_deadsecs: ";
    Printer<float>::stream(s, indent + "  ", v.short_deadsecs);
    s << indent << "deadsecs: ";
    Printer<float>::stream(s, indent + "  ", v.deadsecs);
    s << indent << "acoustic_code: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.acoustic_code);
    s << indent << "dcam_open_pct[]" << std::endl;
    for (size_t i = 0; i < v.dcam_open_pct.size(); ++i)
    {
      s << indent << "  dcam_open_pct[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.dcam_open_pct[i]);
    }
    s << indent << "wire_burn_pct[]" << std::endl;
    for (size_t i = 0; i < v.wire_burn_pct.size(); ++i)
    {
      s << indent << "  wire_burn_pct[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.wire_burn_pct[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DS_HOTEL_MSGS_MESSAGE_XRSIMSTATE_H
