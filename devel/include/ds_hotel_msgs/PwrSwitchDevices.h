// Generated by gencpp from file ds_hotel_msgs/PwrSwitchDevices.msg
// DO NOT EDIT!


#ifndef DS_HOTEL_MSGS_MESSAGE_PWRSWITCHDEVICES_H
#define DS_HOTEL_MSGS_MESSAGE_PWRSWITCHDEVICES_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ds_hotel_msgs
{
template <class ContainerAllocator>
struct PwrSwitchDevices_
{
  typedef PwrSwitchDevices_<ContainerAllocator> Type;

  PwrSwitchDevices_()
    : card_name()
    , device_name()
    , device_state(false)  {
    }
  PwrSwitchDevices_(const ContainerAllocator& _alloc)
    : card_name(_alloc)
    , device_name(_alloc)
    , device_state(false)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _card_name_type;
  _card_name_type card_name;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _device_name_type;
  _device_name_type device_name;

   typedef uint8_t _device_state_type;
  _device_state_type device_state;





  typedef boost::shared_ptr< ::ds_hotel_msgs::PwrSwitchDevices_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ds_hotel_msgs::PwrSwitchDevices_<ContainerAllocator> const> ConstPtr;

}; // struct PwrSwitchDevices_

typedef ::ds_hotel_msgs::PwrSwitchDevices_<std::allocator<void> > PwrSwitchDevices;

typedef boost::shared_ptr< ::ds_hotel_msgs::PwrSwitchDevices > PwrSwitchDevicesPtr;
typedef boost::shared_ptr< ::ds_hotel_msgs::PwrSwitchDevices const> PwrSwitchDevicesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ds_hotel_msgs::PwrSwitchDevices_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ds_hotel_msgs::PwrSwitchDevices_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ds_hotel_msgs::PwrSwitchDevices_<ContainerAllocator1> & lhs, const ::ds_hotel_msgs::PwrSwitchDevices_<ContainerAllocator2> & rhs)
{
  return lhs.card_name == rhs.card_name &&
    lhs.device_name == rhs.device_name &&
    lhs.device_state == rhs.device_state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ds_hotel_msgs::PwrSwitchDevices_<ContainerAllocator1> & lhs, const ::ds_hotel_msgs::PwrSwitchDevices_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ds_hotel_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ds_hotel_msgs::PwrSwitchDevices_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ds_hotel_msgs::PwrSwitchDevices_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_hotel_msgs::PwrSwitchDevices_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_hotel_msgs::PwrSwitchDevices_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_hotel_msgs::PwrSwitchDevices_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_hotel_msgs::PwrSwitchDevices_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ds_hotel_msgs::PwrSwitchDevices_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fd6b320329e817c8fd81beba02f2650d";
  }

  static const char* value(const ::ds_hotel_msgs::PwrSwitchDevices_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfd6b320329e817c8ULL;
  static const uint64_t static_value2 = 0xfd81beba02f2650dULL;
};

template<class ContainerAllocator>
struct DataType< ::ds_hotel_msgs::PwrSwitchDevices_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ds_hotel_msgs/PwrSwitchDevices";
  }

  static const char* value(const ::ds_hotel_msgs::PwrSwitchDevices_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ds_hotel_msgs::PwrSwitchDevices_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# does not have headers because it is only used with PwrSwitch.msg\n"
"\n"
"string card_name\n"
"string device_name\n"
"bool device_state\n"
;
  }

  static const char* value(const ::ds_hotel_msgs::PwrSwitchDevices_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ds_hotel_msgs::PwrSwitchDevices_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.card_name);
      stream.next(m.device_name);
      stream.next(m.device_state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PwrSwitchDevices_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ds_hotel_msgs::PwrSwitchDevices_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ds_hotel_msgs::PwrSwitchDevices_<ContainerAllocator>& v)
  {
    s << indent << "card_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.card_name);
    s << indent << "device_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.device_name);
    s << indent << "device_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.device_state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DS_HOTEL_MSGS_MESSAGE_PWRSWITCHDEVICES_H
