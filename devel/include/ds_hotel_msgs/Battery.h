// Generated by gencpp from file ds_hotel_msgs/Battery.msg
// DO NOT EDIT!


#ifndef DS_HOTEL_MSGS_MESSAGE_BATTERY_H
#define DS_HOTEL_MSGS_MESSAGE_BATTERY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <ds_core_msgs/DsHeader.h>

namespace ds_hotel_msgs
{
template <class ContainerAllocator>
struct Battery_
{
  typedef Battery_<ContainerAllocator> Type;

  Battery_()
    : header()
    , ds_header()
    , idnum(0)
    , voltages()
    , temperatures()
    , maxCellVoltage(0.0)
    , minCellVoltage(0.0)
    , maxCellTemp(0)
    , minCellTemp(0)
    , totalVoltage(0.0)
    , switchTemp(0)
    , countFull(0)
    , countCapacity(0)
    , countFreerun(0)
    , countUsed(0)
    , countAvailable(0)
    , balanceEnable(false)
    , balanceGain(0.0)
    , balanceOnsetVoltage(0.0)
    , balanceMaxCurrent(0.0)
    , balanceCommandId(0)
    , charging(false)
    , discharging(false)
    , safetyCode(0)
    , problemLocation(0)
    , numScans(0)
    , overflowCount(0)
    , timeoutCount(0)
    , timeoutLocation(0)
    , uptime(0)
    , fixCount(0)
    , safetyString()
    , interruptProblemLocation()
    , errorStatus(0)
    , capacityCoulombs(0.0)
    , capacityAh(0.0)
    , chargeCoulombs(0.0)
    , chargeAh(0.0)
    , percentFull(0.0)
    , repeatingCommandId(0)  {
    }
  Battery_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , ds_header(_alloc)
    , idnum(0)
    , voltages(_alloc)
    , temperatures(_alloc)
    , maxCellVoltage(0.0)
    , minCellVoltage(0.0)
    , maxCellTemp(0)
    , minCellTemp(0)
    , totalVoltage(0.0)
    , switchTemp(0)
    , countFull(0)
    , countCapacity(0)
    , countFreerun(0)
    , countUsed(0)
    , countAvailable(0)
    , balanceEnable(false)
    , balanceGain(0.0)
    , balanceOnsetVoltage(0.0)
    , balanceMaxCurrent(0.0)
    , balanceCommandId(0)
    , charging(false)
    , discharging(false)
    , safetyCode(0)
    , problemLocation(0)
    , numScans(0)
    , overflowCount(0)
    , timeoutCount(0)
    , timeoutLocation(0)
    , uptime(0)
    , fixCount(0)
    , safetyString(_alloc)
    , interruptProblemLocation(_alloc)
    , errorStatus(0)
    , capacityCoulombs(0.0)
    , capacityAh(0.0)
    , chargeCoulombs(0.0)
    , chargeAh(0.0)
    , percentFull(0.0)
    , repeatingCommandId(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::ds_core_msgs::DsHeader_<ContainerAllocator>  _ds_header_type;
  _ds_header_type ds_header;

   typedef int32_t _idnum_type;
  _idnum_type idnum;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _voltages_type;
  _voltages_type voltages;

   typedef std::vector<uint16_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint16_t>> _temperatures_type;
  _temperatures_type temperatures;

   typedef float _maxCellVoltage_type;
  _maxCellVoltage_type maxCellVoltage;

   typedef float _minCellVoltage_type;
  _minCellVoltage_type minCellVoltage;

   typedef uint16_t _maxCellTemp_type;
  _maxCellTemp_type maxCellTemp;

   typedef uint16_t _minCellTemp_type;
  _minCellTemp_type minCellTemp;

   typedef float _totalVoltage_type;
  _totalVoltage_type totalVoltage;

   typedef uint16_t _switchTemp_type;
  _switchTemp_type switchTemp;

   typedef uint32_t _countFull_type;
  _countFull_type countFull;

   typedef uint32_t _countCapacity_type;
  _countCapacity_type countCapacity;

   typedef uint32_t _countFreerun_type;
  _countFreerun_type countFreerun;

   typedef int32_t _countUsed_type;
  _countUsed_type countUsed;

   typedef int32_t _countAvailable_type;
  _countAvailable_type countAvailable;

   typedef uint8_t _balanceEnable_type;
  _balanceEnable_type balanceEnable;

   typedef double _balanceGain_type;
  _balanceGain_type balanceGain;

   typedef double _balanceOnsetVoltage_type;
  _balanceOnsetVoltage_type balanceOnsetVoltage;

   typedef double _balanceMaxCurrent_type;
  _balanceMaxCurrent_type balanceMaxCurrent;

   typedef uint64_t _balanceCommandId_type;
  _balanceCommandId_type balanceCommandId;

   typedef uint8_t _charging_type;
  _charging_type charging;

   typedef uint8_t _discharging_type;
  _discharging_type discharging;

   typedef int32_t _safetyCode_type;
  _safetyCode_type safetyCode;

   typedef int32_t _problemLocation_type;
  _problemLocation_type problemLocation;

   typedef int32_t _numScans_type;
  _numScans_type numScans;

   typedef int32_t _overflowCount_type;
  _overflowCount_type overflowCount;

   typedef int32_t _timeoutCount_type;
  _timeoutCount_type timeoutCount;

   typedef int32_t _timeoutLocation_type;
  _timeoutLocation_type timeoutLocation;

   typedef int32_t _uptime_type;
  _uptime_type uptime;

   typedef int32_t _fixCount_type;
  _fixCount_type fixCount;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _safetyString_type;
  _safetyString_type safetyString;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _interruptProblemLocation_type;
  _interruptProblemLocation_type interruptProblemLocation;

   typedef uint16_t _errorStatus_type;
  _errorStatus_type errorStatus;

   typedef double _capacityCoulombs_type;
  _capacityCoulombs_type capacityCoulombs;

   typedef double _capacityAh_type;
  _capacityAh_type capacityAh;

   typedef double _chargeCoulombs_type;
  _chargeCoulombs_type chargeCoulombs;

   typedef double _chargeAh_type;
  _chargeAh_type chargeAh;

   typedef double _percentFull_type;
  _percentFull_type percentFull;

   typedef uint64_t _repeatingCommandId_type;
  _repeatingCommandId_type repeatingCommandId;





  typedef boost::shared_ptr< ::ds_hotel_msgs::Battery_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ds_hotel_msgs::Battery_<ContainerAllocator> const> ConstPtr;

}; // struct Battery_

typedef ::ds_hotel_msgs::Battery_<std::allocator<void> > Battery;

typedef boost::shared_ptr< ::ds_hotel_msgs::Battery > BatteryPtr;
typedef boost::shared_ptr< ::ds_hotel_msgs::Battery const> BatteryConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ds_hotel_msgs::Battery_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ds_hotel_msgs::Battery_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ds_hotel_msgs::Battery_<ContainerAllocator1> & lhs, const ::ds_hotel_msgs::Battery_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.ds_header == rhs.ds_header &&
    lhs.idnum == rhs.idnum &&
    lhs.voltages == rhs.voltages &&
    lhs.temperatures == rhs.temperatures &&
    lhs.maxCellVoltage == rhs.maxCellVoltage &&
    lhs.minCellVoltage == rhs.minCellVoltage &&
    lhs.maxCellTemp == rhs.maxCellTemp &&
    lhs.minCellTemp == rhs.minCellTemp &&
    lhs.totalVoltage == rhs.totalVoltage &&
    lhs.switchTemp == rhs.switchTemp &&
    lhs.countFull == rhs.countFull &&
    lhs.countCapacity == rhs.countCapacity &&
    lhs.countFreerun == rhs.countFreerun &&
    lhs.countUsed == rhs.countUsed &&
    lhs.countAvailable == rhs.countAvailable &&
    lhs.balanceEnable == rhs.balanceEnable &&
    lhs.balanceGain == rhs.balanceGain &&
    lhs.balanceOnsetVoltage == rhs.balanceOnsetVoltage &&
    lhs.balanceMaxCurrent == rhs.balanceMaxCurrent &&
    lhs.balanceCommandId == rhs.balanceCommandId &&
    lhs.charging == rhs.charging &&
    lhs.discharging == rhs.discharging &&
    lhs.safetyCode == rhs.safetyCode &&
    lhs.problemLocation == rhs.problemLocation &&
    lhs.numScans == rhs.numScans &&
    lhs.overflowCount == rhs.overflowCount &&
    lhs.timeoutCount == rhs.timeoutCount &&
    lhs.timeoutLocation == rhs.timeoutLocation &&
    lhs.uptime == rhs.uptime &&
    lhs.fixCount == rhs.fixCount &&
    lhs.safetyString == rhs.safetyString &&
    lhs.interruptProblemLocation == rhs.interruptProblemLocation &&
    lhs.errorStatus == rhs.errorStatus &&
    lhs.capacityCoulombs == rhs.capacityCoulombs &&
    lhs.capacityAh == rhs.capacityAh &&
    lhs.chargeCoulombs == rhs.chargeCoulombs &&
    lhs.chargeAh == rhs.chargeAh &&
    lhs.percentFull == rhs.percentFull &&
    lhs.repeatingCommandId == rhs.repeatingCommandId;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ds_hotel_msgs::Battery_<ContainerAllocator1> & lhs, const ::ds_hotel_msgs::Battery_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ds_hotel_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ds_hotel_msgs::Battery_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ds_hotel_msgs::Battery_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_hotel_msgs::Battery_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_hotel_msgs::Battery_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_hotel_msgs::Battery_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_hotel_msgs::Battery_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ds_hotel_msgs::Battery_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1bb7946b3ab6500c9bb6c36fee0dac39";
  }

  static const char* value(const ::ds_hotel_msgs::Battery_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1bb7946b3ab6500cULL;
  static const uint64_t static_value2 = 0x9bb6c36fee0dac39ULL;
};

template<class ContainerAllocator>
struct DataType< ::ds_hotel_msgs::Battery_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ds_hotel_msgs/Battery";
  }

  static const char* value(const ::ds_hotel_msgs::Battery_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ds_hotel_msgs::Battery_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# The standard 2-part DsHeader block\n"
"# This allows both a standard ROS header and DS-specific header blocks\n"
"# See HEADERS.md in ds_core_msgs for details\n"
"std_msgs/Header header\n"
"ds_core_msgs/DsHeader ds_header\n"
"\n"
"int32 idnum\n"
"\n"
"float32[] voltages      #V\n"
"uint16[] temperatures   #deg C\n"
"\n"
"float32 maxCellVoltage\n"
"float32 minCellVoltage\n"
"uint16 maxCellTemp\n"
"uint16 minCellTemp\n"
"\n"
"float32 totalVoltage     # V\n"
"uint16 switchTemp       # deg C\n"
"uint32 countFull        # Raw counts\n"
"uint32 countCapacity    # countCapacity = countUsed + countAvailable\n"
"uint32 countFreerun\n"
"int32 countUsed\n"
"int32 countAvailable\n"
"bool balanceEnable\n"
"float64 balanceGain\n"
"float64 balanceOnsetVoltage\n"
"float64 balanceMaxCurrent\n"
"uint64 balanceCommandId\n"
"\n"
"# Raw Batttery status info\n"
"bool charging\n"
"bool discharging\n"
"int32 safetyCode\n"
"int32 problemLocation\n"
"int32 numScans\n"
"int32 overflowCount\n"
"int32 timeoutCount\n"
"int32 timeoutLocation\n"
"int32 uptime\n"
"int32 fixCount\n"
"string safetyString\n"
"string interruptProblemLocation\n"
"\n"
"# Calculated status info\n"
"uint16 errorStatus\n"
"float64 capacityCoulombs  # Capacity of this battery, in Amp*hours\n"
"float64 capacityAh\n"
"float64 chargeCoulombs    # Charge currently in the battery, in Amp*hours\n"
"float64 chargeAh\n"
"float64 percentFull       # Battery capacity as a percentage\n"
"\n"
"uint64 repeatingCommandId\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: ds_core_msgs/DsHeader\n"
"# This is half our standard header for ds_msgs; see\n"
"# HEADERS.md for details\n"
"\n"
"# This header should ALWAYS be paired with a std_msgs/Header\n"
"# and should ALWAYS reference HEADERS.md.  If you're looking at this\n"
"# file to add headers to a type, you probably want to copy/paste\n"
"# the following block:\n"
"#\n"
"#     # The standard 2-part DsHeader block\n"
"#     # This allows both a standard ROS header and DS-specific header blocks\n"
"#     # See HEADERS.md in ds_core_msgs for details\n"
"#     std_msgs/Header header\n"
"#     ds_core_msgs/DsHeader ds_header\n"
"#\n"
"\n"
"# Time data was received or sent out (i/o time)\n"
"time io_time\n"
"\n"
"# Sensor source UUID\n"
"uint8[16] source_uuid\n"
"\n"
;
  }

  static const char* value(const ::ds_hotel_msgs::Battery_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ds_hotel_msgs::Battery_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.ds_header);
      stream.next(m.idnum);
      stream.next(m.voltages);
      stream.next(m.temperatures);
      stream.next(m.maxCellVoltage);
      stream.next(m.minCellVoltage);
      stream.next(m.maxCellTemp);
      stream.next(m.minCellTemp);
      stream.next(m.totalVoltage);
      stream.next(m.switchTemp);
      stream.next(m.countFull);
      stream.next(m.countCapacity);
      stream.next(m.countFreerun);
      stream.next(m.countUsed);
      stream.next(m.countAvailable);
      stream.next(m.balanceEnable);
      stream.next(m.balanceGain);
      stream.next(m.balanceOnsetVoltage);
      stream.next(m.balanceMaxCurrent);
      stream.next(m.balanceCommandId);
      stream.next(m.charging);
      stream.next(m.discharging);
      stream.next(m.safetyCode);
      stream.next(m.problemLocation);
      stream.next(m.numScans);
      stream.next(m.overflowCount);
      stream.next(m.timeoutCount);
      stream.next(m.timeoutLocation);
      stream.next(m.uptime);
      stream.next(m.fixCount);
      stream.next(m.safetyString);
      stream.next(m.interruptProblemLocation);
      stream.next(m.errorStatus);
      stream.next(m.capacityCoulombs);
      stream.next(m.capacityAh);
      stream.next(m.chargeCoulombs);
      stream.next(m.chargeAh);
      stream.next(m.percentFull);
      stream.next(m.repeatingCommandId);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Battery_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ds_hotel_msgs::Battery_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ds_hotel_msgs::Battery_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "ds_header: ";
    s << std::endl;
    Printer< ::ds_core_msgs::DsHeader_<ContainerAllocator> >::stream(s, indent + "  ", v.ds_header);
    s << indent << "idnum: ";
    Printer<int32_t>::stream(s, indent + "  ", v.idnum);
    s << indent << "voltages[]" << std::endl;
    for (size_t i = 0; i < v.voltages.size(); ++i)
    {
      s << indent << "  voltages[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.voltages[i]);
    }
    s << indent << "temperatures[]" << std::endl;
    for (size_t i = 0; i < v.temperatures.size(); ++i)
    {
      s << indent << "  temperatures[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.temperatures[i]);
    }
    s << indent << "maxCellVoltage: ";
    Printer<float>::stream(s, indent + "  ", v.maxCellVoltage);
    s << indent << "minCellVoltage: ";
    Printer<float>::stream(s, indent + "  ", v.minCellVoltage);
    s << indent << "maxCellTemp: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.maxCellTemp);
    s << indent << "minCellTemp: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.minCellTemp);
    s << indent << "totalVoltage: ";
    Printer<float>::stream(s, indent + "  ", v.totalVoltage);
    s << indent << "switchTemp: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.switchTemp);
    s << indent << "countFull: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.countFull);
    s << indent << "countCapacity: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.countCapacity);
    s << indent << "countFreerun: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.countFreerun);
    s << indent << "countUsed: ";
    Printer<int32_t>::stream(s, indent + "  ", v.countUsed);
    s << indent << "countAvailable: ";
    Printer<int32_t>::stream(s, indent + "  ", v.countAvailable);
    s << indent << "balanceEnable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.balanceEnable);
    s << indent << "balanceGain: ";
    Printer<double>::stream(s, indent + "  ", v.balanceGain);
    s << indent << "balanceOnsetVoltage: ";
    Printer<double>::stream(s, indent + "  ", v.balanceOnsetVoltage);
    s << indent << "balanceMaxCurrent: ";
    Printer<double>::stream(s, indent + "  ", v.balanceMaxCurrent);
    s << indent << "balanceCommandId: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.balanceCommandId);
    s << indent << "charging: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.charging);
    s << indent << "discharging: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.discharging);
    s << indent << "safetyCode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.safetyCode);
    s << indent << "problemLocation: ";
    Printer<int32_t>::stream(s, indent + "  ", v.problemLocation);
    s << indent << "numScans: ";
    Printer<int32_t>::stream(s, indent + "  ", v.numScans);
    s << indent << "overflowCount: ";
    Printer<int32_t>::stream(s, indent + "  ", v.overflowCount);
    s << indent << "timeoutCount: ";
    Printer<int32_t>::stream(s, indent + "  ", v.timeoutCount);
    s << indent << "timeoutLocation: ";
    Printer<int32_t>::stream(s, indent + "  ", v.timeoutLocation);
    s << indent << "uptime: ";
    Printer<int32_t>::stream(s, indent + "  ", v.uptime);
    s << indent << "fixCount: ";
    Printer<int32_t>::stream(s, indent + "  ", v.fixCount);
    s << indent << "safetyString: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.safetyString);
    s << indent << "interruptProblemLocation: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.interruptProblemLocation);
    s << indent << "errorStatus: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.errorStatus);
    s << indent << "capacityCoulombs: ";
    Printer<double>::stream(s, indent + "  ", v.capacityCoulombs);
    s << indent << "capacityAh: ";
    Printer<double>::stream(s, indent + "  ", v.capacityAh);
    s << indent << "chargeCoulombs: ";
    Printer<double>::stream(s, indent + "  ", v.chargeCoulombs);
    s << indent << "chargeAh: ";
    Printer<double>::stream(s, indent + "  ", v.chargeAh);
    s << indent << "percentFull: ";
    Printer<double>::stream(s, indent + "  ", v.percentFull);
    s << indent << "repeatingCommandId: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.repeatingCommandId);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DS_HOTEL_MSGS_MESSAGE_BATTERY_H
