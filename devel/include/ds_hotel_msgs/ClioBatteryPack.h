// Generated by gencpp from file ds_hotel_msgs/ClioBatteryPack.msg
// DO NOT EDIT!


#ifndef DS_HOTEL_MSGS_MESSAGE_CLIOBATTERYPACK_H
#define DS_HOTEL_MSGS_MESSAGE_CLIOBATTERYPACK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ds_hotel_msgs
{
template <class ContainerAllocator>
struct ClioBatteryPack_
{
  typedef ClioBatteryPack_<ContainerAllocator> Type;

  ClioBatteryPack_()
    : temperature(0.0)
    , voltage(0.0)
    , current(0.0)
    , avgCurrent(0.0)
    , maxError(0)
    , relativeSOC(0.0)
    , absoluteSOC(0.0)
    , remainingCapacity(0.0)
    , fullCapacity(0.0)
    , status(0)
    , countCycle(0.0)
    , capacityDesign(0.0)
    , dateManufacture()
    , serialNumber(0)
    , highCellVoltage(0.0)
    , mid1CellVoltage(0.0)
    , mid2CellVoltage(0.0)
    , lowCellVoltage(0.0)  {
    }
  ClioBatteryPack_(const ContainerAllocator& _alloc)
    : temperature(0.0)
    , voltage(0.0)
    , current(0.0)
    , avgCurrent(0.0)
    , maxError(0)
    , relativeSOC(0.0)
    , absoluteSOC(0.0)
    , remainingCapacity(0.0)
    , fullCapacity(0.0)
    , status(0)
    , countCycle(0.0)
    , capacityDesign(0.0)
    , dateManufacture(_alloc)
    , serialNumber(0)
    , highCellVoltage(0.0)
    , mid1CellVoltage(0.0)
    , mid2CellVoltage(0.0)
    , lowCellVoltage(0.0)  {
  (void)_alloc;
    }



   typedef float _temperature_type;
  _temperature_type temperature;

   typedef float _voltage_type;
  _voltage_type voltage;

   typedef float _current_type;
  _current_type current;

   typedef float _avgCurrent_type;
  _avgCurrent_type avgCurrent;

   typedef uint16_t _maxError_type;
  _maxError_type maxError;

   typedef float _relativeSOC_type;
  _relativeSOC_type relativeSOC;

   typedef float _absoluteSOC_type;
  _absoluteSOC_type absoluteSOC;

   typedef float _remainingCapacity_type;
  _remainingCapacity_type remainingCapacity;

   typedef float _fullCapacity_type;
  _fullCapacity_type fullCapacity;

   typedef uint16_t _status_type;
  _status_type status;

   typedef float _countCycle_type;
  _countCycle_type countCycle;

   typedef float _capacityDesign_type;
  _capacityDesign_type capacityDesign;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _dateManufacture_type;
  _dateManufacture_type dateManufacture;

   typedef uint16_t _serialNumber_type;
  _serialNumber_type serialNumber;

   typedef float _highCellVoltage_type;
  _highCellVoltage_type highCellVoltage;

   typedef float _mid1CellVoltage_type;
  _mid1CellVoltage_type mid1CellVoltage;

   typedef float _mid2CellVoltage_type;
  _mid2CellVoltage_type mid2CellVoltage;

   typedef float _lowCellVoltage_type;
  _lowCellVoltage_type lowCellVoltage;





  typedef boost::shared_ptr< ::ds_hotel_msgs::ClioBatteryPack_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ds_hotel_msgs::ClioBatteryPack_<ContainerAllocator> const> ConstPtr;

}; // struct ClioBatteryPack_

typedef ::ds_hotel_msgs::ClioBatteryPack_<std::allocator<void> > ClioBatteryPack;

typedef boost::shared_ptr< ::ds_hotel_msgs::ClioBatteryPack > ClioBatteryPackPtr;
typedef boost::shared_ptr< ::ds_hotel_msgs::ClioBatteryPack const> ClioBatteryPackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ds_hotel_msgs::ClioBatteryPack_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ds_hotel_msgs::ClioBatteryPack_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ds_hotel_msgs::ClioBatteryPack_<ContainerAllocator1> & lhs, const ::ds_hotel_msgs::ClioBatteryPack_<ContainerAllocator2> & rhs)
{
  return lhs.temperature == rhs.temperature &&
    lhs.voltage == rhs.voltage &&
    lhs.current == rhs.current &&
    lhs.avgCurrent == rhs.avgCurrent &&
    lhs.maxError == rhs.maxError &&
    lhs.relativeSOC == rhs.relativeSOC &&
    lhs.absoluteSOC == rhs.absoluteSOC &&
    lhs.remainingCapacity == rhs.remainingCapacity &&
    lhs.fullCapacity == rhs.fullCapacity &&
    lhs.status == rhs.status &&
    lhs.countCycle == rhs.countCycle &&
    lhs.capacityDesign == rhs.capacityDesign &&
    lhs.dateManufacture == rhs.dateManufacture &&
    lhs.serialNumber == rhs.serialNumber &&
    lhs.highCellVoltage == rhs.highCellVoltage &&
    lhs.mid1CellVoltage == rhs.mid1CellVoltage &&
    lhs.mid2CellVoltage == rhs.mid2CellVoltage &&
    lhs.lowCellVoltage == rhs.lowCellVoltage;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ds_hotel_msgs::ClioBatteryPack_<ContainerAllocator1> & lhs, const ::ds_hotel_msgs::ClioBatteryPack_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ds_hotel_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ds_hotel_msgs::ClioBatteryPack_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ds_hotel_msgs::ClioBatteryPack_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_hotel_msgs::ClioBatteryPack_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_hotel_msgs::ClioBatteryPack_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_hotel_msgs::ClioBatteryPack_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_hotel_msgs::ClioBatteryPack_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ds_hotel_msgs::ClioBatteryPack_<ContainerAllocator> >
{
  static const char* value()
  {
    return "81159155732e0b252a571879fe1e4c2e";
  }

  static const char* value(const ::ds_hotel_msgs::ClioBatteryPack_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x81159155732e0b25ULL;
  static const uint64_t static_value2 = 0x2a571879fe1e4c2eULL;
};

template<class ContainerAllocator>
struct DataType< ::ds_hotel_msgs::ClioBatteryPack_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ds_hotel_msgs/ClioBatteryPack";
  }

  static const char* value(const ::ds_hotel_msgs::ClioBatteryPack_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ds_hotel_msgs::ClioBatteryPack_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Per-pack\n"
"float32 temperature # deg C\n"
"float32 voltage # V\n"
"float32 current\n"
"float32 avgCurrent\n"
"uint16 maxError\n"
"float32 relativeSOC # percent\n"
"float32 absoluteSOC # percent\n"
"float32 remainingCapacity # Remaining capacity in Amp*hours\n"
"float32 fullCapacity # Predicted capacity when fully charged in Amp*hours\n"
"uint16 status\n"
"float32 countCycle\n"
"float32 capacityDesign\n"
"string dateManufacture\n"
"uint16 serialNumber\n"
"# high / mid / low refer to the arrangement of cells within \n"
"# the pack, NOT to which has the highest voltage\n"
"float32 highCellVoltage\n"
"float32 mid1CellVoltage\n"
"float32 mid2CellVoltage\n"
"float32 lowCellVoltage\n"
"\n"
;
  }

  static const char* value(const ::ds_hotel_msgs::ClioBatteryPack_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ds_hotel_msgs::ClioBatteryPack_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.temperature);
      stream.next(m.voltage);
      stream.next(m.current);
      stream.next(m.avgCurrent);
      stream.next(m.maxError);
      stream.next(m.relativeSOC);
      stream.next(m.absoluteSOC);
      stream.next(m.remainingCapacity);
      stream.next(m.fullCapacity);
      stream.next(m.status);
      stream.next(m.countCycle);
      stream.next(m.capacityDesign);
      stream.next(m.dateManufacture);
      stream.next(m.serialNumber);
      stream.next(m.highCellVoltage);
      stream.next(m.mid1CellVoltage);
      stream.next(m.mid2CellVoltage);
      stream.next(m.lowCellVoltage);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ClioBatteryPack_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ds_hotel_msgs::ClioBatteryPack_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ds_hotel_msgs::ClioBatteryPack_<ContainerAllocator>& v)
  {
    s << indent << "temperature: ";
    Printer<float>::stream(s, indent + "  ", v.temperature);
    s << indent << "voltage: ";
    Printer<float>::stream(s, indent + "  ", v.voltage);
    s << indent << "current: ";
    Printer<float>::stream(s, indent + "  ", v.current);
    s << indent << "avgCurrent: ";
    Printer<float>::stream(s, indent + "  ", v.avgCurrent);
    s << indent << "maxError: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.maxError);
    s << indent << "relativeSOC: ";
    Printer<float>::stream(s, indent + "  ", v.relativeSOC);
    s << indent << "absoluteSOC: ";
    Printer<float>::stream(s, indent + "  ", v.absoluteSOC);
    s << indent << "remainingCapacity: ";
    Printer<float>::stream(s, indent + "  ", v.remainingCapacity);
    s << indent << "fullCapacity: ";
    Printer<float>::stream(s, indent + "  ", v.fullCapacity);
    s << indent << "status: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.status);
    s << indent << "countCycle: ";
    Printer<float>::stream(s, indent + "  ", v.countCycle);
    s << indent << "capacityDesign: ";
    Printer<float>::stream(s, indent + "  ", v.capacityDesign);
    s << indent << "dateManufacture: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.dateManufacture);
    s << indent << "serialNumber: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.serialNumber);
    s << indent << "highCellVoltage: ";
    Printer<float>::stream(s, indent + "  ", v.highCellVoltage);
    s << indent << "mid1CellVoltage: ";
    Printer<float>::stream(s, indent + "  ", v.mid1CellVoltage);
    s << indent << "mid2CellVoltage: ";
    Printer<float>::stream(s, indent + "  ", v.mid2CellVoltage);
    s << indent << "lowCellVoltage: ";
    Printer<float>::stream(s, indent + "  ", v.lowCellVoltage);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DS_HOTEL_MSGS_MESSAGE_CLIOBATTERYPACK_H
