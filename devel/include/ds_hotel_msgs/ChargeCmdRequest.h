// Generated by gencpp from file ds_hotel_msgs/ChargeCmdRequest.msg
// DO NOT EDIT!


#ifndef DS_HOTEL_MSGS_MESSAGE_CHARGECMDREQUEST_H
#define DS_HOTEL_MSGS_MESSAGE_CHARGECMDREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ds_hotel_msgs
{
template <class ContainerAllocator>
struct ChargeCmdRequest_
{
  typedef ChargeCmdRequest_<ContainerAllocator> Type;

  ChargeCmdRequest_()
    : reset()
    , frequency(0)
    , shunt_value()  {
      reset.assign(0);

      shunt_value.assign(0.0);
  }
  ChargeCmdRequest_(const ContainerAllocator& _alloc)
    : reset()
    , frequency(0)
    , shunt_value()  {
  (void)_alloc;
      reset.assign(0);

      shunt_value.assign(0.0);
  }



   typedef boost::array<uint8_t, 4>  _reset_type;
  _reset_type reset;

   typedef uint8_t _frequency_type;
  _frequency_type frequency;

   typedef boost::array<float, 4>  _shunt_value_type;
  _shunt_value_type shunt_value;





  typedef boost::shared_ptr< ::ds_hotel_msgs::ChargeCmdRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ds_hotel_msgs::ChargeCmdRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ChargeCmdRequest_

typedef ::ds_hotel_msgs::ChargeCmdRequest_<std::allocator<void> > ChargeCmdRequest;

typedef boost::shared_ptr< ::ds_hotel_msgs::ChargeCmdRequest > ChargeCmdRequestPtr;
typedef boost::shared_ptr< ::ds_hotel_msgs::ChargeCmdRequest const> ChargeCmdRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ds_hotel_msgs::ChargeCmdRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ds_hotel_msgs::ChargeCmdRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ds_hotel_msgs::ChargeCmdRequest_<ContainerAllocator1> & lhs, const ::ds_hotel_msgs::ChargeCmdRequest_<ContainerAllocator2> & rhs)
{
  return lhs.reset == rhs.reset &&
    lhs.frequency == rhs.frequency &&
    lhs.shunt_value == rhs.shunt_value;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ds_hotel_msgs::ChargeCmdRequest_<ContainerAllocator1> & lhs, const ::ds_hotel_msgs::ChargeCmdRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ds_hotel_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ds_hotel_msgs::ChargeCmdRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ds_hotel_msgs::ChargeCmdRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_hotel_msgs::ChargeCmdRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_hotel_msgs::ChargeCmdRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_hotel_msgs::ChargeCmdRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_hotel_msgs::ChargeCmdRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ds_hotel_msgs::ChargeCmdRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "15730f13fe8e497251c6f4f15cd2c40d";
  }

  static const char* value(const ::ds_hotel_msgs::ChargeCmdRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x15730f13fe8e4972ULL;
  static const uint64_t static_value2 = 0x51c6f4f15cd2c40dULL;
};

template<class ContainerAllocator>
struct DataType< ::ds_hotel_msgs::ChargeCmdRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ds_hotel_msgs/ChargeCmdRequest";
  }

  static const char* value(const ::ds_hotel_msgs::ChargeCmdRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ds_hotel_msgs::ChargeCmdRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8[4] reset\n"
"uint8 frequency\n"
"float32[4] shunt_value\n"
;
  }

  static const char* value(const ::ds_hotel_msgs::ChargeCmdRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ds_hotel_msgs::ChargeCmdRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.reset);
      stream.next(m.frequency);
      stream.next(m.shunt_value);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ChargeCmdRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ds_hotel_msgs::ChargeCmdRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ds_hotel_msgs::ChargeCmdRequest_<ContainerAllocator>& v)
  {
    s << indent << "reset[]" << std::endl;
    for (size_t i = 0; i < v.reset.size(); ++i)
    {
      s << indent << "  reset[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.reset[i]);
    }
    s << indent << "frequency: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.frequency);
    s << indent << "shunt_value[]" << std::endl;
    for (size_t i = 0; i < v.shunt_value.size(); ++i)
    {
      s << indent << "  shunt_value[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.shunt_value[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DS_HOTEL_MSGS_MESSAGE_CHARGECMDREQUEST_H
