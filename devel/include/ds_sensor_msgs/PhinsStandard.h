// Generated by gencpp from file ds_sensor_msgs/PhinsStandard.msg
// DO NOT EDIT!


#ifndef DS_SENSOR_MSGS_MESSAGE_PHINSSTANDARD_H
#define DS_SENSOR_MSGS_MESSAGE_PHINSSTANDARD_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <ds_core_msgs/DsHeader.h>

namespace ds_sensor_msgs
{
template <class ContainerAllocator>
struct PhinsStandard_
{
  typedef PhinsStandard_<ContainerAllocator> Type;

  PhinsStandard_()
    : header()
    , ds_header()
    , heading_deg(0.0)
    , pitch_deg(0.0)
    , roll_deg(0.0)
    , latitude_deg(0.0)
    , longitude_deg(0.0)
    , altitude_m(0.0)
    , east_speed_m_s(0.0)
    , north_speed_m_s(0.0)
    , up_speed_m_s(0.0)
    , lat_utm_zone(0)
    , lon_utm_zone(0)
    , utm_east_pos_m(0.0)
    , utm_north_pos_m(0.0)
    , utm_altitude_m(0.0)
    , surge_m(0.0)
    , sway_m(0.0)
    , heave_m(0.0)
    , lat_std_dev_m(0.0)
    , lon_std_dev_m(0.0)
    , altitude_std_dev_m(0.0)
    , east_speed_std_dev_m_s(0.0)
    , north_speed_std_dev_m_s(0.0)
    , up_speed_std_dev_m_s(0.0)
    , time_pos(0.0)
    , algorithm_status_lsb()
    , algorithm_status_msb()
    , system_status_lsb()
    , system_status_msb()
    , user_status()  {
    }
  PhinsStandard_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , ds_header(_alloc)
    , heading_deg(0.0)
    , pitch_deg(0.0)
    , roll_deg(0.0)
    , latitude_deg(0.0)
    , longitude_deg(0.0)
    , altitude_m(0.0)
    , east_speed_m_s(0.0)
    , north_speed_m_s(0.0)
    , up_speed_m_s(0.0)
    , lat_utm_zone(0)
    , lon_utm_zone(0)
    , utm_east_pos_m(0.0)
    , utm_north_pos_m(0.0)
    , utm_altitude_m(0.0)
    , surge_m(0.0)
    , sway_m(0.0)
    , heave_m(0.0)
    , lat_std_dev_m(0.0)
    , lon_std_dev_m(0.0)
    , altitude_std_dev_m(0.0)
    , east_speed_std_dev_m_s(0.0)
    , north_speed_std_dev_m_s(0.0)
    , up_speed_std_dev_m_s(0.0)
    , time_pos(0.0)
    , algorithm_status_lsb(_alloc)
    , algorithm_status_msb(_alloc)
    , system_status_lsb(_alloc)
    , system_status_msb(_alloc)
    , user_status(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::ds_core_msgs::DsHeader_<ContainerAllocator>  _ds_header_type;
  _ds_header_type ds_header;

   typedef double _heading_deg_type;
  _heading_deg_type heading_deg;

   typedef double _pitch_deg_type;
  _pitch_deg_type pitch_deg;

   typedef double _roll_deg_type;
  _roll_deg_type roll_deg;

   typedef double _latitude_deg_type;
  _latitude_deg_type latitude_deg;

   typedef double _longitude_deg_type;
  _longitude_deg_type longitude_deg;

   typedef double _altitude_m_type;
  _altitude_m_type altitude_m;

   typedef double _east_speed_m_s_type;
  _east_speed_m_s_type east_speed_m_s;

   typedef double _north_speed_m_s_type;
  _north_speed_m_s_type north_speed_m_s;

   typedef double _up_speed_m_s_type;
  _up_speed_m_s_type up_speed_m_s;

   typedef uint8_t _lat_utm_zone_type;
  _lat_utm_zone_type lat_utm_zone;

   typedef uint8_t _lon_utm_zone_type;
  _lon_utm_zone_type lon_utm_zone;

   typedef double _utm_east_pos_m_type;
  _utm_east_pos_m_type utm_east_pos_m;

   typedef double _utm_north_pos_m_type;
  _utm_north_pos_m_type utm_north_pos_m;

   typedef double _utm_altitude_m_type;
  _utm_altitude_m_type utm_altitude_m;

   typedef double _surge_m_type;
  _surge_m_type surge_m;

   typedef double _sway_m_type;
  _sway_m_type sway_m;

   typedef double _heave_m_type;
  _heave_m_type heave_m;

   typedef double _lat_std_dev_m_type;
  _lat_std_dev_m_type lat_std_dev_m;

   typedef double _lon_std_dev_m_type;
  _lon_std_dev_m_type lon_std_dev_m;

   typedef double _altitude_std_dev_m_type;
  _altitude_std_dev_m_type altitude_std_dev_m;

   typedef double _east_speed_std_dev_m_s_type;
  _east_speed_std_dev_m_s_type east_speed_std_dev_m_s;

   typedef double _north_speed_std_dev_m_s_type;
  _north_speed_std_dev_m_s_type north_speed_std_dev_m_s;

   typedef double _up_speed_std_dev_m_s_type;
  _up_speed_std_dev_m_s_type up_speed_std_dev_m_s;

   typedef double _time_pos_type;
  _time_pos_type time_pos;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _algorithm_status_lsb_type;
  _algorithm_status_lsb_type algorithm_status_lsb;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _algorithm_status_msb_type;
  _algorithm_status_msb_type algorithm_status_msb;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _system_status_lsb_type;
  _system_status_lsb_type system_status_lsb;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _system_status_msb_type;
  _system_status_msb_type system_status_msb;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _user_status_type;
  _user_status_type user_status;





  typedef boost::shared_ptr< ::ds_sensor_msgs::PhinsStandard_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ds_sensor_msgs::PhinsStandard_<ContainerAllocator> const> ConstPtr;

}; // struct PhinsStandard_

typedef ::ds_sensor_msgs::PhinsStandard_<std::allocator<void> > PhinsStandard;

typedef boost::shared_ptr< ::ds_sensor_msgs::PhinsStandard > PhinsStandardPtr;
typedef boost::shared_ptr< ::ds_sensor_msgs::PhinsStandard const> PhinsStandardConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ds_sensor_msgs::PhinsStandard_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ds_sensor_msgs::PhinsStandard_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ds_sensor_msgs::PhinsStandard_<ContainerAllocator1> & lhs, const ::ds_sensor_msgs::PhinsStandard_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.ds_header == rhs.ds_header &&
    lhs.heading_deg == rhs.heading_deg &&
    lhs.pitch_deg == rhs.pitch_deg &&
    lhs.roll_deg == rhs.roll_deg &&
    lhs.latitude_deg == rhs.latitude_deg &&
    lhs.longitude_deg == rhs.longitude_deg &&
    lhs.altitude_m == rhs.altitude_m &&
    lhs.east_speed_m_s == rhs.east_speed_m_s &&
    lhs.north_speed_m_s == rhs.north_speed_m_s &&
    lhs.up_speed_m_s == rhs.up_speed_m_s &&
    lhs.lat_utm_zone == rhs.lat_utm_zone &&
    lhs.lon_utm_zone == rhs.lon_utm_zone &&
    lhs.utm_east_pos_m == rhs.utm_east_pos_m &&
    lhs.utm_north_pos_m == rhs.utm_north_pos_m &&
    lhs.utm_altitude_m == rhs.utm_altitude_m &&
    lhs.surge_m == rhs.surge_m &&
    lhs.sway_m == rhs.sway_m &&
    lhs.heave_m == rhs.heave_m &&
    lhs.lat_std_dev_m == rhs.lat_std_dev_m &&
    lhs.lon_std_dev_m == rhs.lon_std_dev_m &&
    lhs.altitude_std_dev_m == rhs.altitude_std_dev_m &&
    lhs.east_speed_std_dev_m_s == rhs.east_speed_std_dev_m_s &&
    lhs.north_speed_std_dev_m_s == rhs.north_speed_std_dev_m_s &&
    lhs.up_speed_std_dev_m_s == rhs.up_speed_std_dev_m_s &&
    lhs.time_pos == rhs.time_pos &&
    lhs.algorithm_status_lsb == rhs.algorithm_status_lsb &&
    lhs.algorithm_status_msb == rhs.algorithm_status_msb &&
    lhs.system_status_lsb == rhs.system_status_lsb &&
    lhs.system_status_msb == rhs.system_status_msb &&
    lhs.user_status == rhs.user_status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ds_sensor_msgs::PhinsStandard_<ContainerAllocator1> & lhs, const ::ds_sensor_msgs::PhinsStandard_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ds_sensor_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ds_sensor_msgs::PhinsStandard_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ds_sensor_msgs::PhinsStandard_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_sensor_msgs::PhinsStandard_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_sensor_msgs::PhinsStandard_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_sensor_msgs::PhinsStandard_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_sensor_msgs::PhinsStandard_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ds_sensor_msgs::PhinsStandard_<ContainerAllocator> >
{
  static const char* value()
  {
    return "32de3f33ca7134cd5f6a8542f7811c53";
  }

  static const char* value(const ::ds_sensor_msgs::PhinsStandard_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x32de3f33ca7134cdULL;
  static const uint64_t static_value2 = 0x5f6a8542f7811c53ULL;
};

template<class ContainerAllocator>
struct DataType< ::ds_sensor_msgs::PhinsStandard_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ds_sensor_msgs/PhinsStandard";
  }

  static const char* value(const ::ds_sensor_msgs::PhinsStandard_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ds_sensor_msgs::PhinsStandard_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# The standard 2-part DsHeader block\n"
"# This allows both a standard ROS header and DS-specific header blocks\n"
"# See HEADERS.md in ds_core_msgs for details\n"
"std_msgs/Header header\n"
"ds_core_msgs/DsHeader ds_header\n"
"\n"
"# Attiutde in DEGREES\n"
"float64 heading_deg\n"
"float64 pitch_deg\n"
"float64 roll_deg\n"
"\n"
"# Position in DEGREES\n"
"float64 latitude_deg\n"
"float64 longitude_deg\n"
"\n"
"# Altitude in meters\n"
"float64 altitude_m\n"
"\n"
"# Speed in meters/second\n"
"float64 east_speed_m_s\n"
"float64 north_speed_m_s\n"
"float64 up_speed_m_s\n"
"\n"
"# UTM zone information\n"
"uint8 lat_utm_zone           # This is a char\n"
"uint8 lon_utm_zone\n"
"float64 utm_east_pos_m\n"
"float64 utm_north_pos_m\n"
"float64 utm_altitude_m\n"
"\n"
"float64 surge_m\n"
"float64 sway_m\n"
"float64 heave_m\n"
"\n"
"float64 lat_std_dev_m\n"
"float64 lon_std_dev_m\n"
"float64 altitude_std_dev_m\n"
"\n"
"float64 east_speed_std_dev_m_s\n"
"float64 north_speed_std_dev_m_s\n"
"float64 up_speed_std_dev_m_s\n"
"\n"
"float64 time_pos\n"
"\n"
"string algorithm_status_lsb\n"
"string algorithm_status_msb\n"
"\n"
"string system_status_lsb\n"
"string system_status_msb\n"
"\n"
"string user_status\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: ds_core_msgs/DsHeader\n"
"# This is half our standard header for ds_msgs; see\n"
"# HEADERS.md for details\n"
"\n"
"# This header should ALWAYS be paired with a std_msgs/Header\n"
"# and should ALWAYS reference HEADERS.md.  If you're looking at this\n"
"# file to add headers to a type, you probably want to copy/paste\n"
"# the following block:\n"
"#\n"
"#     # The standard 2-part DsHeader block\n"
"#     # This allows both a standard ROS header and DS-specific header blocks\n"
"#     # See HEADERS.md in ds_core_msgs for details\n"
"#     std_msgs/Header header\n"
"#     ds_core_msgs/DsHeader ds_header\n"
"#\n"
"\n"
"# Time data was received or sent out (i/o time)\n"
"time io_time\n"
"\n"
"# Sensor source UUID\n"
"uint8[16] source_uuid\n"
"\n"
;
  }

  static const char* value(const ::ds_sensor_msgs::PhinsStandard_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ds_sensor_msgs::PhinsStandard_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.ds_header);
      stream.next(m.heading_deg);
      stream.next(m.pitch_deg);
      stream.next(m.roll_deg);
      stream.next(m.latitude_deg);
      stream.next(m.longitude_deg);
      stream.next(m.altitude_m);
      stream.next(m.east_speed_m_s);
      stream.next(m.north_speed_m_s);
      stream.next(m.up_speed_m_s);
      stream.next(m.lat_utm_zone);
      stream.next(m.lon_utm_zone);
      stream.next(m.utm_east_pos_m);
      stream.next(m.utm_north_pos_m);
      stream.next(m.utm_altitude_m);
      stream.next(m.surge_m);
      stream.next(m.sway_m);
      stream.next(m.heave_m);
      stream.next(m.lat_std_dev_m);
      stream.next(m.lon_std_dev_m);
      stream.next(m.altitude_std_dev_m);
      stream.next(m.east_speed_std_dev_m_s);
      stream.next(m.north_speed_std_dev_m_s);
      stream.next(m.up_speed_std_dev_m_s);
      stream.next(m.time_pos);
      stream.next(m.algorithm_status_lsb);
      stream.next(m.algorithm_status_msb);
      stream.next(m.system_status_lsb);
      stream.next(m.system_status_msb);
      stream.next(m.user_status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PhinsStandard_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ds_sensor_msgs::PhinsStandard_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ds_sensor_msgs::PhinsStandard_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "ds_header: ";
    s << std::endl;
    Printer< ::ds_core_msgs::DsHeader_<ContainerAllocator> >::stream(s, indent + "  ", v.ds_header);
    s << indent << "heading_deg: ";
    Printer<double>::stream(s, indent + "  ", v.heading_deg);
    s << indent << "pitch_deg: ";
    Printer<double>::stream(s, indent + "  ", v.pitch_deg);
    s << indent << "roll_deg: ";
    Printer<double>::stream(s, indent + "  ", v.roll_deg);
    s << indent << "latitude_deg: ";
    Printer<double>::stream(s, indent + "  ", v.latitude_deg);
    s << indent << "longitude_deg: ";
    Printer<double>::stream(s, indent + "  ", v.longitude_deg);
    s << indent << "altitude_m: ";
    Printer<double>::stream(s, indent + "  ", v.altitude_m);
    s << indent << "east_speed_m_s: ";
    Printer<double>::stream(s, indent + "  ", v.east_speed_m_s);
    s << indent << "north_speed_m_s: ";
    Printer<double>::stream(s, indent + "  ", v.north_speed_m_s);
    s << indent << "up_speed_m_s: ";
    Printer<double>::stream(s, indent + "  ", v.up_speed_m_s);
    s << indent << "lat_utm_zone: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.lat_utm_zone);
    s << indent << "lon_utm_zone: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.lon_utm_zone);
    s << indent << "utm_east_pos_m: ";
    Printer<double>::stream(s, indent + "  ", v.utm_east_pos_m);
    s << indent << "utm_north_pos_m: ";
    Printer<double>::stream(s, indent + "  ", v.utm_north_pos_m);
    s << indent << "utm_altitude_m: ";
    Printer<double>::stream(s, indent + "  ", v.utm_altitude_m);
    s << indent << "surge_m: ";
    Printer<double>::stream(s, indent + "  ", v.surge_m);
    s << indent << "sway_m: ";
    Printer<double>::stream(s, indent + "  ", v.sway_m);
    s << indent << "heave_m: ";
    Printer<double>::stream(s, indent + "  ", v.heave_m);
    s << indent << "lat_std_dev_m: ";
    Printer<double>::stream(s, indent + "  ", v.lat_std_dev_m);
    s << indent << "lon_std_dev_m: ";
    Printer<double>::stream(s, indent + "  ", v.lon_std_dev_m);
    s << indent << "altitude_std_dev_m: ";
    Printer<double>::stream(s, indent + "  ", v.altitude_std_dev_m);
    s << indent << "east_speed_std_dev_m_s: ";
    Printer<double>::stream(s, indent + "  ", v.east_speed_std_dev_m_s);
    s << indent << "north_speed_std_dev_m_s: ";
    Printer<double>::stream(s, indent + "  ", v.north_speed_std_dev_m_s);
    s << indent << "up_speed_std_dev_m_s: ";
    Printer<double>::stream(s, indent + "  ", v.up_speed_std_dev_m_s);
    s << indent << "time_pos: ";
    Printer<double>::stream(s, indent + "  ", v.time_pos);
    s << indent << "algorithm_status_lsb: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.algorithm_status_lsb);
    s << indent << "algorithm_status_msb: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.algorithm_status_msb);
    s << indent << "system_status_lsb: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.system_status_lsb);
    s << indent << "system_status_msb: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.system_status_msb);
    s << indent << "user_status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.user_status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DS_SENSOR_MSGS_MESSAGE_PHINSSTANDARD_H
