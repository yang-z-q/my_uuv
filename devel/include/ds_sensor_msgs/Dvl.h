// Generated by gencpp from file ds_sensor_msgs/Dvl.msg
// DO NOT EDIT!


#ifndef DS_SENSOR_MSGS_MESSAGE_DVL_H
#define DS_SENSOR_MSGS_MESSAGE_DVL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <ds_core_msgs/DsHeader.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>

namespace ds_sensor_msgs
{
template <class ContainerAllocator>
struct Dvl_
{
  typedef Dvl_<ContainerAllocator> Type;

  Dvl_()
    : header()
    , ds_header()
    , dvl_time(0.0)
    , velocity()
    , velocity_covar()
    , altitude(0.0)
    , course_gnd(0.0)
    , speed_gnd(0.0)
    , num_good_beams(0)
    , speed_sound(0.0)
    , beam_unit_vec()
    , range()
    , range_covar()
    , beam_quality()
    , raw_velocity()
    , raw_velocity_covar()
    , velocity_mode(0)
    , coordinate_mode(0)
    , dvl_type(0)  {
      velocity_covar.assign(0.0);

      range.assign(0.0);

      range_covar.assign(0.0);

      beam_quality.assign(0.0);

      raw_velocity.assign(0.0);

      raw_velocity_covar.assign(0.0);
  }
  Dvl_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , ds_header(_alloc)
    , dvl_time(0.0)
    , velocity(_alloc)
    , velocity_covar()
    , altitude(0.0)
    , course_gnd(0.0)
    , speed_gnd(0.0)
    , num_good_beams(0)
    , speed_sound(0.0)
    , beam_unit_vec()
    , range()
    , range_covar()
    , beam_quality()
    , raw_velocity()
    , raw_velocity_covar()
    , velocity_mode(0)
    , coordinate_mode(0)
    , dvl_type(0)  {
  (void)_alloc;
      velocity_covar.assign(0.0);

      beam_unit_vec.assign( ::geometry_msgs::Vector3_<ContainerAllocator> (_alloc));

      range.assign(0.0);

      range_covar.assign(0.0);

      beam_quality.assign(0.0);

      raw_velocity.assign(0.0);

      raw_velocity_covar.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::ds_core_msgs::DsHeader_<ContainerAllocator>  _ds_header_type;
  _ds_header_type ds_header;

   typedef double _dvl_time_type;
  _dvl_time_type dvl_time;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _velocity_type;
  _velocity_type velocity;

   typedef boost::array<double, 9>  _velocity_covar_type;
  _velocity_covar_type velocity_covar;

   typedef double _altitude_type;
  _altitude_type altitude;

   typedef double _course_gnd_type;
  _course_gnd_type course_gnd;

   typedef double _speed_gnd_type;
  _speed_gnd_type speed_gnd;

   typedef uint8_t _num_good_beams_type;
  _num_good_beams_type num_good_beams;

   typedef float _speed_sound_type;
  _speed_sound_type speed_sound;

   typedef boost::array< ::geometry_msgs::Vector3_<ContainerAllocator> , 4>  _beam_unit_vec_type;
  _beam_unit_vec_type beam_unit_vec;

   typedef boost::array<double, 4>  _range_type;
  _range_type range;

   typedef boost::array<float, 4>  _range_covar_type;
  _range_covar_type range_covar;

   typedef boost::array<float, 4>  _beam_quality_type;
  _beam_quality_type beam_quality;

   typedef boost::array<float, 4>  _raw_velocity_type;
  _raw_velocity_type raw_velocity;

   typedef boost::array<float, 4>  _raw_velocity_covar_type;
  _raw_velocity_covar_type raw_velocity_covar;

   typedef uint8_t _velocity_mode_type;
  _velocity_mode_type velocity_mode;

   typedef uint8_t _coordinate_mode_type;
  _coordinate_mode_type coordinate_mode;

   typedef uint8_t _dvl_type_type;
  _dvl_type_type dvl_type;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(DVL_MODE_BOTTOM)
  #undef DVL_MODE_BOTTOM
#endif
#if defined(_WIN32) && defined(DVL_MODE_WATER)
  #undef DVL_MODE_WATER
#endif
#if defined(_WIN32) && defined(DVL_COORD_BEAM)
  #undef DVL_COORD_BEAM
#endif
#if defined(_WIN32) && defined(DVL_COORD_INSTRUMENT)
  #undef DVL_COORD_INSTRUMENT
#endif
#if defined(_WIN32) && defined(DVL_COORD_SHIP)
  #undef DVL_COORD_SHIP
#endif
#if defined(_WIN32) && defined(DVL_COORD_EARTH)
  #undef DVL_COORD_EARTH
#endif
#if defined(_WIN32) && defined(DVL_TYPE_PISTON)
  #undef DVL_TYPE_PISTON
#endif
#if defined(_WIN32) && defined(DVL_TYPE_PHASED_ARRAY)
  #undef DVL_TYPE_PHASED_ARRAY
#endif

  enum {
    DVL_MODE_BOTTOM = 1u,
    DVL_MODE_WATER = 2u,
    DVL_COORD_BEAM = 0u,
    DVL_COORD_INSTRUMENT = 1u,
    DVL_COORD_SHIP = 2u,
    DVL_COORD_EARTH = 3u,
    DVL_TYPE_PISTON = 0u,
    DVL_TYPE_PHASED_ARRAY = 1u,
  };


  typedef boost::shared_ptr< ::ds_sensor_msgs::Dvl_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ds_sensor_msgs::Dvl_<ContainerAllocator> const> ConstPtr;

}; // struct Dvl_

typedef ::ds_sensor_msgs::Dvl_<std::allocator<void> > Dvl;

typedef boost::shared_ptr< ::ds_sensor_msgs::Dvl > DvlPtr;
typedef boost::shared_ptr< ::ds_sensor_msgs::Dvl const> DvlConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ds_sensor_msgs::Dvl_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ds_sensor_msgs::Dvl_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ds_sensor_msgs::Dvl_<ContainerAllocator1> & lhs, const ::ds_sensor_msgs::Dvl_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.ds_header == rhs.ds_header &&
    lhs.dvl_time == rhs.dvl_time &&
    lhs.velocity == rhs.velocity &&
    lhs.velocity_covar == rhs.velocity_covar &&
    lhs.altitude == rhs.altitude &&
    lhs.course_gnd == rhs.course_gnd &&
    lhs.speed_gnd == rhs.speed_gnd &&
    lhs.num_good_beams == rhs.num_good_beams &&
    lhs.speed_sound == rhs.speed_sound &&
    lhs.beam_unit_vec == rhs.beam_unit_vec &&
    lhs.range == rhs.range &&
    lhs.range_covar == rhs.range_covar &&
    lhs.beam_quality == rhs.beam_quality &&
    lhs.raw_velocity == rhs.raw_velocity &&
    lhs.raw_velocity_covar == rhs.raw_velocity_covar &&
    lhs.velocity_mode == rhs.velocity_mode &&
    lhs.coordinate_mode == rhs.coordinate_mode &&
    lhs.dvl_type == rhs.dvl_type;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ds_sensor_msgs::Dvl_<ContainerAllocator1> & lhs, const ::ds_sensor_msgs::Dvl_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ds_sensor_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ds_sensor_msgs::Dvl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ds_sensor_msgs::Dvl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_sensor_msgs::Dvl_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_sensor_msgs::Dvl_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_sensor_msgs::Dvl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_sensor_msgs::Dvl_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ds_sensor_msgs::Dvl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2a3b47c6dbf3a5cd6beadbe10a71f170";
  }

  static const char* value(const ::ds_sensor_msgs::Dvl_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2a3b47c6dbf3a5cdULL;
  static const uint64_t static_value2 = 0x6beadbe10a71f170ULL;
};

template<class ContainerAllocator>
struct DataType< ::ds_sensor_msgs::Dvl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ds_sensor_msgs/Dvl";
  }

  static const char* value(const ::ds_sensor_msgs::Dvl_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ds_sensor_msgs::Dvl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ENUM: Velocity mode\n"
"uint8 DVL_MODE_BOTTOM=1\n"
"uint8 DVL_MODE_WATER=2\n"
"\n"
"# ENUM: Coordinates system \n"
"uint8 DVL_COORD_BEAM=0\n"
"uint8 DVL_COORD_INSTRUMENT=1\n"
"uint8 DVL_COORD_SHIP=2\n"
"uint8 DVL_COORD_EARTH=3\n"
"\n"
"# ENUM: DVL Type\n"
"\n"
"# Standard array with one piston transducer for each beam\n"
"# If you have 4-5 individual disks on your DVL, use this one.\n"
"# Examples include Sonardyne Syrinx, Nortek DVLs, and RDI Workhorse\n"
"uint8 DVL_TYPE_PISTON=0\n"
"\n"
"# Newfangled phased-array DVL.  If you have one giant disk with complicated stuff on it,\n"
"# probably this one.\n"
"# Examples include newer RDI DVLs such as pathfinder, pioneer, and tasman.\n"
"uint8 DVL_TYPE_PHASED_ARRAY=1\n"
"\n"
"# The standard 2-part DsHeader block\n"
"# This allows both a standard ROS header and DS-specific header blocks\n"
"# See HEADERS.md in ds_core_msgs for details\n"
"std_msgs/Header header\n"
"ds_core_msgs/DsHeader ds_header\n"
"float64 dvl_time\n"
"\n"
"#####################################################################\n"
"# Velocities [m/s]\n"
"geometry_msgs/Vector3 velocity\n"
"\n"
"# row-major, xyz axes.  Set to \"-1\" if not known.\n"
"float64[9] velocity_covar\n"
"\n"
"float64 altitude    # Average of all good beam ranges: altitude = sum(range) / num_good_beams\n"
"float64 course_gnd  # Calculated from xy velocities: course_gnd = atan2(velocity.y, velocity.x)\n"
"float64 speed_gnd   # Calculated from xy velocities: speed_gnd = sqrt(velocity.x^2 + velocity.y^2)\n"
"\n"
"uint8 num_good_beams\n"
"\n"
"\n"
"# Speed of sound (m/s) used by the DVL\n"
"float32 speed_sound\n"
"\n"
"#####################################################################\n"
"# Raw data\n"
"geometry_msgs/Vector3[4] beam_unit_vec  # Geometry of each of the 4 beams\n"
"\n"
"# RDI sends ALTITUDE and calls it RANGE.  We convert back and send actual RANGES, such that\n"
"# beam_unit_vec[i] * range[i] is the point where the beam hits the seafloor.  If you want\n"
"# the raw uncorrected altitudes, look at the specific datagram message for your DVL (e.g., pd0, pd5, etc).\n"
"# If you want altitude, simply multiply by sqrt(3)/2.\n"
"float64[4] range\n"
"float32[4] range_covar\n"
"\n"
"# A beam quality flag; exactly which flag is used for what is DVL-specific (for now)\n"
"float32[4] beam_quality\n"
"\n"
"# Raw velocities [m/s].  Will be beam 1,2,3,4 velocity\n"
"# in beam coordinates; or x,y,z,error in other modes\n"
"float32[4] raw_velocity\n"
"# Covariance, as always, should be -1 if unknown\n"
"float32[4] raw_velocity_covar\n"
"\n"
"# Velocity mode (see above)\n"
"uint8 velocity_mode\n"
"\n"
"# Coordinate system mode (see above)\n"
"uint8 coordinate_mode\n"
"\n"
"# Type of DVL array employed (see above).  Necessary when\n"
"# deciding how to apply sound velocity corrections\n"
"uint8 dvl_type\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: ds_core_msgs/DsHeader\n"
"# This is half our standard header for ds_msgs; see\n"
"# HEADERS.md for details\n"
"\n"
"# This header should ALWAYS be paired with a std_msgs/Header\n"
"# and should ALWAYS reference HEADERS.md.  If you're looking at this\n"
"# file to add headers to a type, you probably want to copy/paste\n"
"# the following block:\n"
"#\n"
"#     # The standard 2-part DsHeader block\n"
"#     # This allows both a standard ROS header and DS-specific header blocks\n"
"#     # See HEADERS.md in ds_core_msgs for details\n"
"#     std_msgs/Header header\n"
"#     ds_core_msgs/DsHeader ds_header\n"
"#\n"
"\n"
"# Time data was received or sent out (i/o time)\n"
"time io_time\n"
"\n"
"# Sensor source UUID\n"
"uint8[16] source_uuid\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::ds_sensor_msgs::Dvl_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ds_sensor_msgs::Dvl_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.ds_header);
      stream.next(m.dvl_time);
      stream.next(m.velocity);
      stream.next(m.velocity_covar);
      stream.next(m.altitude);
      stream.next(m.course_gnd);
      stream.next(m.speed_gnd);
      stream.next(m.num_good_beams);
      stream.next(m.speed_sound);
      stream.next(m.beam_unit_vec);
      stream.next(m.range);
      stream.next(m.range_covar);
      stream.next(m.beam_quality);
      stream.next(m.raw_velocity);
      stream.next(m.raw_velocity_covar);
      stream.next(m.velocity_mode);
      stream.next(m.coordinate_mode);
      stream.next(m.dvl_type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Dvl_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ds_sensor_msgs::Dvl_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ds_sensor_msgs::Dvl_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "ds_header: ";
    s << std::endl;
    Printer< ::ds_core_msgs::DsHeader_<ContainerAllocator> >::stream(s, indent + "  ", v.ds_header);
    s << indent << "dvl_time: ";
    Printer<double>::stream(s, indent + "  ", v.dvl_time);
    s << indent << "velocity: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.velocity);
    s << indent << "velocity_covar[]" << std::endl;
    for (size_t i = 0; i < v.velocity_covar.size(); ++i)
    {
      s << indent << "  velocity_covar[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.velocity_covar[i]);
    }
    s << indent << "altitude: ";
    Printer<double>::stream(s, indent + "  ", v.altitude);
    s << indent << "course_gnd: ";
    Printer<double>::stream(s, indent + "  ", v.course_gnd);
    s << indent << "speed_gnd: ";
    Printer<double>::stream(s, indent + "  ", v.speed_gnd);
    s << indent << "num_good_beams: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.num_good_beams);
    s << indent << "speed_sound: ";
    Printer<float>::stream(s, indent + "  ", v.speed_sound);
    s << indent << "beam_unit_vec[]" << std::endl;
    for (size_t i = 0; i < v.beam_unit_vec.size(); ++i)
    {
      s << indent << "  beam_unit_vec[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "    ", v.beam_unit_vec[i]);
    }
    s << indent << "range[]" << std::endl;
    for (size_t i = 0; i < v.range.size(); ++i)
    {
      s << indent << "  range[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.range[i]);
    }
    s << indent << "range_covar[]" << std::endl;
    for (size_t i = 0; i < v.range_covar.size(); ++i)
    {
      s << indent << "  range_covar[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.range_covar[i]);
    }
    s << indent << "beam_quality[]" << std::endl;
    for (size_t i = 0; i < v.beam_quality.size(); ++i)
    {
      s << indent << "  beam_quality[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.beam_quality[i]);
    }
    s << indent << "raw_velocity[]" << std::endl;
    for (size_t i = 0; i < v.raw_velocity.size(); ++i)
    {
      s << indent << "  raw_velocity[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.raw_velocity[i]);
    }
    s << indent << "raw_velocity_covar[]" << std::endl;
    for (size_t i = 0; i < v.raw_velocity_covar.size(); ++i)
    {
      s << indent << "  raw_velocity_covar[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.raw_velocity_covar[i]);
    }
    s << indent << "velocity_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.velocity_mode);
    s << indent << "coordinate_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.coordinate_mode);
    s << indent << "dvl_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.dvl_type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DS_SENSOR_MSGS_MESSAGE_DVL_H
