// Generated by gencpp from file ds_sensor_msgs/Adcp.msg
// DO NOT EDIT!


#ifndef DS_SENSOR_MSGS_MESSAGE_ADCP_H
#define DS_SENSOR_MSGS_MESSAGE_ADCP_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <ds_core_msgs/DsHeader.h>
#include <geometry_msgs/Vector3.h>
#include <ds_sensor_msgs/WaterCurrentProfile.h>

namespace ds_sensor_msgs
{
template <class ContainerAllocator>
struct Adcp_
{
  typedef Adcp_<ContainerAllocator> Type;

  Adcp_()
    : header()
    , ds_header()
    , coordinate_mode(0)
    , adcp_type(0)
    , cells(0)
    , cell_depth(0)
    , bin0_distance(0.0)
    , beam_unit_vec()
    , vel_bin_beams()  {
    }
  Adcp_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , ds_header(_alloc)
    , coordinate_mode(0)
    , adcp_type(0)
    , cells(0)
    , cell_depth(0)
    , bin0_distance(0.0)
    , beam_unit_vec()
    , vel_bin_beams(_alloc)  {
  (void)_alloc;
      beam_unit_vec.assign( ::geometry_msgs::Vector3_<ContainerAllocator> (_alloc));
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::ds_core_msgs::DsHeader_<ContainerAllocator>  _ds_header_type;
  _ds_header_type ds_header;

   typedef uint8_t _coordinate_mode_type;
  _coordinate_mode_type coordinate_mode;

   typedef uint8_t _adcp_type_type;
  _adcp_type_type adcp_type;

   typedef uint8_t _cells_type;
  _cells_type cells;

   typedef uint16_t _cell_depth_type;
  _cell_depth_type cell_depth;

   typedef float _bin0_distance_type;
  _bin0_distance_type bin0_distance;

   typedef boost::array< ::geometry_msgs::Vector3_<ContainerAllocator> , 4>  _beam_unit_vec_type;
  _beam_unit_vec_type beam_unit_vec;

   typedef std::vector< ::ds_sensor_msgs::WaterCurrentProfile_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::ds_sensor_msgs::WaterCurrentProfile_<ContainerAllocator> >> _vel_bin_beams_type;
  _vel_bin_beams_type vel_bin_beams;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(ADCP_COORD_BEAM)
  #undef ADCP_COORD_BEAM
#endif
#if defined(_WIN32) && defined(ADCP_COORD_INSTRUMENT)
  #undef ADCP_COORD_INSTRUMENT
#endif
#if defined(_WIN32) && defined(ADCP_COORD_SHIP)
  #undef ADCP_COORD_SHIP
#endif
#if defined(_WIN32) && defined(ADCP_COORD_EARTH)
  #undef ADCP_COORD_EARTH
#endif
#if defined(_WIN32) && defined(ADCP_TYPE_PISTON)
  #undef ADCP_TYPE_PISTON
#endif
#if defined(_WIN32) && defined(ADCP_TYPE_PHASED_ARRAY)
  #undef ADCP_TYPE_PHASED_ARRAY
#endif

  enum {
    ADCP_COORD_BEAM = 0u,
    ADCP_COORD_INSTRUMENT = 1u,
    ADCP_COORD_SHIP = 2u,
    ADCP_COORD_EARTH = 3u,
    ADCP_TYPE_PISTON = 0u,
    ADCP_TYPE_PHASED_ARRAY = 1u,
  };


  typedef boost::shared_ptr< ::ds_sensor_msgs::Adcp_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ds_sensor_msgs::Adcp_<ContainerAllocator> const> ConstPtr;

}; // struct Adcp_

typedef ::ds_sensor_msgs::Adcp_<std::allocator<void> > Adcp;

typedef boost::shared_ptr< ::ds_sensor_msgs::Adcp > AdcpPtr;
typedef boost::shared_ptr< ::ds_sensor_msgs::Adcp const> AdcpConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ds_sensor_msgs::Adcp_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ds_sensor_msgs::Adcp_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ds_sensor_msgs::Adcp_<ContainerAllocator1> & lhs, const ::ds_sensor_msgs::Adcp_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.ds_header == rhs.ds_header &&
    lhs.coordinate_mode == rhs.coordinate_mode &&
    lhs.adcp_type == rhs.adcp_type &&
    lhs.cells == rhs.cells &&
    lhs.cell_depth == rhs.cell_depth &&
    lhs.bin0_distance == rhs.bin0_distance &&
    lhs.beam_unit_vec == rhs.beam_unit_vec &&
    lhs.vel_bin_beams == rhs.vel_bin_beams;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ds_sensor_msgs::Adcp_<ContainerAllocator1> & lhs, const ::ds_sensor_msgs::Adcp_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ds_sensor_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ds_sensor_msgs::Adcp_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ds_sensor_msgs::Adcp_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_sensor_msgs::Adcp_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_sensor_msgs::Adcp_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_sensor_msgs::Adcp_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_sensor_msgs::Adcp_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ds_sensor_msgs::Adcp_<ContainerAllocator> >
{
  static const char* value()
  {
    return "20cf0cc6667acb5c9186d027facfbfc5";
  }

  static const char* value(const ::ds_sensor_msgs::Adcp_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x20cf0cc6667acb5cULL;
  static const uint64_t static_value2 = 0x9186d027facfbfc5ULL;
};

template<class ContainerAllocator>
struct DataType< ::ds_sensor_msgs::Adcp_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ds_sensor_msgs/Adcp";
  }

  static const char* value(const ::ds_sensor_msgs::Adcp_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ds_sensor_msgs::Adcp_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#sub message of Dvl.msg for water current profiling funcionality\n"
"#	similar to Ranges3D.msg which is only available in bottom-track\n"
"#	Adcp.msg will only be available when in water-track mode\n"
"\n"
"# The standard 2-part DsHeader block\n"
"# This allows both a standard ROS header and DS-specific header blocks\n"
"# See HEADERS.md in ds_core_msgs for details\n"
"std_msgs/Header header\n"
"ds_core_msgs/DsHeader ds_header\n"
"\n"
"# ENUM: Coordinates system \n"
"uint8 ADCP_COORD_BEAM=0\n"
"uint8 ADCP_COORD_INSTRUMENT=1\n"
"uint8 ADCP_COORD_SHIP=2\n"
"uint8 ADCP_COORD_EARTH=3\n"
"\n"
"\n"
"# ENUM: ADCP Type\n"
"\n"
"# Standard array with one piston transducer for each beam\n"
"# If you have 4-5 individual disks on your DVL, use this one.\n"
"# Examples include Sonardyne Syrinx, Nortek DVLs, and RDI Workhorse\n"
"uint8 ADCP_TYPE_PISTON=0\n"
"\n"
"# Newfangled phased-array DVL.  If you have one giant disk with complicated stuff on it,\n"
"# probably this one.\n"
"# Examples include newer RDI DVLs such as pathfinder, pioneer, and tasman.\n"
"uint8 ADCP_TYPE_PHASED_ARRAY=1\n"
"#####################################################################################################\n"
"\n"
"\n"
"# Coordinate system mode (see above)\n"
"uint8 coordinate_mode\n"
"\n"
"# Type of DVL array employed (see above).  Necessary when\n"
"# deciding how to apply sound velocity corrections\n"
"uint8 adcp_type\n"
"\n"
"#num bins \n"
"uint8 cells\n"
"\n"
"#length of each depth bin [m]\n"
"uint16 cell_depth\n"
"\n"
"#Distance to middle of first depth bin [m]\n"
"float32 bin0_distance\n"
"\n"
"# Raw data (unit vectors of each beam that show geometry of each beam relative to instrument)\n"
"geometry_msgs/Vector3[4] beam_unit_vec  # Geometry of each of the 4 beams\n"
"\n"
"#Each element of vel_bin_beams array will correspond to a water 'bin' containing ocean current velocity information depending on coordinate system\n"
"WaterCurrentProfile[] vel_bin_beams\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: ds_core_msgs/DsHeader\n"
"# This is half our standard header for ds_msgs; see\n"
"# HEADERS.md for details\n"
"\n"
"# This header should ALWAYS be paired with a std_msgs/Header\n"
"# and should ALWAYS reference HEADERS.md.  If you're looking at this\n"
"# file to add headers to a type, you probably want to copy/paste\n"
"# the following block:\n"
"#\n"
"#     # The standard 2-part DsHeader block\n"
"#     # This allows both a standard ROS header and DS-specific header blocks\n"
"#     # See HEADERS.md in ds_core_msgs for details\n"
"#     std_msgs/Header header\n"
"#     ds_core_msgs/DsHeader ds_header\n"
"#\n"
"\n"
"# Time data was received or sent out (i/o time)\n"
"time io_time\n"
"\n"
"# Sensor source UUID\n"
"uint8[16] source_uuid\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: ds_sensor_msgs/WaterCurrentProfile\n"
"#Message format for Water Current Velocity Information at each depth bin\n"
"\n"
"\n"
"#if set to beam: the size of this velocity_bin_beam array is 4 (x,y,z velocity in each bin relative to each individual beam)\n"
"#if set to instrument,ship, earth: the size of this velocity_bin_beam array is 1 (x,y,z velocity in each bin relative to instrument frame)\n"
"\n"
"geometry_msgs/Vector3[] velocity_bin_beam\n"
"\n"
"\n"
"\n"
"\n"
"#Intensity at each bin IN [dB]\n"
"#uint32[] bin_intensity\n"
"\n"
"#Correlation Factor --> [0,255]\n"
"#uint16[] bin_correlation\n"
;
  }

  static const char* value(const ::ds_sensor_msgs::Adcp_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ds_sensor_msgs::Adcp_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.ds_header);
      stream.next(m.coordinate_mode);
      stream.next(m.adcp_type);
      stream.next(m.cells);
      stream.next(m.cell_depth);
      stream.next(m.bin0_distance);
      stream.next(m.beam_unit_vec);
      stream.next(m.vel_bin_beams);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Adcp_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ds_sensor_msgs::Adcp_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ds_sensor_msgs::Adcp_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "ds_header: ";
    s << std::endl;
    Printer< ::ds_core_msgs::DsHeader_<ContainerAllocator> >::stream(s, indent + "  ", v.ds_header);
    s << indent << "coordinate_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.coordinate_mode);
    s << indent << "adcp_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.adcp_type);
    s << indent << "cells: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cells);
    s << indent << "cell_depth: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.cell_depth);
    s << indent << "bin0_distance: ";
    Printer<float>::stream(s, indent + "  ", v.bin0_distance);
    s << indent << "beam_unit_vec[]" << std::endl;
    for (size_t i = 0; i < v.beam_unit_vec.size(); ++i)
    {
      s << indent << "  beam_unit_vec[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "    ", v.beam_unit_vec[i]);
    }
    s << indent << "vel_bin_beams[]" << std::endl;
    for (size_t i = 0; i < v.vel_bin_beams.size(); ++i)
    {
      s << indent << "  vel_bin_beams[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ds_sensor_msgs::WaterCurrentProfile_<ContainerAllocator> >::stream(s, indent + "    ", v.vel_bin_beams[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DS_SENSOR_MSGS_MESSAGE_ADCP_H
