// Generated by gencpp from file ds_sensor_msgs/UbloxSatellite.msg
// DO NOT EDIT!


#ifndef DS_SENSOR_MSGS_MESSAGE_UBLOXSATELLITE_H
#define DS_SENSOR_MSGS_MESSAGE_UBLOXSATELLITE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ds_sensor_msgs
{
template <class ContainerAllocator>
struct UbloxSatellite_
{
  typedef UbloxSatellite_<ContainerAllocator> Type;

  UbloxSatellite_()
    : gnss_id()
    , sat_id()
    , carrier_noise(0.0)
    , pseudorange_residual(0.0)
    , elevation(0.0)
    , azimuth(0.0)
    , quality_indicator(0)
    , health(0)
    , differential_available(false)
    , pseudorange_smoothed(false)
    , oribt_source(0)
    , ephAvail(false)
    , almAvail(false)
    , anoAvail(false)
    , aopAvail(false)
    , sbasCorrUsed(false)
    , rtcmCorrUsed(false)
    , slasCorrUsed(false)
    , pseudorange_corrections_applied(false)
    , carrier_range_corrections_applied(false)
    , doppler_corrections_applied(false)  {
    }
  UbloxSatellite_(const ContainerAllocator& _alloc)
    : gnss_id(_alloc)
    , sat_id(_alloc)
    , carrier_noise(0.0)
    , pseudorange_residual(0.0)
    , elevation(0.0)
    , azimuth(0.0)
    , quality_indicator(0)
    , health(0)
    , differential_available(false)
    , pseudorange_smoothed(false)
    , oribt_source(0)
    , ephAvail(false)
    , almAvail(false)
    , anoAvail(false)
    , aopAvail(false)
    , sbasCorrUsed(false)
    , rtcmCorrUsed(false)
    , slasCorrUsed(false)
    , pseudorange_corrections_applied(false)
    , carrier_range_corrections_applied(false)
    , doppler_corrections_applied(false)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _gnss_id_type;
  _gnss_id_type gnss_id;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _sat_id_type;
  _sat_id_type sat_id;

   typedef float _carrier_noise_type;
  _carrier_noise_type carrier_noise;

   typedef float _pseudorange_residual_type;
  _pseudorange_residual_type pseudorange_residual;

   typedef float _elevation_type;
  _elevation_type elevation;

   typedef float _azimuth_type;
  _azimuth_type azimuth;

   typedef uint8_t _quality_indicator_type;
  _quality_indicator_type quality_indicator;

   typedef uint8_t _health_type;
  _health_type health;

   typedef uint8_t _differential_available_type;
  _differential_available_type differential_available;

   typedef uint8_t _pseudorange_smoothed_type;
  _pseudorange_smoothed_type pseudorange_smoothed;

   typedef uint8_t _oribt_source_type;
  _oribt_source_type oribt_source;

   typedef uint8_t _ephAvail_type;
  _ephAvail_type ephAvail;

   typedef uint8_t _almAvail_type;
  _almAvail_type almAvail;

   typedef uint8_t _anoAvail_type;
  _anoAvail_type anoAvail;

   typedef uint8_t _aopAvail_type;
  _aopAvail_type aopAvail;

   typedef uint8_t _sbasCorrUsed_type;
  _sbasCorrUsed_type sbasCorrUsed;

   typedef uint8_t _rtcmCorrUsed_type;
  _rtcmCorrUsed_type rtcmCorrUsed;

   typedef uint8_t _slasCorrUsed_type;
  _slasCorrUsed_type slasCorrUsed;

   typedef uint8_t _pseudorange_corrections_applied_type;
  _pseudorange_corrections_applied_type pseudorange_corrections_applied;

   typedef uint8_t _carrier_range_corrections_applied_type;
  _carrier_range_corrections_applied_type carrier_range_corrections_applied;

   typedef uint8_t _doppler_corrections_applied_type;
  _doppler_corrections_applied_type doppler_corrections_applied;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(QUALITY_NOSIGNAL)
  #undef QUALITY_NOSIGNAL
#endif
#if defined(_WIN32) && defined(QUALITY_SEARCHING)
  #undef QUALITY_SEARCHING
#endif
#if defined(_WIN32) && defined(QUALITY_ACQUIRED)
  #undef QUALITY_ACQUIRED
#endif
#if defined(_WIN32) && defined(QUALITY_UNUSABLE)
  #undef QUALITY_UNUSABLE
#endif
#if defined(_WIN32) && defined(QUALITY_CODELOCKED)
  #undef QUALITY_CODELOCKED
#endif
#if defined(_WIN32) && defined(QUALITY_CODECARRIERTIME_LOCKED_5)
  #undef QUALITY_CODECARRIERTIME_LOCKED_5
#endif
#if defined(_WIN32) && defined(QUALITY_CODECARRIERTIME_LOCKED_6)
  #undef QUALITY_CODECARRIERTIME_LOCKED_6
#endif
#if defined(_WIN32) && defined(QUALITY_CODECARRIERTIME_LOCKED_7)
  #undef QUALITY_CODECARRIERTIME_LOCKED_7
#endif
#if defined(_WIN32) && defined(HEALTH_UNKNOWN)
  #undef HEALTH_UNKNOWN
#endif
#if defined(_WIN32) && defined(HEALTH_HEALTHY)
  #undef HEALTH_HEALTHY
#endif
#if defined(_WIN32) && defined(HEALTH_UNHEALTH)
  #undef HEALTH_UNHEALTH
#endif
#if defined(_WIN32) && defined(ORBIT_SOURCE_NONE)
  #undef ORBIT_SOURCE_NONE
#endif
#if defined(_WIN32) && defined(ORBIT_SOURCE_EPHEMERIS)
  #undef ORBIT_SOURCE_EPHEMERIS
#endif
#if defined(_WIN32) && defined(ORBIT_SOURCE_ALMANAC)
  #undef ORBIT_SOURCE_ALMANAC
#endif
#if defined(_WIN32) && defined(ORBIT_SOURCE_ASSISTNOW_OFFLINE)
  #undef ORBIT_SOURCE_ASSISTNOW_OFFLINE
#endif
#if defined(_WIN32) && defined(ORBIT_SOURCE_ASSISTNOW_AUTONOMOUS)
  #undef ORBIT_SOURCE_ASSISTNOW_AUTONOMOUS
#endif
#if defined(_WIN32) && defined(ORBIT_SOURCE_OTHER5)
  #undef ORBIT_SOURCE_OTHER5
#endif
#if defined(_WIN32) && defined(ORBIT_SOURCE_OTHER6)
  #undef ORBIT_SOURCE_OTHER6
#endif
#if defined(_WIN32) && defined(ORBIT_SOURCE_OTHER7)
  #undef ORBIT_SOURCE_OTHER7
#endif

  enum {
    QUALITY_NOSIGNAL = 0u,
    QUALITY_SEARCHING = 1u,
    QUALITY_ACQUIRED = 2u,
    QUALITY_UNUSABLE = 3u,
    QUALITY_CODELOCKED = 4u,
    QUALITY_CODECARRIERTIME_LOCKED_5 = 5u,
    QUALITY_CODECARRIERTIME_LOCKED_6 = 6u,
    QUALITY_CODECARRIERTIME_LOCKED_7 = 7u,
    HEALTH_UNKNOWN = 0u,
    HEALTH_HEALTHY = 1u,
    HEALTH_UNHEALTH = 2u,
    ORBIT_SOURCE_NONE = 0u,
    ORBIT_SOURCE_EPHEMERIS = 1u,
    ORBIT_SOURCE_ALMANAC = 2u,
    ORBIT_SOURCE_ASSISTNOW_OFFLINE = 3u,
    ORBIT_SOURCE_ASSISTNOW_AUTONOMOUS = 4u,
    ORBIT_SOURCE_OTHER5 = 5u,
    ORBIT_SOURCE_OTHER6 = 6u,
    ORBIT_SOURCE_OTHER7 = 7u,
  };


  typedef boost::shared_ptr< ::ds_sensor_msgs::UbloxSatellite_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ds_sensor_msgs::UbloxSatellite_<ContainerAllocator> const> ConstPtr;

}; // struct UbloxSatellite_

typedef ::ds_sensor_msgs::UbloxSatellite_<std::allocator<void> > UbloxSatellite;

typedef boost::shared_ptr< ::ds_sensor_msgs::UbloxSatellite > UbloxSatellitePtr;
typedef boost::shared_ptr< ::ds_sensor_msgs::UbloxSatellite const> UbloxSatelliteConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ds_sensor_msgs::UbloxSatellite_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ds_sensor_msgs::UbloxSatellite_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ds_sensor_msgs::UbloxSatellite_<ContainerAllocator1> & lhs, const ::ds_sensor_msgs::UbloxSatellite_<ContainerAllocator2> & rhs)
{
  return lhs.gnss_id == rhs.gnss_id &&
    lhs.sat_id == rhs.sat_id &&
    lhs.carrier_noise == rhs.carrier_noise &&
    lhs.pseudorange_residual == rhs.pseudorange_residual &&
    lhs.elevation == rhs.elevation &&
    lhs.azimuth == rhs.azimuth &&
    lhs.quality_indicator == rhs.quality_indicator &&
    lhs.health == rhs.health &&
    lhs.differential_available == rhs.differential_available &&
    lhs.pseudorange_smoothed == rhs.pseudorange_smoothed &&
    lhs.oribt_source == rhs.oribt_source &&
    lhs.ephAvail == rhs.ephAvail &&
    lhs.almAvail == rhs.almAvail &&
    lhs.anoAvail == rhs.anoAvail &&
    lhs.aopAvail == rhs.aopAvail &&
    lhs.sbasCorrUsed == rhs.sbasCorrUsed &&
    lhs.rtcmCorrUsed == rhs.rtcmCorrUsed &&
    lhs.slasCorrUsed == rhs.slasCorrUsed &&
    lhs.pseudorange_corrections_applied == rhs.pseudorange_corrections_applied &&
    lhs.carrier_range_corrections_applied == rhs.carrier_range_corrections_applied &&
    lhs.doppler_corrections_applied == rhs.doppler_corrections_applied;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ds_sensor_msgs::UbloxSatellite_<ContainerAllocator1> & lhs, const ::ds_sensor_msgs::UbloxSatellite_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ds_sensor_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ds_sensor_msgs::UbloxSatellite_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ds_sensor_msgs::UbloxSatellite_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_sensor_msgs::UbloxSatellite_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_sensor_msgs::UbloxSatellite_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_sensor_msgs::UbloxSatellite_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_sensor_msgs::UbloxSatellite_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ds_sensor_msgs::UbloxSatellite_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dcd15a1e7e6552a1c2760bd13af47bb2";
  }

  static const char* value(const ::ds_sensor_msgs::UbloxSatellite_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdcd15a1e7e6552a1ULL;
  static const uint64_t static_value2 = 0xc2760bd13af47bb2ULL;
};

template<class ContainerAllocator>
struct DataType< ::ds_sensor_msgs::UbloxSatellite_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ds_sensor_msgs/UbloxSatellite";
  }

  static const char* value(const ::ds_sensor_msgs::UbloxSatellite_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ds_sensor_msgs::UbloxSatellite_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# A string identifying which GNSS system is in use (e.g., GPS, BeiDou, GLONASS, etc)\n"
"string gnss_id\n"
"\n"
"# The ID of the specific satellite that broadcast the signal.  Includes\n"
"# a letter indicating the service.  Example: GPS satellite #4 would be G4.\n"
"# IDs:\n"
"# G: GPS (US system)\n"
"# S: SBAS (Satellite Based Augmentation System, so WAAS, EGNOS, SDCM, GAGAN, etc)\n"
"# E: Galileo (European system)\n"
"# B: BeiDou (Chinese system)\n"
"# Q: QZSS (Japanese SBAS that also transmits GPS-style timing signals)\n"
"# R: GLONASS (Russian system)\n"
"string sat_id\n"
"\n"
"# Carrier-to-noise-density ratio (dBHz)\n"
"float32 carrier_noise\n"
"\n"
"# Pseudorange residual, in meters\n"
"float32 pseudorange_residual\n"
"\n"
"# Satellite location, in degrees\n"
"float32 elevation\n"
"float32 azimuth\n"
"\n"
"# Quality indicator\n"
"uint8 quality_indicator\n"
"uint8 QUALITY_NOSIGNAL = 0\n"
"uint8 QUALITY_SEARCHING = 1\n"
"uint8 QUALITY_ACQUIRED = 2\n"
"uint8 QUALITY_UNUSABLE = 3\n"
"uint8 QUALITY_CODELOCKED = 4\n"
"uint8 QUALITY_CODECARRIERTIME_LOCKED_5 = 5\n"
"uint8 QUALITY_CODECARRIERTIME_LOCKED_6 = 6\n"
"uint8 QUALITY_CODECARRIERTIME_LOCKED_7 = 7\n"
"\n"
"# flags\n"
"uint8 health\n"
"uint8 HEALTH_UNKNOWN = 0\n"
"uint8 HEALTH_HEALTHY = 1\n"
"uint8 HEALTH_UNHEALTH = 2\n"
"\n"
"bool differential_available\n"
"bool pseudorange_smoothed\n"
"\n"
"uint8 oribt_source\n"
"uint8 ORBIT_SOURCE_NONE = 0\n"
"uint8 ORBIT_SOURCE_EPHEMERIS = 1\n"
"uint8 ORBIT_SOURCE_ALMANAC = 2\n"
"uint8 ORBIT_SOURCE_ASSISTNOW_OFFLINE = 3\n"
"uint8 ORBIT_SOURCE_ASSISTNOW_AUTONOMOUS = 4\n"
"uint8 ORBIT_SOURCE_OTHER5 = 5\n"
"uint8 ORBIT_SOURCE_OTHER6 = 6\n"
"uint8 ORBIT_SOURCE_OTHER7 = 7\n"
"\n"
"bool ephAvail\n"
"bool almAvail\n"
"bool anoAvail\n"
"bool aopAvail\n"
"bool sbasCorrUsed\n"
"bool rtcmCorrUsed\n"
"bool slasCorrUsed\n"
"bool pseudorange_corrections_applied\n"
"bool carrier_range_corrections_applied\n"
"bool doppler_corrections_applied\n"
;
  }

  static const char* value(const ::ds_sensor_msgs::UbloxSatellite_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ds_sensor_msgs::UbloxSatellite_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.gnss_id);
      stream.next(m.sat_id);
      stream.next(m.carrier_noise);
      stream.next(m.pseudorange_residual);
      stream.next(m.elevation);
      stream.next(m.azimuth);
      stream.next(m.quality_indicator);
      stream.next(m.health);
      stream.next(m.differential_available);
      stream.next(m.pseudorange_smoothed);
      stream.next(m.oribt_source);
      stream.next(m.ephAvail);
      stream.next(m.almAvail);
      stream.next(m.anoAvail);
      stream.next(m.aopAvail);
      stream.next(m.sbasCorrUsed);
      stream.next(m.rtcmCorrUsed);
      stream.next(m.slasCorrUsed);
      stream.next(m.pseudorange_corrections_applied);
      stream.next(m.carrier_range_corrections_applied);
      stream.next(m.doppler_corrections_applied);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct UbloxSatellite_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ds_sensor_msgs::UbloxSatellite_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ds_sensor_msgs::UbloxSatellite_<ContainerAllocator>& v)
  {
    s << indent << "gnss_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.gnss_id);
    s << indent << "sat_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.sat_id);
    s << indent << "carrier_noise: ";
    Printer<float>::stream(s, indent + "  ", v.carrier_noise);
    s << indent << "pseudorange_residual: ";
    Printer<float>::stream(s, indent + "  ", v.pseudorange_residual);
    s << indent << "elevation: ";
    Printer<float>::stream(s, indent + "  ", v.elevation);
    s << indent << "azimuth: ";
    Printer<float>::stream(s, indent + "  ", v.azimuth);
    s << indent << "quality_indicator: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.quality_indicator);
    s << indent << "health: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.health);
    s << indent << "differential_available: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.differential_available);
    s << indent << "pseudorange_smoothed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.pseudorange_smoothed);
    s << indent << "oribt_source: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.oribt_source);
    s << indent << "ephAvail: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ephAvail);
    s << indent << "almAvail: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.almAvail);
    s << indent << "anoAvail: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.anoAvail);
    s << indent << "aopAvail: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.aopAvail);
    s << indent << "sbasCorrUsed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sbasCorrUsed);
    s << indent << "rtcmCorrUsed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.rtcmCorrUsed);
    s << indent << "slasCorrUsed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.slasCorrUsed);
    s << indent << "pseudorange_corrections_applied: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.pseudorange_corrections_applied);
    s << indent << "carrier_range_corrections_applied: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.carrier_range_corrections_applied);
    s << indent << "doppler_corrections_applied: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.doppler_corrections_applied);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DS_SENSOR_MSGS_MESSAGE_UBLOXSATELLITE_H
