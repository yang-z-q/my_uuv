// Generated by gencpp from file ds_sensor_msgs/Gyro.msg
// DO NOT EDIT!


#ifndef DS_SENSOR_MSGS_MESSAGE_GYRO_H
#define DS_SENSOR_MSGS_MESSAGE_GYRO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <ds_core_msgs/DsHeader.h>
#include <geometry_msgs/Quaternion.h>

namespace ds_sensor_msgs
{
template <class ContainerAllocator>
struct Gyro_
{
  typedef Gyro_<ContainerAllocator> Type;

  Gyro_()
    : header()
    , ds_header()
    , roll(0.0)
    , pitch(0.0)
    , heading(0.0)
    , roll_covar(0.0)
    , pitch_covar(0.0)
    , heading_covar(0.0)
    , orientation()  {
    }
  Gyro_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , ds_header(_alloc)
    , roll(0.0)
    , pitch(0.0)
    , heading(0.0)
    , roll_covar(0.0)
    , pitch_covar(0.0)
    , heading_covar(0.0)
    , orientation(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::ds_core_msgs::DsHeader_<ContainerAllocator>  _ds_header_type;
  _ds_header_type ds_header;

   typedef double _roll_type;
  _roll_type roll;

   typedef double _pitch_type;
  _pitch_type pitch;

   typedef double _heading_type;
  _heading_type heading;

   typedef double _roll_covar_type;
  _roll_covar_type roll_covar;

   typedef double _pitch_covar_type;
  _pitch_covar_type pitch_covar;

   typedef double _heading_covar_type;
  _heading_covar_type heading_covar;

   typedef  ::geometry_msgs::Quaternion_<ContainerAllocator>  _orientation_type;
  _orientation_type orientation;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(GYRO_NO_DATA)
  #undef GYRO_NO_DATA
#endif


  static const double GYRO_NO_DATA;

  typedef boost::shared_ptr< ::ds_sensor_msgs::Gyro_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ds_sensor_msgs::Gyro_<ContainerAllocator> const> ConstPtr;

}; // struct Gyro_

typedef ::ds_sensor_msgs::Gyro_<std::allocator<void> > Gyro;

typedef boost::shared_ptr< ::ds_sensor_msgs::Gyro > GyroPtr;
typedef boost::shared_ptr< ::ds_sensor_msgs::Gyro const> GyroConstPtr;

// constants requiring out of line definition

   
   template<typename ContainerAllocator> const double
      Gyro_<ContainerAllocator>::GYRO_NO_DATA =
        
          -9999.0
        
        ;
   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ds_sensor_msgs::Gyro_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ds_sensor_msgs::Gyro_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ds_sensor_msgs::Gyro_<ContainerAllocator1> & lhs, const ::ds_sensor_msgs::Gyro_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.ds_header == rhs.ds_header &&
    lhs.roll == rhs.roll &&
    lhs.pitch == rhs.pitch &&
    lhs.heading == rhs.heading &&
    lhs.roll_covar == rhs.roll_covar &&
    lhs.pitch_covar == rhs.pitch_covar &&
    lhs.heading_covar == rhs.heading_covar &&
    lhs.orientation == rhs.orientation;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ds_sensor_msgs::Gyro_<ContainerAllocator1> & lhs, const ::ds_sensor_msgs::Gyro_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ds_sensor_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ds_sensor_msgs::Gyro_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ds_sensor_msgs::Gyro_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_sensor_msgs::Gyro_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_sensor_msgs::Gyro_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_sensor_msgs::Gyro_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_sensor_msgs::Gyro_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ds_sensor_msgs::Gyro_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8f49f0758fb9e575ff9b3ecb4432dc8d";
  }

  static const char* value(const ::ds_sensor_msgs::Gyro_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8f49f0758fb9e575ULL;
  static const uint64_t static_value2 = 0xff9b3ecb4432dc8dULL;
};

template<class ContainerAllocator>
struct DataType< ::ds_sensor_msgs::Gyro_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ds_sensor_msgs/Gyro";
  }

  static const char* value(const ::ds_sensor_msgs::Gyro_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ds_sensor_msgs::Gyro_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Message for a Gyro\n"
"float64 GYRO_NO_DATA = -9999.0\n"
"\n"
"# The standard 2-part DsHeader block\n"
"# This allows both a standard ROS header and DS-specific header blocks\n"
"# See HEADERS.md in ds_core_msgs for details\n"
"std_msgs/Header header\n"
"ds_core_msgs/DsHeader ds_header\n"
"\n"
"# In degrees.  Standard \"Forward - Up - Left\" coorinates\n"
"float64 roll               # + rolls to right\n"
"float64 pitch              # + pitch nose down\n"
"float64 heading            # + turns to left\n"
"\n"
"float64 roll_covar\n"
"float64 pitch_covar\n"
"float64 heading_covar\n"
"\n"
"geometry_msgs/Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: ds_core_msgs/DsHeader\n"
"# This is half our standard header for ds_msgs; see\n"
"# HEADERS.md for details\n"
"\n"
"# This header should ALWAYS be paired with a std_msgs/Header\n"
"# and should ALWAYS reference HEADERS.md.  If you're looking at this\n"
"# file to add headers to a type, you probably want to copy/paste\n"
"# the following block:\n"
"#\n"
"#     # The standard 2-part DsHeader block\n"
"#     # This allows both a standard ROS header and DS-specific header blocks\n"
"#     # See HEADERS.md in ds_core_msgs for details\n"
"#     std_msgs/Header header\n"
"#     ds_core_msgs/DsHeader ds_header\n"
"#\n"
"\n"
"# Time data was received or sent out (i/o time)\n"
"time io_time\n"
"\n"
"# Sensor source UUID\n"
"uint8[16] source_uuid\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::ds_sensor_msgs::Gyro_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ds_sensor_msgs::Gyro_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.ds_header);
      stream.next(m.roll);
      stream.next(m.pitch);
      stream.next(m.heading);
      stream.next(m.roll_covar);
      stream.next(m.pitch_covar);
      stream.next(m.heading_covar);
      stream.next(m.orientation);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Gyro_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ds_sensor_msgs::Gyro_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ds_sensor_msgs::Gyro_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "ds_header: ";
    s << std::endl;
    Printer< ::ds_core_msgs::DsHeader_<ContainerAllocator> >::stream(s, indent + "  ", v.ds_header);
    s << indent << "roll: ";
    Printer<double>::stream(s, indent + "  ", v.roll);
    s << indent << "pitch: ";
    Printer<double>::stream(s, indent + "  ", v.pitch);
    s << indent << "heading: ";
    Printer<double>::stream(s, indent + "  ", v.heading);
    s << indent << "roll_covar: ";
    Printer<double>::stream(s, indent + "  ", v.roll_covar);
    s << indent << "pitch_covar: ";
    Printer<double>::stream(s, indent + "  ", v.pitch_covar);
    s << indent << "heading_covar: ";
    Printer<double>::stream(s, indent + "  ", v.heading_covar);
    s << indent << "orientation: ";
    s << std::endl;
    Printer< ::geometry_msgs::Quaternion_<ContainerAllocator> >::stream(s, indent + "  ", v.orientation);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DS_SENSOR_MSGS_MESSAGE_GYRO_H
