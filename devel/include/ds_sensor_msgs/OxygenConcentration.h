// Generated by gencpp from file ds_sensor_msgs/OxygenConcentration.msg
// DO NOT EDIT!


#ifndef DS_SENSOR_MSGS_MESSAGE_OXYGENCONCENTRATION_H
#define DS_SENSOR_MSGS_MESSAGE_OXYGENCONCENTRATION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <ds_core_msgs/DsHeader.h>

namespace ds_sensor_msgs
{
template <class ContainerAllocator>
struct OxygenConcentration_
{
  typedef OxygenConcentration_<ContainerAllocator> Type;

  OxygenConcentration_()
    : header()
    , ds_header()
    , concentration(0.0)
    , concentration_covar(0.0)
    , air_saturation(0.0)
    , air_saturation_covar(0.0)
    , temperature(0.0)
    , temperature_covar(0.0)  {
    }
  OxygenConcentration_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , ds_header(_alloc)
    , concentration(0.0)
    , concentration_covar(0.0)
    , air_saturation(0.0)
    , air_saturation_covar(0.0)
    , temperature(0.0)
    , temperature_covar(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::ds_core_msgs::DsHeader_<ContainerAllocator>  _ds_header_type;
  _ds_header_type ds_header;

   typedef double _concentration_type;
  _concentration_type concentration;

   typedef double _concentration_covar_type;
  _concentration_covar_type concentration_covar;

   typedef double _air_saturation_type;
  _air_saturation_type air_saturation;

   typedef double _air_saturation_covar_type;
  _air_saturation_covar_type air_saturation_covar;

   typedef double _temperature_type;
  _temperature_type temperature;

   typedef double _temperature_covar_type;
  _temperature_covar_type temperature_covar;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(OXYGEN_CONCENTRATION_NO_DATA)
  #undef OXYGEN_CONCENTRATION_NO_DATA
#endif


  static const double OXYGEN_CONCENTRATION_NO_DATA;

  typedef boost::shared_ptr< ::ds_sensor_msgs::OxygenConcentration_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ds_sensor_msgs::OxygenConcentration_<ContainerAllocator> const> ConstPtr;

}; // struct OxygenConcentration_

typedef ::ds_sensor_msgs::OxygenConcentration_<std::allocator<void> > OxygenConcentration;

typedef boost::shared_ptr< ::ds_sensor_msgs::OxygenConcentration > OxygenConcentrationPtr;
typedef boost::shared_ptr< ::ds_sensor_msgs::OxygenConcentration const> OxygenConcentrationConstPtr;

// constants requiring out of line definition

   
   template<typename ContainerAllocator> const double
      OxygenConcentration_<ContainerAllocator>::OXYGEN_CONCENTRATION_NO_DATA =
        
          -9999.0
        
        ;
   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ds_sensor_msgs::OxygenConcentration_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ds_sensor_msgs::OxygenConcentration_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ds_sensor_msgs::OxygenConcentration_<ContainerAllocator1> & lhs, const ::ds_sensor_msgs::OxygenConcentration_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.ds_header == rhs.ds_header &&
    lhs.concentration == rhs.concentration &&
    lhs.concentration_covar == rhs.concentration_covar &&
    lhs.air_saturation == rhs.air_saturation &&
    lhs.air_saturation_covar == rhs.air_saturation_covar &&
    lhs.temperature == rhs.temperature &&
    lhs.temperature_covar == rhs.temperature_covar;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ds_sensor_msgs::OxygenConcentration_<ContainerAllocator1> & lhs, const ::ds_sensor_msgs::OxygenConcentration_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ds_sensor_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ds_sensor_msgs::OxygenConcentration_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ds_sensor_msgs::OxygenConcentration_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_sensor_msgs::OxygenConcentration_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_sensor_msgs::OxygenConcentration_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_sensor_msgs::OxygenConcentration_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_sensor_msgs::OxygenConcentration_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ds_sensor_msgs::OxygenConcentration_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fd3a82283deea7a19eb89e4c1d7442ba";
  }

  static const char* value(const ::ds_sensor_msgs::OxygenConcentration_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfd3a82283deea7a1ULL;
  static const uint64_t static_value2 = 0x9eb89e4c1d7442baULL;
};

template<class ContainerAllocator>
struct DataType< ::ds_sensor_msgs::OxygenConcentration_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ds_sensor_msgs/OxygenConcentration";
  }

  static const char* value(const ::ds_sensor_msgs::OxygenConcentration_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ds_sensor_msgs::OxygenConcentration_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 OXYGEN_CONCENTRATION_NO_DATA=-9999.00\n"
"\n"
"# The standard 2-part DsHeader block\n"
"# This allows both a standard ROS header and DS-specific header blocks\n"
"# See HEADERS.md in ds_core_msgs for details\n"
"std_msgs/Header header\n"
"ds_core_msgs/DsHeader ds_header\n"
"\n"
"# O2 concentration in uM\n"
"float64 concentration\n"
"float64 concentration_covar\n"
"\n"
"# Saturation in %\n"
"float64 air_saturation\n"
"float64 air_saturation_covar\n"
"\n"
"# Temperature in C\n"
"float64 temperature\n"
"float64 temperature_covar\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: ds_core_msgs/DsHeader\n"
"# This is half our standard header for ds_msgs; see\n"
"# HEADERS.md for details\n"
"\n"
"# This header should ALWAYS be paired with a std_msgs/Header\n"
"# and should ALWAYS reference HEADERS.md.  If you're looking at this\n"
"# file to add headers to a type, you probably want to copy/paste\n"
"# the following block:\n"
"#\n"
"#     # The standard 2-part DsHeader block\n"
"#     # This allows both a standard ROS header and DS-specific header blocks\n"
"#     # See HEADERS.md in ds_core_msgs for details\n"
"#     std_msgs/Header header\n"
"#     ds_core_msgs/DsHeader ds_header\n"
"#\n"
"\n"
"# Time data was received or sent out (i/o time)\n"
"time io_time\n"
"\n"
"# Sensor source UUID\n"
"uint8[16] source_uuid\n"
"\n"
;
  }

  static const char* value(const ::ds_sensor_msgs::OxygenConcentration_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ds_sensor_msgs::OxygenConcentration_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.ds_header);
      stream.next(m.concentration);
      stream.next(m.concentration_covar);
      stream.next(m.air_saturation);
      stream.next(m.air_saturation_covar);
      stream.next(m.temperature);
      stream.next(m.temperature_covar);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OxygenConcentration_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ds_sensor_msgs::OxygenConcentration_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ds_sensor_msgs::OxygenConcentration_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "ds_header: ";
    s << std::endl;
    Printer< ::ds_core_msgs::DsHeader_<ContainerAllocator> >::stream(s, indent + "  ", v.ds_header);
    s << indent << "concentration: ";
    Printer<double>::stream(s, indent + "  ", v.concentration);
    s << indent << "concentration_covar: ";
    Printer<double>::stream(s, indent + "  ", v.concentration_covar);
    s << indent << "air_saturation: ";
    Printer<double>::stream(s, indent + "  ", v.air_saturation);
    s << indent << "air_saturation_covar: ";
    Printer<double>::stream(s, indent + "  ", v.air_saturation_covar);
    s << indent << "temperature: ";
    Printer<double>::stream(s, indent + "  ", v.temperature);
    s << indent << "temperature_covar: ";
    Printer<double>::stream(s, indent + "  ", v.temperature_covar);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DS_SENSOR_MSGS_MESSAGE_OXYGENCONCENTRATION_H
