// Generated by gencpp from file ds_sensor_msgs/SoundSpeed.msg
// DO NOT EDIT!


#ifndef DS_SENSOR_MSGS_MESSAGE_SOUNDSPEED_H
#define DS_SENSOR_MSGS_MESSAGE_SOUNDSPEED_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <ds_core_msgs/DsHeader.h>

namespace ds_sensor_msgs
{
template <class ContainerAllocator>
struct SoundSpeed_
{
  typedef SoundSpeed_<ContainerAllocator> Type;

  SoundSpeed_()
    : header()
    , ds_header()
    , raw_speed(0.0)
    , speed(0.0)
    , speed_covar(0.0)
    , speed_method(0)
    , clamping_status(0)  {
    }
  SoundSpeed_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , ds_header(_alloc)
    , raw_speed(0.0)
    , speed(0.0)
    , speed_covar(0.0)
    , speed_method(0)
    , clamping_status(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::ds_core_msgs::DsHeader_<ContainerAllocator>  _ds_header_type;
  _ds_header_type ds_header;

   typedef double _raw_speed_type;
  _raw_speed_type raw_speed;

   typedef double _speed_type;
  _speed_type speed;

   typedef double _speed_covar_type;
  _speed_covar_type speed_covar;

   typedef uint8_t _speed_method_type;
  _speed_method_type speed_method;

   typedef uint8_t _clamping_status_type;
  _clamping_status_type clamping_status;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(NO_SOUND_SPEED_DATA)
  #undef NO_SOUND_SPEED_DATA
#endif
#if defined(_WIN32) && defined(SV_METHOD_UNKNOWN)
  #undef SV_METHOD_UNKNOWN
#endif
#if defined(_WIN32) && defined(SV_METHOD_DIRECT)
  #undef SV_METHOD_DIRECT
#endif
#if defined(_WIN32) && defined(SV_METHOD_CHEN_MILLERO)
  #undef SV_METHOD_CHEN_MILLERO
#endif
#if defined(_WIN32) && defined(SV_METHOD_DEL_GROSSO)
  #undef SV_METHOD_DEL_GROSSO
#endif
#if defined(_WIN32) && defined(SV_METHOD_USER_DEFINED)
  #undef SV_METHOD_USER_DEFINED
#endif
#if defined(_WIN32) && defined(SV_STATUS_NOT_CLAMPED)
  #undef SV_STATUS_NOT_CLAMPED
#endif
#if defined(_WIN32) && defined(SV_STATUS_CLAMPED)
  #undef SV_STATUS_CLAMPED
#endif

  enum {
    SV_METHOD_UNKNOWN = 0u,
    SV_METHOD_DIRECT = 1u,
    SV_METHOD_CHEN_MILLERO = 2u,
    SV_METHOD_DEL_GROSSO = 3u,
    SV_METHOD_USER_DEFINED = 4u,
    SV_STATUS_NOT_CLAMPED = 0u,
    SV_STATUS_CLAMPED = 1u,
  };

  static const float NO_SOUND_SPEED_DATA;

  typedef boost::shared_ptr< ::ds_sensor_msgs::SoundSpeed_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ds_sensor_msgs::SoundSpeed_<ContainerAllocator> const> ConstPtr;

}; // struct SoundSpeed_

typedef ::ds_sensor_msgs::SoundSpeed_<std::allocator<void> > SoundSpeed;

typedef boost::shared_ptr< ::ds_sensor_msgs::SoundSpeed > SoundSpeedPtr;
typedef boost::shared_ptr< ::ds_sensor_msgs::SoundSpeed const> SoundSpeedConstPtr;

// constants requiring out of line definition

   
   template<typename ContainerAllocator> const float
      SoundSpeed_<ContainerAllocator>::NO_SOUND_SPEED_DATA =
        
          -9999.0
        
        ;
   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ds_sensor_msgs::SoundSpeed_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ds_sensor_msgs::SoundSpeed_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ds_sensor_msgs::SoundSpeed_<ContainerAllocator1> & lhs, const ::ds_sensor_msgs::SoundSpeed_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.ds_header == rhs.ds_header &&
    lhs.raw_speed == rhs.raw_speed &&
    lhs.speed == rhs.speed &&
    lhs.speed_covar == rhs.speed_covar &&
    lhs.speed_method == rhs.speed_method &&
    lhs.clamping_status == rhs.clamping_status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ds_sensor_msgs::SoundSpeed_<ContainerAllocator1> & lhs, const ::ds_sensor_msgs::SoundSpeed_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ds_sensor_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ds_sensor_msgs::SoundSpeed_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ds_sensor_msgs::SoundSpeed_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_sensor_msgs::SoundSpeed_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_sensor_msgs::SoundSpeed_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_sensor_msgs::SoundSpeed_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_sensor_msgs::SoundSpeed_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ds_sensor_msgs::SoundSpeed_<ContainerAllocator> >
{
  static const char* value()
  {
    return "eabd30c3cf9597bbb09b9943a03ca116";
  }

  static const char* value(const ::ds_sensor_msgs::SoundSpeed_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xeabd30c3cf9597bbULL;
  static const uint64_t static_value2 = 0xb09b9943a03ca116ULL;
};

template<class ContainerAllocator>
struct DataType< ::ds_sensor_msgs::SoundSpeed_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ds_sensor_msgs/SoundSpeed";
  }

  static const char* value(const ::ds_sensor_msgs::SoundSpeed_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ds_sensor_msgs::SoundSpeed_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 NO_SOUND_SPEED_DATA=-9999.0\n"
"\n"
"# The standard 2-part DsHeader block\n"
"# This allows both a standard ROS header and DS-specific header blocks\n"
"# See HEADERS.md in ds_core_msgs for details\n"
"std_msgs/Header header\n"
"ds_core_msgs/DsHeader ds_header\n"
"\n"
"# Speed in m/s\n"
"float64 raw_speed\n"
"float64 speed\n"
"float64 speed_covar\n"
"\n"
"# Enum to represent the source of a sound velocity measurement\n"
"# If you have a choice of method, Chen-Millero is probably a good\n"
"# bet for anything CTD-cast related.\n"
"\n"
"# Unknown.  Don't use this.\n"
"uint8 SV_METHOD_UNKNOWN=0\n"
"\n"
"# Direct measurement.  Usually via a Sound Velocity Probe that shoots actual sound\n"
"uint8 SV_METHOD_DIRECT=1\n"
"\n"
"# Chen-Millero algorithm best for depth < 1000m\n"
"uint8 SV_METHOD_CHEN_MILLERO=2\n"
"\n"
"# The Del Grosso algorithm best for depth > 1000m\n"
"uint8 SV_METHOD_DEL_GROSSO=3\n"
"\n"
"# User defined method.\n"
"uint8 SV_METHOD_USER_DEFINED=4\n"
"\n"
"uint8 speed_method\n"
"\n"
"uint8 SV_STATUS_NOT_CLAMPED=0\n"
"uint8 SV_STATUS_CLAMPED=1\n"
"\n"
"uint8 clamping_status\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: ds_core_msgs/DsHeader\n"
"# This is half our standard header for ds_msgs; see\n"
"# HEADERS.md for details\n"
"\n"
"# This header should ALWAYS be paired with a std_msgs/Header\n"
"# and should ALWAYS reference HEADERS.md.  If you're looking at this\n"
"# file to add headers to a type, you probably want to copy/paste\n"
"# the following block:\n"
"#\n"
"#     # The standard 2-part DsHeader block\n"
"#     # This allows both a standard ROS header and DS-specific header blocks\n"
"#     # See HEADERS.md in ds_core_msgs for details\n"
"#     std_msgs/Header header\n"
"#     ds_core_msgs/DsHeader ds_header\n"
"#\n"
"\n"
"# Time data was received or sent out (i/o time)\n"
"time io_time\n"
"\n"
"# Sensor source UUID\n"
"uint8[16] source_uuid\n"
"\n"
;
  }

  static const char* value(const ::ds_sensor_msgs::SoundSpeed_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ds_sensor_msgs::SoundSpeed_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.ds_header);
      stream.next(m.raw_speed);
      stream.next(m.speed);
      stream.next(m.speed_covar);
      stream.next(m.speed_method);
      stream.next(m.clamping_status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SoundSpeed_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ds_sensor_msgs::SoundSpeed_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ds_sensor_msgs::SoundSpeed_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "ds_header: ";
    s << std::endl;
    Printer< ::ds_core_msgs::DsHeader_<ContainerAllocator> >::stream(s, indent + "  ", v.ds_header);
    s << indent << "raw_speed: ";
    Printer<double>::stream(s, indent + "  ", v.raw_speed);
    s << indent << "speed: ";
    Printer<double>::stream(s, indent + "  ", v.speed);
    s << indent << "speed_covar: ";
    Printer<double>::stream(s, indent + "  ", v.speed_covar);
    s << indent << "speed_method: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.speed_method);
    s << indent << "clamping_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.clamping_status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DS_SENSOR_MSGS_MESSAGE_SOUNDSPEED_H
