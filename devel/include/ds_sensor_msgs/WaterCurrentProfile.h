// Generated by gencpp from file ds_sensor_msgs/WaterCurrentProfile.msg
// DO NOT EDIT!


#ifndef DS_SENSOR_MSGS_MESSAGE_WATERCURRENTPROFILE_H
#define DS_SENSOR_MSGS_MESSAGE_WATERCURRENTPROFILE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Vector3.h>

namespace ds_sensor_msgs
{
template <class ContainerAllocator>
struct WaterCurrentProfile_
{
  typedef WaterCurrentProfile_<ContainerAllocator> Type;

  WaterCurrentProfile_()
    : velocity_bin_beam()  {
    }
  WaterCurrentProfile_(const ContainerAllocator& _alloc)
    : velocity_bin_beam(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::geometry_msgs::Vector3_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Vector3_<ContainerAllocator> >> _velocity_bin_beam_type;
  _velocity_bin_beam_type velocity_bin_beam;





  typedef boost::shared_ptr< ::ds_sensor_msgs::WaterCurrentProfile_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ds_sensor_msgs::WaterCurrentProfile_<ContainerAllocator> const> ConstPtr;

}; // struct WaterCurrentProfile_

typedef ::ds_sensor_msgs::WaterCurrentProfile_<std::allocator<void> > WaterCurrentProfile;

typedef boost::shared_ptr< ::ds_sensor_msgs::WaterCurrentProfile > WaterCurrentProfilePtr;
typedef boost::shared_ptr< ::ds_sensor_msgs::WaterCurrentProfile const> WaterCurrentProfileConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ds_sensor_msgs::WaterCurrentProfile_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ds_sensor_msgs::WaterCurrentProfile_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ds_sensor_msgs::WaterCurrentProfile_<ContainerAllocator1> & lhs, const ::ds_sensor_msgs::WaterCurrentProfile_<ContainerAllocator2> & rhs)
{
  return lhs.velocity_bin_beam == rhs.velocity_bin_beam;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ds_sensor_msgs::WaterCurrentProfile_<ContainerAllocator1> & lhs, const ::ds_sensor_msgs::WaterCurrentProfile_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ds_sensor_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ds_sensor_msgs::WaterCurrentProfile_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ds_sensor_msgs::WaterCurrentProfile_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_sensor_msgs::WaterCurrentProfile_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_sensor_msgs::WaterCurrentProfile_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_sensor_msgs::WaterCurrentProfile_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_sensor_msgs::WaterCurrentProfile_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ds_sensor_msgs::WaterCurrentProfile_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5d178911c74ccdc3db51898a3bd367c5";
  }

  static const char* value(const ::ds_sensor_msgs::WaterCurrentProfile_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5d178911c74ccdc3ULL;
  static const uint64_t static_value2 = 0xdb51898a3bd367c5ULL;
};

template<class ContainerAllocator>
struct DataType< ::ds_sensor_msgs::WaterCurrentProfile_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ds_sensor_msgs/WaterCurrentProfile";
  }

  static const char* value(const ::ds_sensor_msgs::WaterCurrentProfile_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ds_sensor_msgs::WaterCurrentProfile_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#Message format for Water Current Velocity Information at each depth bin\n"
"\n"
"\n"
"#if set to beam: the size of this velocity_bin_beam array is 4 (x,y,z velocity in each bin relative to each individual beam)\n"
"#if set to instrument,ship, earth: the size of this velocity_bin_beam array is 1 (x,y,z velocity in each bin relative to instrument frame)\n"
"\n"
"geometry_msgs/Vector3[] velocity_bin_beam\n"
"\n"
"\n"
"\n"
"\n"
"#Intensity at each bin IN [dB]\n"
"#uint32[] bin_intensity\n"
"\n"
"#Correlation Factor --> [0,255]\n"
"#uint16[] bin_correlation\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::ds_sensor_msgs::WaterCurrentProfile_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ds_sensor_msgs::WaterCurrentProfile_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.velocity_bin_beam);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WaterCurrentProfile_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ds_sensor_msgs::WaterCurrentProfile_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ds_sensor_msgs::WaterCurrentProfile_<ContainerAllocator>& v)
  {
    s << indent << "velocity_bin_beam[]" << std::endl;
    for (size_t i = 0; i < v.velocity_bin_beam.size(); ++i)
    {
      s << indent << "  velocity_bin_beam[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "    ", v.velocity_bin_beam[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DS_SENSOR_MSGS_MESSAGE_WATERCURRENTPROFILE_H
