// Generated by gencpp from file ds_sensor_msgs/DepthPressure.msg
// DO NOT EDIT!


#ifndef DS_SENSOR_MSGS_MESSAGE_DEPTHPRESSURE_H
#define DS_SENSOR_MSGS_MESSAGE_DEPTHPRESSURE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <ds_core_msgs/DsHeader.h>

namespace ds_sensor_msgs
{
template <class ContainerAllocator>
struct DepthPressure_
{
  typedef DepthPressure_<ContainerAllocator> Type;

  DepthPressure_()
    : header()
    , ds_header()
    , pressure(0.0)
    , pressure_covar(0.0)
    , pressure_raw(0.0)
    , pressure_raw_unit(0)
    , tare(0.0)
    , latitude(0.0)
    , depth(0.0)
    , median_depth_filter_ok(false)
    , depth_buffer()
    , median_depth(0.0)
    , median_tol(0.0)  {
    }
  DepthPressure_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , ds_header(_alloc)
    , pressure(0.0)
    , pressure_covar(0.0)
    , pressure_raw(0.0)
    , pressure_raw_unit(0)
    , tare(0.0)
    , latitude(0.0)
    , depth(0.0)
    , median_depth_filter_ok(false)
    , depth_buffer(_alloc)
    , median_depth(0.0)
    , median_tol(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::ds_core_msgs::DsHeader_<ContainerAllocator>  _ds_header_type;
  _ds_header_type ds_header;

   typedef double _pressure_type;
  _pressure_type pressure;

   typedef double _pressure_covar_type;
  _pressure_covar_type pressure_covar;

   typedef double _pressure_raw_type;
  _pressure_raw_type pressure_raw;

   typedef uint8_t _pressure_raw_unit_type;
  _pressure_raw_unit_type pressure_raw_unit;

   typedef double _tare_type;
  _tare_type tare;

   typedef double _latitude_type;
  _latitude_type latitude;

   typedef double _depth_type;
  _depth_type depth;

   typedef uint8_t _median_depth_filter_ok_type;
  _median_depth_filter_ok_type median_depth_filter_ok;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _depth_buffer_type;
  _depth_buffer_type depth_buffer;

   typedef double _median_depth_type;
  _median_depth_type median_depth;

   typedef double _median_tol_type;
  _median_tol_type median_tol;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(DEPTH_PRESSURE_NO_DATA)
  #undef DEPTH_PRESSURE_NO_DATA
#endif
#if defined(_WIN32) && defined(UNIT_PRESSURE_USER_DEFINED)
  #undef UNIT_PRESSURE_USER_DEFINED
#endif
#if defined(_WIN32) && defined(UNIT_PRESSURE_PSI)
  #undef UNIT_PRESSURE_PSI
#endif
#if defined(_WIN32) && defined(UNIT_PRESSURE_DBAR)
  #undef UNIT_PRESSURE_DBAR
#endif
#if defined(_WIN32) && defined(UNIT_PRESSURE_HPA)
  #undef UNIT_PRESSURE_HPA
#endif
#if defined(_WIN32) && defined(UNIT_PRESSURE_BAR)
  #undef UNIT_PRESSURE_BAR
#endif
#if defined(_WIN32) && defined(UNIT_PRESSURE_KPA)
  #undef UNIT_PRESSURE_KPA
#endif
#if defined(_WIN32) && defined(UNIT_PRESSURE_MPA)
  #undef UNIT_PRESSURE_MPA
#endif
#if defined(_WIN32) && defined(UNIT_PRESSURE_INHG)
  #undef UNIT_PRESSURE_INHG
#endif
#if defined(_WIN32) && defined(UNIT_PRESSURE_MMHG)
  #undef UNIT_PRESSURE_MMHG
#endif
#if defined(_WIN32) && defined(UNIT_PRESSURE_MH2O)
  #undef UNIT_PRESSURE_MH2O
#endif
#if defined(_WIN32) && defined(DEFAULT_LATITUDE)
  #undef DEFAULT_LATITUDE
#endif

  enum {
    UNIT_PRESSURE_USER_DEFINED = 0u,
    UNIT_PRESSURE_PSI = 1u,
    UNIT_PRESSURE_DBAR = 2u,
    UNIT_PRESSURE_HPA = 3u,
    UNIT_PRESSURE_BAR = 4u,
    UNIT_PRESSURE_KPA = 5u,
    UNIT_PRESSURE_MPA = 6u,
    UNIT_PRESSURE_INHG = 7u,
    UNIT_PRESSURE_MMHG = 8u,
    UNIT_PRESSURE_MH2O = 9u,
  };

  static const double DEPTH_PRESSURE_NO_DATA;
  static const double DEFAULT_LATITUDE;

  typedef boost::shared_ptr< ::ds_sensor_msgs::DepthPressure_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ds_sensor_msgs::DepthPressure_<ContainerAllocator> const> ConstPtr;

}; // struct DepthPressure_

typedef ::ds_sensor_msgs::DepthPressure_<std::allocator<void> > DepthPressure;

typedef boost::shared_ptr< ::ds_sensor_msgs::DepthPressure > DepthPressurePtr;
typedef boost::shared_ptr< ::ds_sensor_msgs::DepthPressure const> DepthPressureConstPtr;

// constants requiring out of line definition

   
   template<typename ContainerAllocator> const double
      DepthPressure_<ContainerAllocator>::DEPTH_PRESSURE_NO_DATA =
        
          -9999.0
        
        ;
   

   

   

   

   

   

   

   

   

   

   

   
   template<typename ContainerAllocator> const double
      DepthPressure_<ContainerAllocator>::DEFAULT_LATITUDE =
        
          35.0
        
        ;
   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ds_sensor_msgs::DepthPressure_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ds_sensor_msgs::DepthPressure_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ds_sensor_msgs::DepthPressure_<ContainerAllocator1> & lhs, const ::ds_sensor_msgs::DepthPressure_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.ds_header == rhs.ds_header &&
    lhs.pressure == rhs.pressure &&
    lhs.pressure_covar == rhs.pressure_covar &&
    lhs.pressure_raw == rhs.pressure_raw &&
    lhs.pressure_raw_unit == rhs.pressure_raw_unit &&
    lhs.tare == rhs.tare &&
    lhs.latitude == rhs.latitude &&
    lhs.depth == rhs.depth &&
    lhs.median_depth_filter_ok == rhs.median_depth_filter_ok &&
    lhs.depth_buffer == rhs.depth_buffer &&
    lhs.median_depth == rhs.median_depth &&
    lhs.median_tol == rhs.median_tol;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ds_sensor_msgs::DepthPressure_<ContainerAllocator1> & lhs, const ::ds_sensor_msgs::DepthPressure_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ds_sensor_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ds_sensor_msgs::DepthPressure_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ds_sensor_msgs::DepthPressure_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_sensor_msgs::DepthPressure_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_sensor_msgs::DepthPressure_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_sensor_msgs::DepthPressure_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_sensor_msgs::DepthPressure_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ds_sensor_msgs::DepthPressure_<ContainerAllocator> >
{
  static const char* value()
  {
    return "43226693cf1eb430cebe11aa0b75af8c";
  }

  static const char* value(const ::ds_sensor_msgs::DepthPressure_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x43226693cf1eb430ULL;
  static const uint64_t static_value2 = 0xcebe11aa0b75af8cULL;
};

template<class ContainerAllocator>
struct DataType< ::ds_sensor_msgs::DepthPressure_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ds_sensor_msgs/DepthPressure";
  }

  static const char* value(const ::ds_sensor_msgs::DepthPressure_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ds_sensor_msgs::DepthPressure_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# The standard 2-part DsHeader block\n"
"# This allows both a standard ROS header and DS-specific header blocks\n"
"# See HEADERS.md in ds_core_msgs for details\n"
"std_msgs/Header header\n"
"ds_core_msgs/DsHeader ds_header\n"
"\n"
"# Pressure unit constants\n"
"\n"
"float64 DEPTH_PRESSURE_NO_DATA=-9999.0\n"
"\n"
"# Pressure unit for raw pressure value.\n"
"\n"
"# Pressure unit is user defined - need external knowledge of\n"
"# conversion factor to decibar.\n"
"uint8 UNIT_PRESSURE_USER_DEFINED=0\n"
"# Standard units\n"
"uint8 UNIT_PRESSURE_PSI         = 1\n"
"uint8 UNIT_PRESSURE_DBAR        = 2\n"
"uint8 UNIT_PRESSURE_HPA         = 3\n"
"uint8 UNIT_PRESSURE_BAR         = 4\n"
"uint8 UNIT_PRESSURE_KPA         = 5\n"
"uint8 UNIT_PRESSURE_MPA         = 6\n"
"uint8 UNIT_PRESSURE_INHG        = 7\n"
"uint8 UNIT_PRESSURE_MMHG        = 8\n"
"uint8 UNIT_PRESSURE_MH2O        = 9\n"
"\n"
"float64 DEFAULT_LATITUDE=35.0\n"
"\n"
"# Tared pressure value. (in decibar)\n"
"# If 'tare' != DEPTH_PESSURE_NO_DATA, then this value is equal to \"raw_pressure - tare\"\n"
"# If 'tare' == DEPTH_PESSURE_NO_DATA, then 'tare' is effectively 0\n"
"float64 pressure\n"
"float64 pressure_covar\n"
"\n"
"# Raw sensor measurement.  Units, etc, totally depend\n"
"# on the sensor.\n"
"#\n"
"# Final depth is:\n"
"# pressure_dbar = raw_sensor_to_dbar(raw) - pressure_tare_dbar\n"
"# depth = foffonoff_dbar_to_m(pressure_dbar, latitude)\n"
"float64 pressure_raw\n"
"\n"
"# Units for the pressure value\n"
"uint8   pressure_raw_unit\n"
"\n"
"# Tare value (in decibar)\n"
"float64 tare\n"
"\n"
"# Latitude for Fofonoff calculation of depth.\n"
"float64 latitude\n"
"\n"
"# Depth calculated from pressure and latitude.\n"
"# If latitude == DEPTH_PRESSURE_NO_DATA, then DEFAULT_LATITUDE is used\n"
"float64 depth\n"
"\n"
"bool median_depth_filter_ok\n"
"float64[] depth_buffer\n"
"float64 median_depth\n"
"float64 median_tol\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: ds_core_msgs/DsHeader\n"
"# This is half our standard header for ds_msgs; see\n"
"# HEADERS.md for details\n"
"\n"
"# This header should ALWAYS be paired with a std_msgs/Header\n"
"# and should ALWAYS reference HEADERS.md.  If you're looking at this\n"
"# file to add headers to a type, you probably want to copy/paste\n"
"# the following block:\n"
"#\n"
"#     # The standard 2-part DsHeader block\n"
"#     # This allows both a standard ROS header and DS-specific header blocks\n"
"#     # See HEADERS.md in ds_core_msgs for details\n"
"#     std_msgs/Header header\n"
"#     ds_core_msgs/DsHeader ds_header\n"
"#\n"
"\n"
"# Time data was received or sent out (i/o time)\n"
"time io_time\n"
"\n"
"# Sensor source UUID\n"
"uint8[16] source_uuid\n"
"\n"
;
  }

  static const char* value(const ::ds_sensor_msgs::DepthPressure_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ds_sensor_msgs::DepthPressure_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.ds_header);
      stream.next(m.pressure);
      stream.next(m.pressure_covar);
      stream.next(m.pressure_raw);
      stream.next(m.pressure_raw_unit);
      stream.next(m.tare);
      stream.next(m.latitude);
      stream.next(m.depth);
      stream.next(m.median_depth_filter_ok);
      stream.next(m.depth_buffer);
      stream.next(m.median_depth);
      stream.next(m.median_tol);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DepthPressure_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ds_sensor_msgs::DepthPressure_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ds_sensor_msgs::DepthPressure_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "ds_header: ";
    s << std::endl;
    Printer< ::ds_core_msgs::DsHeader_<ContainerAllocator> >::stream(s, indent + "  ", v.ds_header);
    s << indent << "pressure: ";
    Printer<double>::stream(s, indent + "  ", v.pressure);
    s << indent << "pressure_covar: ";
    Printer<double>::stream(s, indent + "  ", v.pressure_covar);
    s << indent << "pressure_raw: ";
    Printer<double>::stream(s, indent + "  ", v.pressure_raw);
    s << indent << "pressure_raw_unit: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.pressure_raw_unit);
    s << indent << "tare: ";
    Printer<double>::stream(s, indent + "  ", v.tare);
    s << indent << "latitude: ";
    Printer<double>::stream(s, indent + "  ", v.latitude);
    s << indent << "depth: ";
    Printer<double>::stream(s, indent + "  ", v.depth);
    s << indent << "median_depth_filter_ok: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.median_depth_filter_ok);
    s << indent << "depth_buffer[]" << std::endl;
    for (size_t i = 0; i < v.depth_buffer.size(); ++i)
    {
      s << indent << "  depth_buffer[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.depth_buffer[i]);
    }
    s << indent << "median_depth: ";
    Printer<double>::stream(s, indent + "  ", v.median_depth);
    s << indent << "median_tol: ";
    Printer<double>::stream(s, indent + "  ", v.median_tol);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DS_SENSOR_MSGS_MESSAGE_DEPTHPRESSURE_H
