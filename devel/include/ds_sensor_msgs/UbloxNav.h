// Generated by gencpp from file ds_sensor_msgs/UbloxNav.msg
// DO NOT EDIT!


#ifndef DS_SENSOR_MSGS_MESSAGE_UBLOXNAV_H
#define DS_SENSOR_MSGS_MESSAGE_UBLOXNAV_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <ds_core_msgs/DsHeader.h>

namespace ds_sensor_msgs
{
template <class ContainerAllocator>
struct UbloxNav_
{
  typedef UbloxNav_<ContainerAllocator> Type;

  UbloxNav_()
    : header()
    , ds_header()
    , latitude(0.0)
    , longitude(0.0)
    , height_ellipsoid(0.0)
    , height_msl(0.0)
    , velocity_north(0.0)
    , velocity_east(0.0)
    , velocity_down(0.0)
    , accuracy_horz(0.0)
    , accuracy_vert(0.0)
    , accuracy_time(0.0)
    , accuracy_vel(0.0)
    , time_of_week(0)
    , fixtype()
    , relpos_station_id(0)
    , relpos_north(0.0)
    , relpos_east(0.0)
    , relpos_down(0.0)
    , relpos_length(0.0)
    , relpos_heading(0.0)
    , relpos_accuracy_north(0.0)
    , relpos_accuracy_east(0.0)
    , relpos_accuracy_down(0.0)
    , relpos_accuracy_length(0.0)
    , relpos_accuracy_heading(0.0)
    , relpos_flags(0)  {
    }
  UbloxNav_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , ds_header(_alloc)
    , latitude(0.0)
    , longitude(0.0)
    , height_ellipsoid(0.0)
    , height_msl(0.0)
    , velocity_north(0.0)
    , velocity_east(0.0)
    , velocity_down(0.0)
    , accuracy_horz(0.0)
    , accuracy_vert(0.0)
    , accuracy_time(0.0)
    , accuracy_vel(0.0)
    , time_of_week(0)
    , fixtype(_alloc)
    , relpos_station_id(0)
    , relpos_north(0.0)
    , relpos_east(0.0)
    , relpos_down(0.0)
    , relpos_length(0.0)
    , relpos_heading(0.0)
    , relpos_accuracy_north(0.0)
    , relpos_accuracy_east(0.0)
    , relpos_accuracy_down(0.0)
    , relpos_accuracy_length(0.0)
    , relpos_accuracy_heading(0.0)
    , relpos_flags(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::ds_core_msgs::DsHeader_<ContainerAllocator>  _ds_header_type;
  _ds_header_type ds_header;

   typedef double _latitude_type;
  _latitude_type latitude;

   typedef double _longitude_type;
  _longitude_type longitude;

   typedef double _height_ellipsoid_type;
  _height_ellipsoid_type height_ellipsoid;

   typedef double _height_msl_type;
  _height_msl_type height_msl;

   typedef float _velocity_north_type;
  _velocity_north_type velocity_north;

   typedef float _velocity_east_type;
  _velocity_east_type velocity_east;

   typedef float _velocity_down_type;
  _velocity_down_type velocity_down;

   typedef float _accuracy_horz_type;
  _accuracy_horz_type accuracy_horz;

   typedef float _accuracy_vert_type;
  _accuracy_vert_type accuracy_vert;

   typedef float _accuracy_time_type;
  _accuracy_time_type accuracy_time;

   typedef float _accuracy_vel_type;
  _accuracy_vel_type accuracy_vel;

   typedef uint64_t _time_of_week_type;
  _time_of_week_type time_of_week;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _fixtype_type;
  _fixtype_type fixtype;

   typedef uint16_t _relpos_station_id_type;
  _relpos_station_id_type relpos_station_id;

   typedef double _relpos_north_type;
  _relpos_north_type relpos_north;

   typedef double _relpos_east_type;
  _relpos_east_type relpos_east;

   typedef double _relpos_down_type;
  _relpos_down_type relpos_down;

   typedef double _relpos_length_type;
  _relpos_length_type relpos_length;

   typedef double _relpos_heading_type;
  _relpos_heading_type relpos_heading;

   typedef float _relpos_accuracy_north_type;
  _relpos_accuracy_north_type relpos_accuracy_north;

   typedef float _relpos_accuracy_east_type;
  _relpos_accuracy_east_type relpos_accuracy_east;

   typedef float _relpos_accuracy_down_type;
  _relpos_accuracy_down_type relpos_accuracy_down;

   typedef float _relpos_accuracy_length_type;
  _relpos_accuracy_length_type relpos_accuracy_length;

   typedef float _relpos_accuracy_heading_type;
  _relpos_accuracy_heading_type relpos_accuracy_heading;

   typedef uint16_t _relpos_flags_type;
  _relpos_flags_type relpos_flags;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(RELPOS_FLAGS_GNSSOK)
  #undef RELPOS_FLAGS_GNSSOK
#endif
#if defined(_WIN32) && defined(RELPOS_FLAGS_DIFFSOLN)
  #undef RELPOS_FLAGS_DIFFSOLN
#endif
#if defined(_WIN32) && defined(RELPOS_FLAGS_RELPOSVALID)
  #undef RELPOS_FLAGS_RELPOSVALID
#endif
#if defined(_WIN32) && defined(RELPOS_FLAGS_CARRSOLN_MASK)
  #undef RELPOS_FLAGS_CARRSOLN_MASK
#endif
#if defined(_WIN32) && defined(RELPOS_FLAGS_ISMOVING)
  #undef RELPOS_FLAGS_ISMOVING
#endif
#if defined(_WIN32) && defined(RELPOS_FLAGS_REFPOSMISS)
  #undef RELPOS_FLAGS_REFPOSMISS
#endif
#if defined(_WIN32) && defined(RELPOS_FLAGS_REFOBSMISS)
  #undef RELPOS_FLAGS_REFOBSMISS
#endif

  enum {
    RELPOS_FLAGS_GNSSOK = 1u,
    RELPOS_FLAGS_DIFFSOLN = 2u,
    RELPOS_FLAGS_RELPOSVALID = 4u,
    RELPOS_FLAGS_CARRSOLN_MASK = 24u,
    RELPOS_FLAGS_ISMOVING = 32u,
    RELPOS_FLAGS_REFPOSMISS = 64u,
    RELPOS_FLAGS_REFOBSMISS = 128u,
  };


  typedef boost::shared_ptr< ::ds_sensor_msgs::UbloxNav_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ds_sensor_msgs::UbloxNav_<ContainerAllocator> const> ConstPtr;

}; // struct UbloxNav_

typedef ::ds_sensor_msgs::UbloxNav_<std::allocator<void> > UbloxNav;

typedef boost::shared_ptr< ::ds_sensor_msgs::UbloxNav > UbloxNavPtr;
typedef boost::shared_ptr< ::ds_sensor_msgs::UbloxNav const> UbloxNavConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ds_sensor_msgs::UbloxNav_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ds_sensor_msgs::UbloxNav_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ds_sensor_msgs::UbloxNav_<ContainerAllocator1> & lhs, const ::ds_sensor_msgs::UbloxNav_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.ds_header == rhs.ds_header &&
    lhs.latitude == rhs.latitude &&
    lhs.longitude == rhs.longitude &&
    lhs.height_ellipsoid == rhs.height_ellipsoid &&
    lhs.height_msl == rhs.height_msl &&
    lhs.velocity_north == rhs.velocity_north &&
    lhs.velocity_east == rhs.velocity_east &&
    lhs.velocity_down == rhs.velocity_down &&
    lhs.accuracy_horz == rhs.accuracy_horz &&
    lhs.accuracy_vert == rhs.accuracy_vert &&
    lhs.accuracy_time == rhs.accuracy_time &&
    lhs.accuracy_vel == rhs.accuracy_vel &&
    lhs.time_of_week == rhs.time_of_week &&
    lhs.fixtype == rhs.fixtype &&
    lhs.relpos_station_id == rhs.relpos_station_id &&
    lhs.relpos_north == rhs.relpos_north &&
    lhs.relpos_east == rhs.relpos_east &&
    lhs.relpos_down == rhs.relpos_down &&
    lhs.relpos_length == rhs.relpos_length &&
    lhs.relpos_heading == rhs.relpos_heading &&
    lhs.relpos_accuracy_north == rhs.relpos_accuracy_north &&
    lhs.relpos_accuracy_east == rhs.relpos_accuracy_east &&
    lhs.relpos_accuracy_down == rhs.relpos_accuracy_down &&
    lhs.relpos_accuracy_length == rhs.relpos_accuracy_length &&
    lhs.relpos_accuracy_heading == rhs.relpos_accuracy_heading &&
    lhs.relpos_flags == rhs.relpos_flags;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ds_sensor_msgs::UbloxNav_<ContainerAllocator1> & lhs, const ::ds_sensor_msgs::UbloxNav_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ds_sensor_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ds_sensor_msgs::UbloxNav_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ds_sensor_msgs::UbloxNav_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_sensor_msgs::UbloxNav_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_sensor_msgs::UbloxNav_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_sensor_msgs::UbloxNav_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_sensor_msgs::UbloxNav_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ds_sensor_msgs::UbloxNav_<ContainerAllocator> >
{
  static const char* value()
  {
    return "381dc34261bb2c25179b956078fe8f3f";
  }

  static const char* value(const ::ds_sensor_msgs::UbloxNav_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x381dc34261bb2c25ULL;
  static const uint64_t static_value2 = 0x179b956078fe8f3fULL;
};

template<class ContainerAllocator>
struct DataType< ::ds_sensor_msgs::UbloxNav_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ds_sensor_msgs/UbloxNav";
  }

  static const char* value(const ::ds_sensor_msgs::UbloxNav_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ds_sensor_msgs::UbloxNav_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# The standard 2-part DsHeader block\n"
"# This allows both a standard ROS header and DS-specific header blocks\n"
"# See HEADERS.md in ds_core_msgs for details\n"
"std_msgs/Header header\n"
"ds_core_msgs/DsHeader ds_header\n"
"\n"
"# Mostly covered by the PVT messages, but can be overwritten by the high-precision\n"
"# Latlon position message if available\n"
"\n"
"# Position\n"
"float64 latitude\n"
"float64 longitude\n"
"float64 height_ellipsoid\n"
"float64 height_msl\n"
"\n"
"# Velocity\n"
"float32 velocity_north # m/s\n"
"float32 velocity_east  # m/s\n"
"float32 velocity_down  # m/s\n"
"\n"
"# Accuracy Stats\n"
"float32 accuracy_horz # m\n"
"float32 accuracy_vert # m\n"
"float32 accuracy_time # s\n"
"float32 accuracy_vel  # m/s\n"
"\n"
"# Status\n"
"uint64 time_of_week # used to aggregate messages\n"
"string fixtype\n"
"\n"
"# Relative position stuff\n"
"uint16 relpos_station_id\n"
"float64 relpos_north # m\n"
"float64 relpos_east # m\n"
"float64 relpos_down # m\n"
"float64 relpos_length # m\n"
"float64 relpos_heading # deg\n"
"\n"
"float32 relpos_accuracy_north\n"
"float32 relpos_accuracy_east\n"
"float32 relpos_accuracy_down\n"
"float32 relpos_accuracy_length\n"
"float32 relpos_accuracy_heading\n"
"\n"
"uint16 relpos_flags\n"
"uint16 RELPOS_FLAGS_GNSSOK = 1 # 0x01\n"
"uint16 RELPOS_FLAGS_DIFFSOLN = 2 # 0x02\n"
"uint16 RELPOS_FLAGS_RELPOSVALID = 4 #0x04\n"
"uint16 RELPOS_FLAGS_CARRSOLN_MASK = 24 #0x18\n"
"uint16 RELPOS_FLAGS_ISMOVING = 32 # 0x20\n"
"uint16 RELPOS_FLAGS_REFPOSMISS = 64 # 0x40\n"
"uint16 RELPOS_FLAGS_REFOBSMISS = 128 # 0x80\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: ds_core_msgs/DsHeader\n"
"# This is half our standard header for ds_msgs; see\n"
"# HEADERS.md for details\n"
"\n"
"# This header should ALWAYS be paired with a std_msgs/Header\n"
"# and should ALWAYS reference HEADERS.md.  If you're looking at this\n"
"# file to add headers to a type, you probably want to copy/paste\n"
"# the following block:\n"
"#\n"
"#     # The standard 2-part DsHeader block\n"
"#     # This allows both a standard ROS header and DS-specific header blocks\n"
"#     # See HEADERS.md in ds_core_msgs for details\n"
"#     std_msgs/Header header\n"
"#     ds_core_msgs/DsHeader ds_header\n"
"#\n"
"\n"
"# Time data was received or sent out (i/o time)\n"
"time io_time\n"
"\n"
"# Sensor source UUID\n"
"uint8[16] source_uuid\n"
"\n"
;
  }

  static const char* value(const ::ds_sensor_msgs::UbloxNav_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ds_sensor_msgs::UbloxNav_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.ds_header);
      stream.next(m.latitude);
      stream.next(m.longitude);
      stream.next(m.height_ellipsoid);
      stream.next(m.height_msl);
      stream.next(m.velocity_north);
      stream.next(m.velocity_east);
      stream.next(m.velocity_down);
      stream.next(m.accuracy_horz);
      stream.next(m.accuracy_vert);
      stream.next(m.accuracy_time);
      stream.next(m.accuracy_vel);
      stream.next(m.time_of_week);
      stream.next(m.fixtype);
      stream.next(m.relpos_station_id);
      stream.next(m.relpos_north);
      stream.next(m.relpos_east);
      stream.next(m.relpos_down);
      stream.next(m.relpos_length);
      stream.next(m.relpos_heading);
      stream.next(m.relpos_accuracy_north);
      stream.next(m.relpos_accuracy_east);
      stream.next(m.relpos_accuracy_down);
      stream.next(m.relpos_accuracy_length);
      stream.next(m.relpos_accuracy_heading);
      stream.next(m.relpos_flags);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct UbloxNav_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ds_sensor_msgs::UbloxNav_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ds_sensor_msgs::UbloxNav_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "ds_header: ";
    s << std::endl;
    Printer< ::ds_core_msgs::DsHeader_<ContainerAllocator> >::stream(s, indent + "  ", v.ds_header);
    s << indent << "latitude: ";
    Printer<double>::stream(s, indent + "  ", v.latitude);
    s << indent << "longitude: ";
    Printer<double>::stream(s, indent + "  ", v.longitude);
    s << indent << "height_ellipsoid: ";
    Printer<double>::stream(s, indent + "  ", v.height_ellipsoid);
    s << indent << "height_msl: ";
    Printer<double>::stream(s, indent + "  ", v.height_msl);
    s << indent << "velocity_north: ";
    Printer<float>::stream(s, indent + "  ", v.velocity_north);
    s << indent << "velocity_east: ";
    Printer<float>::stream(s, indent + "  ", v.velocity_east);
    s << indent << "velocity_down: ";
    Printer<float>::stream(s, indent + "  ", v.velocity_down);
    s << indent << "accuracy_horz: ";
    Printer<float>::stream(s, indent + "  ", v.accuracy_horz);
    s << indent << "accuracy_vert: ";
    Printer<float>::stream(s, indent + "  ", v.accuracy_vert);
    s << indent << "accuracy_time: ";
    Printer<float>::stream(s, indent + "  ", v.accuracy_time);
    s << indent << "accuracy_vel: ";
    Printer<float>::stream(s, indent + "  ", v.accuracy_vel);
    s << indent << "time_of_week: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.time_of_week);
    s << indent << "fixtype: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.fixtype);
    s << indent << "relpos_station_id: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.relpos_station_id);
    s << indent << "relpos_north: ";
    Printer<double>::stream(s, indent + "  ", v.relpos_north);
    s << indent << "relpos_east: ";
    Printer<double>::stream(s, indent + "  ", v.relpos_east);
    s << indent << "relpos_down: ";
    Printer<double>::stream(s, indent + "  ", v.relpos_down);
    s << indent << "relpos_length: ";
    Printer<double>::stream(s, indent + "  ", v.relpos_length);
    s << indent << "relpos_heading: ";
    Printer<double>::stream(s, indent + "  ", v.relpos_heading);
    s << indent << "relpos_accuracy_north: ";
    Printer<float>::stream(s, indent + "  ", v.relpos_accuracy_north);
    s << indent << "relpos_accuracy_east: ";
    Printer<float>::stream(s, indent + "  ", v.relpos_accuracy_east);
    s << indent << "relpos_accuracy_down: ";
    Printer<float>::stream(s, indent + "  ", v.relpos_accuracy_down);
    s << indent << "relpos_accuracy_length: ";
    Printer<float>::stream(s, indent + "  ", v.relpos_accuracy_length);
    s << indent << "relpos_accuracy_heading: ";
    Printer<float>::stream(s, indent + "  ", v.relpos_accuracy_heading);
    s << indent << "relpos_flags: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.relpos_flags);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DS_SENSOR_MSGS_MESSAGE_UBLOXNAV_H
