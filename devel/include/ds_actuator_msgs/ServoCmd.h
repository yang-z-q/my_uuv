// Generated by gencpp from file ds_actuator_msgs/ServoCmd.msg
// DO NOT EDIT!


#ifndef DS_ACTUATOR_MSGS_MESSAGE_SERVOCMD_H
#define DS_ACTUATOR_MSGS_MESSAGE_SERVOCMD_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ds_actuator_msgs
{
template <class ContainerAllocator>
struct ServoCmd_
{
  typedef ServoCmd_<ContainerAllocator> Type;

  ServoCmd_()
    : stamp()
    , servo_name()
    , cmd_radians(0.0)  {
    }
  ServoCmd_(const ContainerAllocator& _alloc)
    : stamp()
    , servo_name(_alloc)
    , cmd_radians(0.0)  {
  (void)_alloc;
    }



   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _servo_name_type;
  _servo_name_type servo_name;

   typedef float _cmd_radians_type;
  _cmd_radians_type cmd_radians;





  typedef boost::shared_ptr< ::ds_actuator_msgs::ServoCmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ds_actuator_msgs::ServoCmd_<ContainerAllocator> const> ConstPtr;

}; // struct ServoCmd_

typedef ::ds_actuator_msgs::ServoCmd_<std::allocator<void> > ServoCmd;

typedef boost::shared_ptr< ::ds_actuator_msgs::ServoCmd > ServoCmdPtr;
typedef boost::shared_ptr< ::ds_actuator_msgs::ServoCmd const> ServoCmdConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ds_actuator_msgs::ServoCmd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ds_actuator_msgs::ServoCmd_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ds_actuator_msgs::ServoCmd_<ContainerAllocator1> & lhs, const ::ds_actuator_msgs::ServoCmd_<ContainerAllocator2> & rhs)
{
  return lhs.stamp == rhs.stamp &&
    lhs.servo_name == rhs.servo_name &&
    lhs.cmd_radians == rhs.cmd_radians;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ds_actuator_msgs::ServoCmd_<ContainerAllocator1> & lhs, const ::ds_actuator_msgs::ServoCmd_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ds_actuator_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ds_actuator_msgs::ServoCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ds_actuator_msgs::ServoCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_actuator_msgs::ServoCmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_actuator_msgs::ServoCmd_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_actuator_msgs::ServoCmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_actuator_msgs::ServoCmd_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ds_actuator_msgs::ServoCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "15b86eedb0051345861928a0419a6518";
  }

  static const char* value(const ::ds_actuator_msgs::ServoCmd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x15b86eedb0051345ULL;
  static const uint64_t static_value2 = 0x861928a0419a6518ULL;
};

template<class ContainerAllocator>
struct DataType< ::ds_actuator_msgs::ServoCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ds_actuator_msgs/ServoCmd";
  }

  static const char* value(const ::ds_actuator_msgs::ServoCmd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ds_actuator_msgs::ServoCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time stamp\n"
"string servo_name\n"
"\n"
"float32 cmd_radians\n"
;
  }

  static const char* value(const ::ds_actuator_msgs::ServoCmd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ds_actuator_msgs::ServoCmd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamp);
      stream.next(m.servo_name);
      stream.next(m.cmd_radians);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ServoCmd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ds_actuator_msgs::ServoCmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ds_actuator_msgs::ServoCmd_<ContainerAllocator>& v)
  {
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "servo_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.servo_name);
    s << indent << "cmd_radians: ";
    Printer<float>::stream(s, indent + "  ", v.cmd_radians);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DS_ACTUATOR_MSGS_MESSAGE_SERVOCMD_H
