// Generated by gencpp from file ds_actuator_msgs/DropweightCmd.msg
// DO NOT EDIT!


#ifndef DS_ACTUATOR_MSGS_MESSAGE_DROPWEIGHTCMD_H
#define DS_ACTUATOR_MSGS_MESSAGE_DROPWEIGHTCMD_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ds_actuator_msgs
{
template <class ContainerAllocator>
struct DropweightCmd_
{
  typedef DropweightCmd_<ContainerAllocator> Type;

  DropweightCmd_()
    : stamp()
    , drop()
    , burn()  {
      drop.assign(false);

      burn.assign(false);
  }
  DropweightCmd_(const ContainerAllocator& _alloc)
    : stamp()
    , drop()
    , burn()  {
  (void)_alloc;
      drop.assign(false);

      burn.assign(false);
  }



   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef boost::array<uint8_t, 8>  _drop_type;
  _drop_type drop;

   typedef boost::array<uint8_t, 8>  _burn_type;
  _burn_type burn;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(IDX_DESCENT)
  #undef IDX_DESCENT
#endif
#if defined(_WIN32) && defined(IDX_ASCENT)
  #undef IDX_ASCENT
#endif
#if defined(_WIN32) && defined(IDX_ANCHOR)
  #undef IDX_ANCHOR
#endif
#if defined(_WIN32) && defined(IDX_MAX)
  #undef IDX_MAX
#endif

  enum {
    IDX_DESCENT = 0,
    IDX_ASCENT = 1,
    IDX_ANCHOR = 2,
    IDX_MAX = 8,
  };


  typedef boost::shared_ptr< ::ds_actuator_msgs::DropweightCmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ds_actuator_msgs::DropweightCmd_<ContainerAllocator> const> ConstPtr;

}; // struct DropweightCmd_

typedef ::ds_actuator_msgs::DropweightCmd_<std::allocator<void> > DropweightCmd;

typedef boost::shared_ptr< ::ds_actuator_msgs::DropweightCmd > DropweightCmdPtr;
typedef boost::shared_ptr< ::ds_actuator_msgs::DropweightCmd const> DropweightCmdConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ds_actuator_msgs::DropweightCmd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ds_actuator_msgs::DropweightCmd_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ds_actuator_msgs::DropweightCmd_<ContainerAllocator1> & lhs, const ::ds_actuator_msgs::DropweightCmd_<ContainerAllocator2> & rhs)
{
  return lhs.stamp == rhs.stamp &&
    lhs.drop == rhs.drop &&
    lhs.burn == rhs.burn;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ds_actuator_msgs::DropweightCmd_<ContainerAllocator1> & lhs, const ::ds_actuator_msgs::DropweightCmd_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ds_actuator_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ds_actuator_msgs::DropweightCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ds_actuator_msgs::DropweightCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_actuator_msgs::DropweightCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_actuator_msgs::DropweightCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_actuator_msgs::DropweightCmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_actuator_msgs::DropweightCmd_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ds_actuator_msgs::DropweightCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8ea5ee9cba3a5ff386611d1f0aa0bb49";
  }

  static const char* value(const ::ds_actuator_msgs::DropweightCmd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8ea5ee9cba3a5ff3ULL;
  static const uint64_t static_value2 = 0x86611d1f0aa0bb49ULL;
};

template<class ContainerAllocator>
struct DataType< ::ds_actuator_msgs::DropweightCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ds_actuator_msgs/DropweightCmd";
  }

  static const char* value(const ::ds_actuator_msgs::DropweightCmd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ds_actuator_msgs::DropweightCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time stamp\n"
"\n"
"int32 IDX_DESCENT=0\n"
"int32 IDX_ASCENT=1\n"
"int32 IDX_ANCHOR=2\n"
"int32 IDX_MAX=8\n"
"\n"
"# This is an array of dropweight booleans.  If the bool at a particular index\n"
"# is true, the weight should be dropped.\n"
"bool[8] drop\n"
"\n"
"# burn is an array of burnwire booleans, one for each weight.  This message assumes\n"
"# each vehicle supports both a primary dropweight actuator (dcam, etc) and a backup\n"
"# burnwire.\n"
"bool[8] burn\n"
;
  }

  static const char* value(const ::ds_actuator_msgs::DropweightCmd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ds_actuator_msgs::DropweightCmd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamp);
      stream.next(m.drop);
      stream.next(m.burn);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DropweightCmd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ds_actuator_msgs::DropweightCmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ds_actuator_msgs::DropweightCmd_<ContainerAllocator>& v)
  {
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "drop[]" << std::endl;
    for (size_t i = 0; i < v.drop.size(); ++i)
    {
      s << indent << "  drop[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.drop[i]);
    }
    s << indent << "burn[]" << std::endl;
    for (size_t i = 0; i < v.burn.size(); ++i)
    {
      s << indent << "  burn[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.burn[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DS_ACTUATOR_MSGS_MESSAGE_DROPWEIGHTCMD_H
