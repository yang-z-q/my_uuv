// Generated by gencpp from file ds_actuator_msgs/ThrusterCmd.msg
// DO NOT EDIT!


#ifndef DS_ACTUATOR_MSGS_MESSAGE_THRUSTERCMD_H
#define DS_ACTUATOR_MSGS_MESSAGE_THRUSTERCMD_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ds_actuator_msgs
{
template <class ContainerAllocator>
struct ThrusterCmd_
{
  typedef ThrusterCmd_<ContainerAllocator> Type;

  ThrusterCmd_()
    : stamp()
    , ttl_seconds(0.0)
    , thruster_name()
    , cmd_value(0.0)
    , cmd_newtons(0.0)  {
    }
  ThrusterCmd_(const ContainerAllocator& _alloc)
    : stamp()
    , ttl_seconds(0.0)
    , thruster_name(_alloc)
    , cmd_value(0.0)
    , cmd_newtons(0.0)  {
  (void)_alloc;
    }



   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef float _ttl_seconds_type;
  _ttl_seconds_type ttl_seconds;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _thruster_name_type;
  _thruster_name_type thruster_name;

   typedef float _cmd_value_type;
  _cmd_value_type cmd_value;

   typedef float _cmd_newtons_type;
  _cmd_newtons_type cmd_newtons;





  typedef boost::shared_ptr< ::ds_actuator_msgs::ThrusterCmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ds_actuator_msgs::ThrusterCmd_<ContainerAllocator> const> ConstPtr;

}; // struct ThrusterCmd_

typedef ::ds_actuator_msgs::ThrusterCmd_<std::allocator<void> > ThrusterCmd;

typedef boost::shared_ptr< ::ds_actuator_msgs::ThrusterCmd > ThrusterCmdPtr;
typedef boost::shared_ptr< ::ds_actuator_msgs::ThrusterCmd const> ThrusterCmdConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ds_actuator_msgs::ThrusterCmd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ds_actuator_msgs::ThrusterCmd_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ds_actuator_msgs::ThrusterCmd_<ContainerAllocator1> & lhs, const ::ds_actuator_msgs::ThrusterCmd_<ContainerAllocator2> & rhs)
{
  return lhs.stamp == rhs.stamp &&
    lhs.ttl_seconds == rhs.ttl_seconds &&
    lhs.thruster_name == rhs.thruster_name &&
    lhs.cmd_value == rhs.cmd_value &&
    lhs.cmd_newtons == rhs.cmd_newtons;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ds_actuator_msgs::ThrusterCmd_<ContainerAllocator1> & lhs, const ::ds_actuator_msgs::ThrusterCmd_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ds_actuator_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ds_actuator_msgs::ThrusterCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ds_actuator_msgs::ThrusterCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_actuator_msgs::ThrusterCmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_actuator_msgs::ThrusterCmd_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_actuator_msgs::ThrusterCmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_actuator_msgs::ThrusterCmd_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ds_actuator_msgs::ThrusterCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bd48d864a35b4ae52df4508040dcea7f";
  }

  static const char* value(const ::ds_actuator_msgs::ThrusterCmd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbd48d864a35b4ae5ULL;
  static const uint64_t static_value2 = 0x2df4508040dcea7fULL;
};

template<class ContainerAllocator>
struct DataType< ::ds_actuator_msgs::ThrusterCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ds_actuator_msgs/ThrusterCmd";
  }

  static const char* value(const ::ds_actuator_msgs::ThrusterCmd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ds_actuator_msgs::ThrusterCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Timestamp for when the thruster command was issued?\n"
"time stamp\n"
"\n"
"# Time-To-Live in seconds\n"
"# The thruster command only applies for this length of time\n"
"# TTL checking in most drivers is approximate; this is a\n"
"# minimum live time.  This flag should be checked at least every\n"
"# health check interval\n"
"float32 ttl_seconds\n"
"\n"
"# Name of the thruster this command is intended for\n"
"string thruster_name\n"
"\n"
"# Commanded value for the thruster (typically current)\n"
"float32 cmd_value\n"
"\n"
"# Desired force produced by cmd_value\n"
"float32 cmd_newtons\n"
;
  }

  static const char* value(const ::ds_actuator_msgs::ThrusterCmd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ds_actuator_msgs::ThrusterCmd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamp);
      stream.next(m.ttl_seconds);
      stream.next(m.thruster_name);
      stream.next(m.cmd_value);
      stream.next(m.cmd_newtons);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ThrusterCmd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ds_actuator_msgs::ThrusterCmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ds_actuator_msgs::ThrusterCmd_<ContainerAllocator>& v)
  {
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "ttl_seconds: ";
    Printer<float>::stream(s, indent + "  ", v.ttl_seconds);
    s << indent << "thruster_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.thruster_name);
    s << indent << "cmd_value: ";
    Printer<float>::stream(s, indent + "  ", v.cmd_value);
    s << indent << "cmd_newtons: ";
    Printer<float>::stream(s, indent + "  ", v.cmd_newtons);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DS_ACTUATOR_MSGS_MESSAGE_THRUSTERCMD_H
