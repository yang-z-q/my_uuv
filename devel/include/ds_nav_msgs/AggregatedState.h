// Generated by gencpp from file ds_nav_msgs/AggregatedState.msg
// DO NOT EDIT!


#ifndef DS_NAV_MSGS_MESSAGE_AGGREGATEDSTATE_H
#define DS_NAV_MSGS_MESSAGE_AGGREGATEDSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <ds_core_msgs/DsHeader.h>
#include <ds_nav_msgs/FlaggedDouble.h>
#include <ds_nav_msgs/FlaggedDouble.h>
#include <ds_nav_msgs/FlaggedDouble.h>
#include <ds_nav_msgs/FlaggedDouble.h>
#include <ds_nav_msgs/FlaggedDouble.h>
#include <ds_nav_msgs/FlaggedDouble.h>
#include <ds_nav_msgs/FlaggedDouble.h>
#include <ds_nav_msgs/FlaggedDouble.h>
#include <ds_nav_msgs/FlaggedDouble.h>
#include <ds_nav_msgs/FlaggedDouble.h>
#include <ds_nav_msgs/FlaggedDouble.h>
#include <ds_nav_msgs/FlaggedDouble.h>
#include <ds_nav_msgs/FlaggedDouble.h>
#include <ds_nav_msgs/FlaggedDouble.h>
#include <ds_nav_msgs/FlaggedDouble.h>
#include <ds_nav_msgs/FlaggedDouble.h>
#include <ds_nav_msgs/FlaggedDouble.h>
#include <ds_nav_msgs/FlaggedDouble.h>

namespace ds_nav_msgs
{
template <class ContainerAllocator>
struct AggregatedState_
{
  typedef AggregatedState_<ContainerAllocator> Type;

  AggregatedState_()
    : header()
    , ds_header()
    , northing()
    , easting()
    , down()
    , roll()
    , pitch()
    , heading()
    , surge_u()
    , sway_v()
    , heave_w()
    , p()
    , q()
    , r()
    , du_dt()
    , dv_dt()
    , dw_dt()
    , dp_dt()
    , dq_dt()
    , dr_dt()  {
    }
  AggregatedState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , ds_header(_alloc)
    , northing(_alloc)
    , easting(_alloc)
    , down(_alloc)
    , roll(_alloc)
    , pitch(_alloc)
    , heading(_alloc)
    , surge_u(_alloc)
    , sway_v(_alloc)
    , heave_w(_alloc)
    , p(_alloc)
    , q(_alloc)
    , r(_alloc)
    , du_dt(_alloc)
    , dv_dt(_alloc)
    , dw_dt(_alloc)
    , dp_dt(_alloc)
    , dq_dt(_alloc)
    , dr_dt(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::ds_core_msgs::DsHeader_<ContainerAllocator>  _ds_header_type;
  _ds_header_type ds_header;

   typedef  ::ds_nav_msgs::FlaggedDouble_<ContainerAllocator>  _northing_type;
  _northing_type northing;

   typedef  ::ds_nav_msgs::FlaggedDouble_<ContainerAllocator>  _easting_type;
  _easting_type easting;

   typedef  ::ds_nav_msgs::FlaggedDouble_<ContainerAllocator>  _down_type;
  _down_type down;

   typedef  ::ds_nav_msgs::FlaggedDouble_<ContainerAllocator>  _roll_type;
  _roll_type roll;

   typedef  ::ds_nav_msgs::FlaggedDouble_<ContainerAllocator>  _pitch_type;
  _pitch_type pitch;

   typedef  ::ds_nav_msgs::FlaggedDouble_<ContainerAllocator>  _heading_type;
  _heading_type heading;

   typedef  ::ds_nav_msgs::FlaggedDouble_<ContainerAllocator>  _surge_u_type;
  _surge_u_type surge_u;

   typedef  ::ds_nav_msgs::FlaggedDouble_<ContainerAllocator>  _sway_v_type;
  _sway_v_type sway_v;

   typedef  ::ds_nav_msgs::FlaggedDouble_<ContainerAllocator>  _heave_w_type;
  _heave_w_type heave_w;

   typedef  ::ds_nav_msgs::FlaggedDouble_<ContainerAllocator>  _p_type;
  _p_type p;

   typedef  ::ds_nav_msgs::FlaggedDouble_<ContainerAllocator>  _q_type;
  _q_type q;

   typedef  ::ds_nav_msgs::FlaggedDouble_<ContainerAllocator>  _r_type;
  _r_type r;

   typedef  ::ds_nav_msgs::FlaggedDouble_<ContainerAllocator>  _du_dt_type;
  _du_dt_type du_dt;

   typedef  ::ds_nav_msgs::FlaggedDouble_<ContainerAllocator>  _dv_dt_type;
  _dv_dt_type dv_dt;

   typedef  ::ds_nav_msgs::FlaggedDouble_<ContainerAllocator>  _dw_dt_type;
  _dw_dt_type dw_dt;

   typedef  ::ds_nav_msgs::FlaggedDouble_<ContainerAllocator>  _dp_dt_type;
  _dp_dt_type dp_dt;

   typedef  ::ds_nav_msgs::FlaggedDouble_<ContainerAllocator>  _dq_dt_type;
  _dq_dt_type dq_dt;

   typedef  ::ds_nav_msgs::FlaggedDouble_<ContainerAllocator>  _dr_dt_type;
  _dr_dt_type dr_dt;





  typedef boost::shared_ptr< ::ds_nav_msgs::AggregatedState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ds_nav_msgs::AggregatedState_<ContainerAllocator> const> ConstPtr;

}; // struct AggregatedState_

typedef ::ds_nav_msgs::AggregatedState_<std::allocator<void> > AggregatedState;

typedef boost::shared_ptr< ::ds_nav_msgs::AggregatedState > AggregatedStatePtr;
typedef boost::shared_ptr< ::ds_nav_msgs::AggregatedState const> AggregatedStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ds_nav_msgs::AggregatedState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ds_nav_msgs::AggregatedState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ds_nav_msgs::AggregatedState_<ContainerAllocator1> & lhs, const ::ds_nav_msgs::AggregatedState_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.ds_header == rhs.ds_header &&
    lhs.northing == rhs.northing &&
    lhs.easting == rhs.easting &&
    lhs.down == rhs.down &&
    lhs.roll == rhs.roll &&
    lhs.pitch == rhs.pitch &&
    lhs.heading == rhs.heading &&
    lhs.surge_u == rhs.surge_u &&
    lhs.sway_v == rhs.sway_v &&
    lhs.heave_w == rhs.heave_w &&
    lhs.p == rhs.p &&
    lhs.q == rhs.q &&
    lhs.r == rhs.r &&
    lhs.du_dt == rhs.du_dt &&
    lhs.dv_dt == rhs.dv_dt &&
    lhs.dw_dt == rhs.dw_dt &&
    lhs.dp_dt == rhs.dp_dt &&
    lhs.dq_dt == rhs.dq_dt &&
    lhs.dr_dt == rhs.dr_dt;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ds_nav_msgs::AggregatedState_<ContainerAllocator1> & lhs, const ::ds_nav_msgs::AggregatedState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ds_nav_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ds_nav_msgs::AggregatedState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ds_nav_msgs::AggregatedState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_nav_msgs::AggregatedState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_nav_msgs::AggregatedState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_nav_msgs::AggregatedState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_nav_msgs::AggregatedState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ds_nav_msgs::AggregatedState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c4c1d3330df2d1410f75b9342dd03428";
  }

  static const char* value(const ::ds_nav_msgs::AggregatedState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc4c1d3330df2d141ULL;
  static const uint64_t static_value2 = 0x0f75b9342dd03428ULL;
};

template<class ContainerAllocator>
struct DataType< ::ds_nav_msgs::AggregatedState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ds_nav_msgs/AggregatedState";
  }

  static const char* value(const ::ds_nav_msgs::AggregatedState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ds_nav_msgs::AggregatedState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# The standard 2-part DsHeader block\n"
"# This allows both a standard ROS header and DS-specific header blocks\n"
"# See HEADERS.md in ds_core_msgs for details\n"
"std_msgs/Header header\n"
"ds_core_msgs/DsHeader ds_header\n"
"\n"
"# Position\n"
"FlaggedDouble northing\n"
"FlaggedDouble easting\n"
"FlaggedDouble down\n"
"FlaggedDouble roll\n"
"FlaggedDouble pitch\n"
"FlaggedDouble heading\n"
"\n"
"# Rates\n"
"FlaggedDouble surge_u\n"
"FlaggedDouble sway_v\n"
"FlaggedDouble heave_w\n"
"FlaggedDouble p\n"
"FlaggedDouble q\n"
"FlaggedDouble r\n"
"\n"
"# Accelerations\n"
"FlaggedDouble du_dt\n"
"FlaggedDouble dv_dt\n"
"FlaggedDouble dw_dt\n"
"FlaggedDouble dp_dt\n"
"FlaggedDouble dq_dt\n"
"FlaggedDouble dr_dt\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: ds_core_msgs/DsHeader\n"
"# This is half our standard header for ds_msgs; see\n"
"# HEADERS.md for details\n"
"\n"
"# This header should ALWAYS be paired with a std_msgs/Header\n"
"# and should ALWAYS reference HEADERS.md.  If you're looking at this\n"
"# file to add headers to a type, you probably want to copy/paste\n"
"# the following block:\n"
"#\n"
"#     # The standard 2-part DsHeader block\n"
"#     # This allows both a standard ROS header and DS-specific header blocks\n"
"#     # See HEADERS.md in ds_core_msgs for details\n"
"#     std_msgs/Header header\n"
"#     ds_core_msgs/DsHeader ds_header\n"
"#\n"
"\n"
"# Time data was received or sent out (i/o time)\n"
"time io_time\n"
"\n"
"# Sensor source UUID\n"
"uint8[16] source_uuid\n"
"\n"
"\n"
"================================================================================\n"
"MSG: ds_nav_msgs/FlaggedDouble\n"
"# This enum states whether or not a particular DOF value is valid\n"
"uint8 VALUE_INVALID=0\n"
"uint8 VALUE_VALID=1\n"
"\n"
"float64 value\n"
"uint8   valid\n"
;
  }

  static const char* value(const ::ds_nav_msgs::AggregatedState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ds_nav_msgs::AggregatedState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.ds_header);
      stream.next(m.northing);
      stream.next(m.easting);
      stream.next(m.down);
      stream.next(m.roll);
      stream.next(m.pitch);
      stream.next(m.heading);
      stream.next(m.surge_u);
      stream.next(m.sway_v);
      stream.next(m.heave_w);
      stream.next(m.p);
      stream.next(m.q);
      stream.next(m.r);
      stream.next(m.du_dt);
      stream.next(m.dv_dt);
      stream.next(m.dw_dt);
      stream.next(m.dp_dt);
      stream.next(m.dq_dt);
      stream.next(m.dr_dt);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AggregatedState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ds_nav_msgs::AggregatedState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ds_nav_msgs::AggregatedState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "ds_header: ";
    s << std::endl;
    Printer< ::ds_core_msgs::DsHeader_<ContainerAllocator> >::stream(s, indent + "  ", v.ds_header);
    s << indent << "northing: ";
    s << std::endl;
    Printer< ::ds_nav_msgs::FlaggedDouble_<ContainerAllocator> >::stream(s, indent + "  ", v.northing);
    s << indent << "easting: ";
    s << std::endl;
    Printer< ::ds_nav_msgs::FlaggedDouble_<ContainerAllocator> >::stream(s, indent + "  ", v.easting);
    s << indent << "down: ";
    s << std::endl;
    Printer< ::ds_nav_msgs::FlaggedDouble_<ContainerAllocator> >::stream(s, indent + "  ", v.down);
    s << indent << "roll: ";
    s << std::endl;
    Printer< ::ds_nav_msgs::FlaggedDouble_<ContainerAllocator> >::stream(s, indent + "  ", v.roll);
    s << indent << "pitch: ";
    s << std::endl;
    Printer< ::ds_nav_msgs::FlaggedDouble_<ContainerAllocator> >::stream(s, indent + "  ", v.pitch);
    s << indent << "heading: ";
    s << std::endl;
    Printer< ::ds_nav_msgs::FlaggedDouble_<ContainerAllocator> >::stream(s, indent + "  ", v.heading);
    s << indent << "surge_u: ";
    s << std::endl;
    Printer< ::ds_nav_msgs::FlaggedDouble_<ContainerAllocator> >::stream(s, indent + "  ", v.surge_u);
    s << indent << "sway_v: ";
    s << std::endl;
    Printer< ::ds_nav_msgs::FlaggedDouble_<ContainerAllocator> >::stream(s, indent + "  ", v.sway_v);
    s << indent << "heave_w: ";
    s << std::endl;
    Printer< ::ds_nav_msgs::FlaggedDouble_<ContainerAllocator> >::stream(s, indent + "  ", v.heave_w);
    s << indent << "p: ";
    s << std::endl;
    Printer< ::ds_nav_msgs::FlaggedDouble_<ContainerAllocator> >::stream(s, indent + "  ", v.p);
    s << indent << "q: ";
    s << std::endl;
    Printer< ::ds_nav_msgs::FlaggedDouble_<ContainerAllocator> >::stream(s, indent + "  ", v.q);
    s << indent << "r: ";
    s << std::endl;
    Printer< ::ds_nav_msgs::FlaggedDouble_<ContainerAllocator> >::stream(s, indent + "  ", v.r);
    s << indent << "du_dt: ";
    s << std::endl;
    Printer< ::ds_nav_msgs::FlaggedDouble_<ContainerAllocator> >::stream(s, indent + "  ", v.du_dt);
    s << indent << "dv_dt: ";
    s << std::endl;
    Printer< ::ds_nav_msgs::FlaggedDouble_<ContainerAllocator> >::stream(s, indent + "  ", v.dv_dt);
    s << indent << "dw_dt: ";
    s << std::endl;
    Printer< ::ds_nav_msgs::FlaggedDouble_<ContainerAllocator> >::stream(s, indent + "  ", v.dw_dt);
    s << indent << "dp_dt: ";
    s << std::endl;
    Printer< ::ds_nav_msgs::FlaggedDouble_<ContainerAllocator> >::stream(s, indent + "  ", v.dp_dt);
    s << indent << "dq_dt: ";
    s << std::endl;
    Printer< ::ds_nav_msgs::FlaggedDouble_<ContainerAllocator> >::stream(s, indent + "  ", v.dq_dt);
    s << indent << "dr_dt: ";
    s << std::endl;
    Printer< ::ds_nav_msgs::FlaggedDouble_<ContainerAllocator> >::stream(s, indent + "  ", v.dr_dt);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DS_NAV_MSGS_MESSAGE_AGGREGATEDSTATE_H
