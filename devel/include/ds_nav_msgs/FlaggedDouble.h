// Generated by gencpp from file ds_nav_msgs/FlaggedDouble.msg
// DO NOT EDIT!


#ifndef DS_NAV_MSGS_MESSAGE_FLAGGEDDOUBLE_H
#define DS_NAV_MSGS_MESSAGE_FLAGGEDDOUBLE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ds_nav_msgs
{
template <class ContainerAllocator>
struct FlaggedDouble_
{
  typedef FlaggedDouble_<ContainerAllocator> Type;

  FlaggedDouble_()
    : value(0.0)
    , valid(0)  {
    }
  FlaggedDouble_(const ContainerAllocator& _alloc)
    : value(0.0)
    , valid(0)  {
  (void)_alloc;
    }



   typedef double _value_type;
  _value_type value;

   typedef uint8_t _valid_type;
  _valid_type valid;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(VALUE_INVALID)
  #undef VALUE_INVALID
#endif
#if defined(_WIN32) && defined(VALUE_VALID)
  #undef VALUE_VALID
#endif

  enum {
    VALUE_INVALID = 0u,
    VALUE_VALID = 1u,
  };


  typedef boost::shared_ptr< ::ds_nav_msgs::FlaggedDouble_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ds_nav_msgs::FlaggedDouble_<ContainerAllocator> const> ConstPtr;

}; // struct FlaggedDouble_

typedef ::ds_nav_msgs::FlaggedDouble_<std::allocator<void> > FlaggedDouble;

typedef boost::shared_ptr< ::ds_nav_msgs::FlaggedDouble > FlaggedDoublePtr;
typedef boost::shared_ptr< ::ds_nav_msgs::FlaggedDouble const> FlaggedDoubleConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ds_nav_msgs::FlaggedDouble_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ds_nav_msgs::FlaggedDouble_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ds_nav_msgs::FlaggedDouble_<ContainerAllocator1> & lhs, const ::ds_nav_msgs::FlaggedDouble_<ContainerAllocator2> & rhs)
{
  return lhs.value == rhs.value &&
    lhs.valid == rhs.valid;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ds_nav_msgs::FlaggedDouble_<ContainerAllocator1> & lhs, const ::ds_nav_msgs::FlaggedDouble_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ds_nav_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ds_nav_msgs::FlaggedDouble_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ds_nav_msgs::FlaggedDouble_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_nav_msgs::FlaggedDouble_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_nav_msgs::FlaggedDouble_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_nav_msgs::FlaggedDouble_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_nav_msgs::FlaggedDouble_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ds_nav_msgs::FlaggedDouble_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f54480ff06b4a7dc39f18f7b589bb887";
  }

  static const char* value(const ::ds_nav_msgs::FlaggedDouble_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf54480ff06b4a7dcULL;
  static const uint64_t static_value2 = 0x39f18f7b589bb887ULL;
};

template<class ContainerAllocator>
struct DataType< ::ds_nav_msgs::FlaggedDouble_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ds_nav_msgs/FlaggedDouble";
  }

  static const char* value(const ::ds_nav_msgs::FlaggedDouble_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ds_nav_msgs::FlaggedDouble_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This enum states whether or not a particular DOF value is valid\n"
"uint8 VALUE_INVALID=0\n"
"uint8 VALUE_VALID=1\n"
"\n"
"float64 value\n"
"uint8   valid\n"
;
  }

  static const char* value(const ::ds_nav_msgs::FlaggedDouble_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ds_nav_msgs::FlaggedDouble_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.value);
      stream.next(m.valid);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FlaggedDouble_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ds_nav_msgs::FlaggedDouble_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ds_nav_msgs::FlaggedDouble_<ContainerAllocator>& v)
  {
    s << indent << "value: ";
    Printer<double>::stream(s, indent + "  ", v.value);
    s << indent << "valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.valid);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DS_NAV_MSGS_MESSAGE_FLAGGEDDOUBLE_H
