// Generated by gencpp from file ds_nav_msgs/DeadReck.msg
// DO NOT EDIT!


#ifndef DS_NAV_MSGS_MESSAGE_DEADRECK_H
#define DS_NAV_MSGS_MESSAGE_DEADRECK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <ds_core_msgs/DsHeader.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>

namespace ds_nav_msgs
{
template <class ContainerAllocator>
struct DeadReck_
{
  typedef DeadReck_<ContainerAllocator> Type;

  DeadReck_()
    : header()
    , ds_header()
    , dvl_speed()
    , dvl_scaled()
    , dvl_scaled_tfd()
    , dvl_scaled_tfd_world()
    , dt(0.0)
    , scale_factor(0.0)
    , used_ss(0.0)
    , dvl_ss(0.0)
    , active_velocity_source(0)  {
    }
  DeadReck_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , ds_header(_alloc)
    , dvl_speed(_alloc)
    , dvl_scaled(_alloc)
    , dvl_scaled_tfd(_alloc)
    , dvl_scaled_tfd_world(_alloc)
    , dt(0.0)
    , scale_factor(0.0)
    , used_ss(0.0)
    , dvl_ss(0.0)
    , active_velocity_source(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::ds_core_msgs::DsHeader_<ContainerAllocator>  _ds_header_type;
  _ds_header_type ds_header;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _dvl_speed_type;
  _dvl_speed_type dvl_speed;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _dvl_scaled_type;
  _dvl_scaled_type dvl_scaled;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _dvl_scaled_tfd_type;
  _dvl_scaled_tfd_type dvl_scaled_tfd;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _dvl_scaled_tfd_world_type;
  _dvl_scaled_tfd_world_type dvl_scaled_tfd_world;

   typedef double _dt_type;
  _dt_type dt;

   typedef double _scale_factor_type;
  _scale_factor_type scale_factor;

   typedef double _used_ss_type;
  _used_ss_type used_ss;

   typedef double _dvl_ss_type;
  _dvl_ss_type dvl_ss;

   typedef uint8_t _active_velocity_source_type;
  _active_velocity_source_type active_velocity_source;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(SOURCE_DVL)
  #undef SOURCE_DVL
#endif
#if defined(_WIN32) && defined(SOURCE_DVL_HOLD)
  #undef SOURCE_DVL_HOLD
#endif
#if defined(_WIN32) && defined(SOURCE_MODEL)
  #undef SOURCE_MODEL
#endif

  enum {
    SOURCE_DVL = 0u,
    SOURCE_DVL_HOLD = 1u,
    SOURCE_MODEL = 2u,
  };


  typedef boost::shared_ptr< ::ds_nav_msgs::DeadReck_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ds_nav_msgs::DeadReck_<ContainerAllocator> const> ConstPtr;

}; // struct DeadReck_

typedef ::ds_nav_msgs::DeadReck_<std::allocator<void> > DeadReck;

typedef boost::shared_ptr< ::ds_nav_msgs::DeadReck > DeadReckPtr;
typedef boost::shared_ptr< ::ds_nav_msgs::DeadReck const> DeadReckConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ds_nav_msgs::DeadReck_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ds_nav_msgs::DeadReck_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ds_nav_msgs::DeadReck_<ContainerAllocator1> & lhs, const ::ds_nav_msgs::DeadReck_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.ds_header == rhs.ds_header &&
    lhs.dvl_speed == rhs.dvl_speed &&
    lhs.dvl_scaled == rhs.dvl_scaled &&
    lhs.dvl_scaled_tfd == rhs.dvl_scaled_tfd &&
    lhs.dvl_scaled_tfd_world == rhs.dvl_scaled_tfd_world &&
    lhs.dt == rhs.dt &&
    lhs.scale_factor == rhs.scale_factor &&
    lhs.used_ss == rhs.used_ss &&
    lhs.dvl_ss == rhs.dvl_ss &&
    lhs.active_velocity_source == rhs.active_velocity_source;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ds_nav_msgs::DeadReck_<ContainerAllocator1> & lhs, const ::ds_nav_msgs::DeadReck_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ds_nav_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ds_nav_msgs::DeadReck_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ds_nav_msgs::DeadReck_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_nav_msgs::DeadReck_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_nav_msgs::DeadReck_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_nav_msgs::DeadReck_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_nav_msgs::DeadReck_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ds_nav_msgs::DeadReck_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fcc428b5470daab7eed5d1df7de0610d";
  }

  static const char* value(const ::ds_nav_msgs::DeadReck_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfcc428b5470daab7ULL;
  static const uint64_t static_value2 = 0xeed5d1df7de0610dULL;
};

template<class ContainerAllocator>
struct DataType< ::ds_nav_msgs::DeadReck_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ds_nav_msgs/DeadReck";
  }

  static const char* value(const ::ds_nav_msgs::DeadReck_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ds_nav_msgs::DeadReck_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# The standard 2-part DsHeader block\n"
"# This allows both a standard ROS header and DS-specific header blocks\n"
"# See HEADERS.md in ds_core_msgs for details\n"
"std_msgs/Header header\n"
"ds_core_msgs/DsHeader ds_header\n"
"\n"
"# Raw dvl velocities in instrument frame\n"
"geometry_msgs/Vector3 dvl_speed\n"
"# Raw dvl velocities in instrument frame, scaled by speed of sound ratio\n"
"geometry_msgs/Vector3 dvl_scaled\n"
"# Dvl velocities in vehicle frame, scaled by speed of sound ratio\n"
"geometry_msgs/Vector3 dvl_scaled_tfd\n"
"# Dvl velocities in world frame, scaled by speed of sound ratio\n"
"geometry_msgs/Vector3 dvl_scaled_tfd_world\n"
"\n"
"\n"
"# Integration timestep\n"
"float64 dt\n"
"\n"
"# Ratio between used sound speed and dvl sound speed\n"
"float64 scale_factor\n"
"float64 used_ss\n"
"float64 dvl_ss\n"
"\n"
"# Define source of velocities being used\n"
"uint8 SOURCE_DVL=0\n"
"uint8 SOURCE_DVL_HOLD=1\n"
"uint8 SOURCE_MODEL=2\n"
"uint8 active_velocity_source\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: ds_core_msgs/DsHeader\n"
"# This is half our standard header for ds_msgs; see\n"
"# HEADERS.md for details\n"
"\n"
"# This header should ALWAYS be paired with a std_msgs/Header\n"
"# and should ALWAYS reference HEADERS.md.  If you're looking at this\n"
"# file to add headers to a type, you probably want to copy/paste\n"
"# the following block:\n"
"#\n"
"#     # The standard 2-part DsHeader block\n"
"#     # This allows both a standard ROS header and DS-specific header blocks\n"
"#     # See HEADERS.md in ds_core_msgs for details\n"
"#     std_msgs/Header header\n"
"#     ds_core_msgs/DsHeader ds_header\n"
"#\n"
"\n"
"# Time data was received or sent out (i/o time)\n"
"time io_time\n"
"\n"
"# Sensor source UUID\n"
"uint8[16] source_uuid\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::ds_nav_msgs::DeadReck_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ds_nav_msgs::DeadReck_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.ds_header);
      stream.next(m.dvl_speed);
      stream.next(m.dvl_scaled);
      stream.next(m.dvl_scaled_tfd);
      stream.next(m.dvl_scaled_tfd_world);
      stream.next(m.dt);
      stream.next(m.scale_factor);
      stream.next(m.used_ss);
      stream.next(m.dvl_ss);
      stream.next(m.active_velocity_source);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DeadReck_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ds_nav_msgs::DeadReck_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ds_nav_msgs::DeadReck_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "ds_header: ";
    s << std::endl;
    Printer< ::ds_core_msgs::DsHeader_<ContainerAllocator> >::stream(s, indent + "  ", v.ds_header);
    s << indent << "dvl_speed: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.dvl_speed);
    s << indent << "dvl_scaled: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.dvl_scaled);
    s << indent << "dvl_scaled_tfd: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.dvl_scaled_tfd);
    s << indent << "dvl_scaled_tfd_world: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.dvl_scaled_tfd_world);
    s << indent << "dt: ";
    Printer<double>::stream(s, indent + "  ", v.dt);
    s << indent << "scale_factor: ";
    Printer<double>::stream(s, indent + "  ", v.scale_factor);
    s << indent << "used_ss: ";
    Printer<double>::stream(s, indent + "  ", v.used_ss);
    s << indent << "dvl_ss: ";
    Printer<double>::stream(s, indent + "  ", v.dvl_ss);
    s << indent << "active_velocity_source: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.active_velocity_source);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DS_NAV_MSGS_MESSAGE_DEADRECK_H
