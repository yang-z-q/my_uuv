// Generated by gencpp from file ds_nav_msgs/ResetDvlRequest.msg
// DO NOT EDIT!


#ifndef DS_NAV_MSGS_MESSAGE_RESETDVLREQUEST_H
#define DS_NAV_MSGS_MESSAGE_RESETDVLREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ds_nav_msgs
{
template <class ContainerAllocator>
struct ResetDvlRequest_
{
  typedef ResetDvlRequest_<ContainerAllocator> Type;

  ResetDvlRequest_()
    : reset_easting(0.0)
    , reset_northing(0.0)  {
    }
  ResetDvlRequest_(const ContainerAllocator& _alloc)
    : reset_easting(0.0)
    , reset_northing(0.0)  {
  (void)_alloc;
    }



   typedef double _reset_easting_type;
  _reset_easting_type reset_easting;

   typedef double _reset_northing_type;
  _reset_northing_type reset_northing;





  typedef boost::shared_ptr< ::ds_nav_msgs::ResetDvlRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ds_nav_msgs::ResetDvlRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ResetDvlRequest_

typedef ::ds_nav_msgs::ResetDvlRequest_<std::allocator<void> > ResetDvlRequest;

typedef boost::shared_ptr< ::ds_nav_msgs::ResetDvlRequest > ResetDvlRequestPtr;
typedef boost::shared_ptr< ::ds_nav_msgs::ResetDvlRequest const> ResetDvlRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ds_nav_msgs::ResetDvlRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ds_nav_msgs::ResetDvlRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ds_nav_msgs::ResetDvlRequest_<ContainerAllocator1> & lhs, const ::ds_nav_msgs::ResetDvlRequest_<ContainerAllocator2> & rhs)
{
  return lhs.reset_easting == rhs.reset_easting &&
    lhs.reset_northing == rhs.reset_northing;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ds_nav_msgs::ResetDvlRequest_<ContainerAllocator1> & lhs, const ::ds_nav_msgs::ResetDvlRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ds_nav_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ds_nav_msgs::ResetDvlRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ds_nav_msgs::ResetDvlRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_nav_msgs::ResetDvlRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_nav_msgs::ResetDvlRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_nav_msgs::ResetDvlRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_nav_msgs::ResetDvlRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ds_nav_msgs::ResetDvlRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aaffe85a9bdafc7d7e9450ac5e3441b3";
  }

  static const char* value(const ::ds_nav_msgs::ResetDvlRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xaaffe85a9bdafc7dULL;
  static const uint64_t static_value2 = 0x7e9450ac5e3441b3ULL;
};

template<class ContainerAllocator>
struct DataType< ::ds_nav_msgs::ResetDvlRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ds_nav_msgs/ResetDvlRequest";
  }

  static const char* value(const ::ds_nav_msgs::ResetDvlRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ds_nav_msgs::ResetDvlRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 reset_easting\n"
"float64 reset_northing\n"
;
  }

  static const char* value(const ::ds_nav_msgs::ResetDvlRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ds_nav_msgs::ResetDvlRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.reset_easting);
      stream.next(m.reset_northing);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ResetDvlRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ds_nav_msgs::ResetDvlRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ds_nav_msgs::ResetDvlRequest_<ContainerAllocator>& v)
  {
    s << indent << "reset_easting: ";
    Printer<double>::stream(s, indent + "  ", v.reset_easting);
    s << indent << "reset_northing: ";
    Printer<double>::stream(s, indent + "  ", v.reset_northing);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DS_NAV_MSGS_MESSAGE_RESETDVLREQUEST_H
