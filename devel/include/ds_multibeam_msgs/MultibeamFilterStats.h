// Generated by gencpp from file ds_multibeam_msgs/MultibeamFilterStats.msg
// DO NOT EDIT!


#ifndef DS_MULTIBEAM_MSGS_MESSAGE_MULTIBEAMFILTERSTATS_H
#define DS_MULTIBEAM_MSGS_MESSAGE_MULTIBEAMFILTERSTATS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ds_multibeam_msgs
{
template <class ContainerAllocator>
struct MultibeamFilterStats_
{
  typedef MultibeamFilterStats_<ContainerAllocator> Type;

  MultibeamFilterStats_()
    : soundings(0)
    , accepted(0)
    , preflagged(0)
    , range_condition(0)
    , altitude_condition(0)
    , depth_condition(0)
    , backup_condition(0)  {
    }
  MultibeamFilterStats_(const ContainerAllocator& _alloc)
    : soundings(0)
    , accepted(0)
    , preflagged(0)
    , range_condition(0)
    , altitude_condition(0)
    , depth_condition(0)
    , backup_condition(0)  {
  (void)_alloc;
    }



   typedef uint64_t _soundings_type;
  _soundings_type soundings;

   typedef uint64_t _accepted_type;
  _accepted_type accepted;

   typedef uint64_t _preflagged_type;
  _preflagged_type preflagged;

   typedef uint64_t _range_condition_type;
  _range_condition_type range_condition;

   typedef uint64_t _altitude_condition_type;
  _altitude_condition_type altitude_condition;

   typedef uint64_t _depth_condition_type;
  _depth_condition_type depth_condition;

   typedef uint64_t _backup_condition_type;
  _backup_condition_type backup_condition;





  typedef boost::shared_ptr< ::ds_multibeam_msgs::MultibeamFilterStats_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ds_multibeam_msgs::MultibeamFilterStats_<ContainerAllocator> const> ConstPtr;

}; // struct MultibeamFilterStats_

typedef ::ds_multibeam_msgs::MultibeamFilterStats_<std::allocator<void> > MultibeamFilterStats;

typedef boost::shared_ptr< ::ds_multibeam_msgs::MultibeamFilterStats > MultibeamFilterStatsPtr;
typedef boost::shared_ptr< ::ds_multibeam_msgs::MultibeamFilterStats const> MultibeamFilterStatsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ds_multibeam_msgs::MultibeamFilterStats_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ds_multibeam_msgs::MultibeamFilterStats_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ds_multibeam_msgs::MultibeamFilterStats_<ContainerAllocator1> & lhs, const ::ds_multibeam_msgs::MultibeamFilterStats_<ContainerAllocator2> & rhs)
{
  return lhs.soundings == rhs.soundings &&
    lhs.accepted == rhs.accepted &&
    lhs.preflagged == rhs.preflagged &&
    lhs.range_condition == rhs.range_condition &&
    lhs.altitude_condition == rhs.altitude_condition &&
    lhs.depth_condition == rhs.depth_condition &&
    lhs.backup_condition == rhs.backup_condition;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ds_multibeam_msgs::MultibeamFilterStats_<ContainerAllocator1> & lhs, const ::ds_multibeam_msgs::MultibeamFilterStats_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ds_multibeam_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ds_multibeam_msgs::MultibeamFilterStats_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ds_multibeam_msgs::MultibeamFilterStats_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_multibeam_msgs::MultibeamFilterStats_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_multibeam_msgs::MultibeamFilterStats_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_multibeam_msgs::MultibeamFilterStats_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_multibeam_msgs::MultibeamFilterStats_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ds_multibeam_msgs::MultibeamFilterStats_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6ec87b28dbe780d7bc9822273b67a219";
  }

  static const char* value(const ::ds_multibeam_msgs::MultibeamFilterStats_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6ec87b28dbe780d7ULL;
  static const uint64_t static_value2 = 0xbc9822273b67a219ULL;
};

template<class ContainerAllocator>
struct DataType< ::ds_multibeam_msgs::MultibeamFilterStats_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ds_multibeam_msgs/MultibeamFilterStats";
  }

  static const char* value(const ::ds_multibeam_msgs::MultibeamFilterStats_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ds_multibeam_msgs::MultibeamFilterStats_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Overall total / accepted\n"
"uint64 soundings\n"
"uint64 accepted\n"
"\n"
"# Reason points were not accepted, by criterion\n"
"uint64 preflagged\n"
"uint64 range_condition\n"
"uint64 altitude_condition\n"
"uint64 depth_condition\n"
"uint64 backup_condition\n"
;
  }

  static const char* value(const ::ds_multibeam_msgs::MultibeamFilterStats_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ds_multibeam_msgs::MultibeamFilterStats_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.soundings);
      stream.next(m.accepted);
      stream.next(m.preflagged);
      stream.next(m.range_condition);
      stream.next(m.altitude_condition);
      stream.next(m.depth_condition);
      stream.next(m.backup_condition);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MultibeamFilterStats_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ds_multibeam_msgs::MultibeamFilterStats_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ds_multibeam_msgs::MultibeamFilterStats_<ContainerAllocator>& v)
  {
    s << indent << "soundings: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.soundings);
    s << indent << "accepted: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.accepted);
    s << indent << "preflagged: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.preflagged);
    s << indent << "range_condition: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.range_condition);
    s << indent << "altitude_condition: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.altitude_condition);
    s << indent << "depth_condition: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.depth_condition);
    s << indent << "backup_condition: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.backup_condition);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DS_MULTIBEAM_MSGS_MESSAGE_MULTIBEAMFILTERSTATS_H
