// Generated by gencpp from file ds_multibeam_msgs/PingCmdRequest.msg
// DO NOT EDIT!


#ifndef DS_MULTIBEAM_MSGS_MESSAGE_PINGCMDREQUEST_H
#define DS_MULTIBEAM_MSGS_MESSAGE_PINGCMDREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ds_multibeam_msgs
{
template <class ContainerAllocator>
struct PingCmdRequest_
{
  typedef PingCmdRequest_<ContainerAllocator> Type;

  PingCmdRequest_()
    : ping(0)  {
    }
  PingCmdRequest_(const ContainerAllocator& _alloc)
    : ping(0)  {
  (void)_alloc;
    }



   typedef uint8_t _ping_type;
  _ping_type ping;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(PING_START)
  #undef PING_START
#endif
#if defined(_WIN32) && defined(PING_STOP)
  #undef PING_STOP
#endif

  enum {
    PING_START = 1u,
    PING_STOP = 2u,
  };


  typedef boost::shared_ptr< ::ds_multibeam_msgs::PingCmdRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ds_multibeam_msgs::PingCmdRequest_<ContainerAllocator> const> ConstPtr;

}; // struct PingCmdRequest_

typedef ::ds_multibeam_msgs::PingCmdRequest_<std::allocator<void> > PingCmdRequest;

typedef boost::shared_ptr< ::ds_multibeam_msgs::PingCmdRequest > PingCmdRequestPtr;
typedef boost::shared_ptr< ::ds_multibeam_msgs::PingCmdRequest const> PingCmdRequestConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ds_multibeam_msgs::PingCmdRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ds_multibeam_msgs::PingCmdRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ds_multibeam_msgs::PingCmdRequest_<ContainerAllocator1> & lhs, const ::ds_multibeam_msgs::PingCmdRequest_<ContainerAllocator2> & rhs)
{
  return lhs.ping == rhs.ping;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ds_multibeam_msgs::PingCmdRequest_<ContainerAllocator1> & lhs, const ::ds_multibeam_msgs::PingCmdRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ds_multibeam_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ds_multibeam_msgs::PingCmdRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ds_multibeam_msgs::PingCmdRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_multibeam_msgs::PingCmdRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_multibeam_msgs::PingCmdRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_multibeam_msgs::PingCmdRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_multibeam_msgs::PingCmdRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ds_multibeam_msgs::PingCmdRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "10a7295c9ab48b57d9ed5995d795bacc";
  }

  static const char* value(const ::ds_multibeam_msgs::PingCmdRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x10a7295c9ab48b57ULL;
  static const uint64_t static_value2 = 0xd9ed5995d795baccULL;
};

template<class ContainerAllocator>
struct DataType< ::ds_multibeam_msgs::PingCmdRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ds_multibeam_msgs/PingCmdRequest";
  }

  static const char* value(const ::ds_multibeam_msgs::PingCmdRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ds_multibeam_msgs::PingCmdRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 PING_START=1\n"
"uint8 PING_STOP=2\n"
"\n"
"uint8 ping\n"
;
  }

  static const char* value(const ::ds_multibeam_msgs::PingCmdRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ds_multibeam_msgs::PingCmdRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ping);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PingCmdRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ds_multibeam_msgs::PingCmdRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ds_multibeam_msgs::PingCmdRequest_<ContainerAllocator>& v)
  {
    s << indent << "ping: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ping);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DS_MULTIBEAM_MSGS_MESSAGE_PINGCMDREQUEST_H
