// Generated by gencpp from file ds_nmea_msgs/PixseAtitud.msg
// DO NOT EDIT!


#ifndef DS_NMEA_MSGS_MESSAGE_PIXSEATITUD_H
#define DS_NMEA_MSGS_MESSAGE_PIXSEATITUD_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ds_nmea_msgs
{
template <class ContainerAllocator>
struct PixseAtitud_
{
  typedef PixseAtitud_<ContainerAllocator> Type;

  PixseAtitud_()
    : roll(0.0)
    , pitch(0.0)
    , checksum(0)  {
    }
  PixseAtitud_(const ContainerAllocator& _alloc)
    : roll(0.0)
    , pitch(0.0)
    , checksum(0)  {
  (void)_alloc;
    }



   typedef double _roll_type;
  _roll_type roll;

   typedef double _pitch_type;
  _pitch_type pitch;

   typedef uint8_t _checksum_type;
  _checksum_type checksum;





  typedef boost::shared_ptr< ::ds_nmea_msgs::PixseAtitud_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ds_nmea_msgs::PixseAtitud_<ContainerAllocator> const> ConstPtr;

}; // struct PixseAtitud_

typedef ::ds_nmea_msgs::PixseAtitud_<std::allocator<void> > PixseAtitud;

typedef boost::shared_ptr< ::ds_nmea_msgs::PixseAtitud > PixseAtitudPtr;
typedef boost::shared_ptr< ::ds_nmea_msgs::PixseAtitud const> PixseAtitudConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ds_nmea_msgs::PixseAtitud_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ds_nmea_msgs::PixseAtitud_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ds_nmea_msgs::PixseAtitud_<ContainerAllocator1> & lhs, const ::ds_nmea_msgs::PixseAtitud_<ContainerAllocator2> & rhs)
{
  return lhs.roll == rhs.roll &&
    lhs.pitch == rhs.pitch &&
    lhs.checksum == rhs.checksum;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ds_nmea_msgs::PixseAtitud_<ContainerAllocator1> & lhs, const ::ds_nmea_msgs::PixseAtitud_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ds_nmea_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ds_nmea_msgs::PixseAtitud_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ds_nmea_msgs::PixseAtitud_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_nmea_msgs::PixseAtitud_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_nmea_msgs::PixseAtitud_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_nmea_msgs::PixseAtitud_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_nmea_msgs::PixseAtitud_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ds_nmea_msgs::PixseAtitud_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4c177b93b81f5ba0a1f0413ac003116a";
  }

  static const char* value(const ::ds_nmea_msgs::PixseAtitud_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4c177b93b81f5ba0ULL;
  static const uint64_t static_value2 = 0xa1f0413ac003116aULL;
};

template<class ContainerAllocator>
struct DataType< ::ds_nmea_msgs::PixseAtitud_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ds_nmea_msgs/PixseAtitud";
  }

  static const char* value(const ::ds_nmea_msgs::PixseAtitud_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ds_nmea_msgs::PixseAtitud_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# $PIXSE,ATITUD,x.xxx,y.yyy*hh<CR><LF>\n"
"# where:\n"
"# x.xxx* or x.xxxxx is the roll in degrees (Sign “+” when port up)\n"
"# y.yyy* or y.yyyyy is the pitch in degrees\n"
"\n"
"float64 roll\n"
"float64 pitch\n"
"uint8 checksum\n"
;
  }

  static const char* value(const ::ds_nmea_msgs::PixseAtitud_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ds_nmea_msgs::PixseAtitud_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.roll);
      stream.next(m.pitch);
      stream.next(m.checksum);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PixseAtitud_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ds_nmea_msgs::PixseAtitud_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ds_nmea_msgs::PixseAtitud_<ContainerAllocator>& v)
  {
    s << indent << "roll: ";
    Printer<double>::stream(s, indent + "  ", v.roll);
    s << indent << "pitch: ";
    Printer<double>::stream(s, indent + "  ", v.pitch);
    s << indent << "checksum: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.checksum);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DS_NMEA_MSGS_MESSAGE_PIXSEATITUD_H
