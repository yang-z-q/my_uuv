// Generated by gencpp from file ds_nmea_msgs/Gll.msg
// DO NOT EDIT!


#ifndef DS_NMEA_MSGS_MESSAGE_GLL_H
#define DS_NMEA_MSGS_MESSAGE_GLL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ds_nmea_msgs
{
template <class ContainerAllocator>
struct Gll_
{
  typedef Gll_<ContainerAllocator> Type;

  Gll_()
    : talker()
    , latitude(0.0)
    , latitude_dir(0)
    , longitude(0.0)
    , longitude_dir(0)
    , timestamp()
    , status(0)
    , checksum(0)  {
    }
  Gll_(const ContainerAllocator& _alloc)
    : talker(_alloc)
    , latitude(0.0)
    , latitude_dir(0)
    , longitude(0.0)
    , longitude_dir(0)
    , timestamp()
    , status(0)
    , checksum(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _talker_type;
  _talker_type talker;

   typedef double _latitude_type;
  _latitude_type latitude;

   typedef uint8_t _latitude_dir_type;
  _latitude_dir_type latitude_dir;

   typedef double _longitude_type;
  _longitude_type longitude;

   typedef uint8_t _longitude_dir_type;
  _longitude_dir_type longitude_dir;

   typedef ros::Time _timestamp_type;
  _timestamp_type timestamp;

   typedef uint8_t _status_type;
  _status_type status;

   typedef uint8_t _checksum_type;
  _checksum_type checksum;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(GLL_NO_DATA)
  #undef GLL_NO_DATA
#endif
#if defined(_WIN32) && defined(GLL_DATA_VALID)
  #undef GLL_DATA_VALID
#endif
#if defined(_WIN32) && defined(GLL_DATA_INVALID)
  #undef GLL_DATA_INVALID
#endif

  enum {
    GLL_DATA_VALID = 65u,
    GLL_DATA_INVALID = 86u,
  };

  static const double GLL_NO_DATA;

  typedef boost::shared_ptr< ::ds_nmea_msgs::Gll_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ds_nmea_msgs::Gll_<ContainerAllocator> const> ConstPtr;

}; // struct Gll_

typedef ::ds_nmea_msgs::Gll_<std::allocator<void> > Gll;

typedef boost::shared_ptr< ::ds_nmea_msgs::Gll > GllPtr;
typedef boost::shared_ptr< ::ds_nmea_msgs::Gll const> GllConstPtr;

// constants requiring out of line definition

   
   template<typename ContainerAllocator> const double
      Gll_<ContainerAllocator>::GLL_NO_DATA =
        
          -999.999
        
        ;
   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ds_nmea_msgs::Gll_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ds_nmea_msgs::Gll_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ds_nmea_msgs::Gll_<ContainerAllocator1> & lhs, const ::ds_nmea_msgs::Gll_<ContainerAllocator2> & rhs)
{
  return lhs.talker == rhs.talker &&
    lhs.latitude == rhs.latitude &&
    lhs.latitude_dir == rhs.latitude_dir &&
    lhs.longitude == rhs.longitude &&
    lhs.longitude_dir == rhs.longitude_dir &&
    lhs.timestamp == rhs.timestamp &&
    lhs.status == rhs.status &&
    lhs.checksum == rhs.checksum;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ds_nmea_msgs::Gll_<ContainerAllocator1> & lhs, const ::ds_nmea_msgs::Gll_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ds_nmea_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ds_nmea_msgs::Gll_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ds_nmea_msgs::Gll_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_nmea_msgs::Gll_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_nmea_msgs::Gll_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_nmea_msgs::Gll_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_nmea_msgs::Gll_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ds_nmea_msgs::Gll_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3cbd960663673048b10980fd2d5a9b4e";
  }

  static const char* value(const ::ds_nmea_msgs::Gll_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3cbd960663673048ULL;
  static const uint64_t static_value2 = 0xb10980fd2d5a9b4eULL;
};

template<class ContainerAllocator>
struct DataType< ::ds_nmea_msgs::Gll_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ds_nmea_msgs/Gll";
  }

  static const char* value(const ::ds_nmea_msgs::Gll_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ds_nmea_msgs::Gll_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# .       1      2 3        4 5         6 7\n"
"#         |      | |        | |         | |\n"
"# $--GLL,llll.ll,a,yyyyy.yy,a,hhmmss.ss,A*hh\n"
"# 1) Latitude\n"
"# 2) N or S (North or South)\n"
"# 3) Longitude\n"
"# 4) E or W (East or West)\n"
"# 5) Time (UTC)\n"
"# 6) Status A - Data Valid, V - Data Invalid\n"
"# 7) Checksum\n"
"\n"
"float64    GLL_NO_DATA=-999.999\n"
"\n"
"uint8 GLL_DATA_VALID=65     # (ascii 'A')\n"
"uint8 GLL_DATA_INVALID=86   # (ascii 'V')\n"
"\n"
"string     talker\n"
"float64    latitude\n"
"uint8      latitude_dir\n"
"float64    longitude\n"
"uint8      longitude_dir\n"
"time       timestamp\n"
"uint8      status\n"
"uint8      checksum\n"
;
  }

  static const char* value(const ::ds_nmea_msgs::Gll_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ds_nmea_msgs::Gll_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.talker);
      stream.next(m.latitude);
      stream.next(m.latitude_dir);
      stream.next(m.longitude);
      stream.next(m.longitude_dir);
      stream.next(m.timestamp);
      stream.next(m.status);
      stream.next(m.checksum);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Gll_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ds_nmea_msgs::Gll_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ds_nmea_msgs::Gll_<ContainerAllocator>& v)
  {
    s << indent << "talker: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.talker);
    s << indent << "latitude: ";
    Printer<double>::stream(s, indent + "  ", v.latitude);
    s << indent << "latitude_dir: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.latitude_dir);
    s << indent << "longitude: ";
    Printer<double>::stream(s, indent + "  ", v.longitude);
    s << indent << "longitude_dir: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.longitude_dir);
    s << indent << "timestamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.timestamp);
    s << indent << "status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status);
    s << indent << "checksum: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.checksum);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DS_NMEA_MSGS_MESSAGE_GLL_H
