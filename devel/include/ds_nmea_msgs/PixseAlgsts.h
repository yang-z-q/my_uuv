// Generated by gencpp from file ds_nmea_msgs/PixseAlgsts.msg
// DO NOT EDIT!


#ifndef DS_NMEA_MSGS_MESSAGE_PIXSEALGSTS_H
#define DS_NMEA_MSGS_MESSAGE_PIXSEALGSTS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ds_nmea_msgs
{
template <class ContainerAllocator>
struct PixseAlgsts_
{
  typedef PixseAlgsts_<ContainerAllocator> Type;

  PixseAlgsts_()
    : status(0)
    , checksum(0)  {
    }
  PixseAlgsts_(const ContainerAllocator& _alloc)
    : status(0)
    , checksum(0)  {
  (void)_alloc;
    }



   typedef uint64_t _status_type;
  _status_type status;

   typedef uint8_t _checksum_type;
  _checksum_type checksum;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(OPERATION_MODE_NAVIGATION)
  #undef OPERATION_MODE_NAVIGATION
#endif
#if defined(_WIN32) && defined(OPERATION_MODE_ALIGNMENT)
  #undef OPERATION_MODE_ALIGNMENT
#endif
#if defined(_WIN32) && defined(OPERATION_MODE_FINE_ALIGNMENT)
  #undef OPERATION_MODE_FINE_ALIGNMENT
#endif
#if defined(_WIN32) && defined(OPERATION_MODE_DECK_RECKONING)
  #undef OPERATION_MODE_DECK_RECKONING
#endif
#if defined(_WIN32) && defined(ALTITUDE_USING_GPS)
  #undef ALTITUDE_USING_GPS
#endif
#if defined(_WIN32) && defined(ALTITUDE_USING_DEPTH)
  #undef ALTITUDE_USING_DEPTH
#endif
#if defined(_WIN32) && defined(ALTITUDE_SABLILIZED)
  #undef ALTITUDE_SABLILIZED
#endif
#if defined(_WIN32) && defined(ALTITUDE_HYDRO)
  #undef ALTITUDE_HYDRO
#endif
#if defined(_WIN32) && defined(LOG_USED)
  #undef LOG_USED
#endif
#if defined(_WIN32) && defined(LOG_DATA_VALID)
  #undef LOG_DATA_VALID
#endif
#if defined(_WIN32) && defined(LOG_WAITING_FOR_DATA)
  #undef LOG_WAITING_FOR_DATA
#endif
#if defined(_WIN32) && defined(LOG_DATA_REJECTED)
  #undef LOG_DATA_REJECTED
#endif
#if defined(_WIN32) && defined(GPS_USED)
  #undef GPS_USED
#endif
#if defined(_WIN32) && defined(GPS_DATA_VALID)
  #undef GPS_DATA_VALID
#endif
#if defined(_WIN32) && defined(GPS_WAITING_FOR_DATA)
  #undef GPS_WAITING_FOR_DATA
#endif
#if defined(_WIN32) && defined(GPS_DATA_REJECTED)
  #undef GPS_DATA_REJECTED
#endif
#if defined(_WIN32) && defined(USBL_USED)
  #undef USBL_USED
#endif
#if defined(_WIN32) && defined(USBL_DATA_VALID)
  #undef USBL_DATA_VALID
#endif
#if defined(_WIN32) && defined(USBL_WAITING_FOR_DATA)
  #undef USBL_WAITING_FOR_DATA
#endif
#if defined(_WIN32) && defined(USBL_DATA_REJECTED)
  #undef USBL_DATA_REJECTED
#endif
#if defined(_WIN32) && defined(DEPTH_USED)
  #undef DEPTH_USED
#endif
#if defined(_WIN32) && defined(DEPTH_DATA_VALID)
  #undef DEPTH_DATA_VALID
#endif
#if defined(_WIN32) && defined(DEPTH_WAITING_FOR_DATA)
  #undef DEPTH_WAITING_FOR_DATA
#endif
#if defined(_WIN32) && defined(DEPTH_DATA_REJECTED)
  #undef DEPTH_DATA_REJECTED
#endif
#if defined(_WIN32) && defined(LBL_USED)
  #undef LBL_USED
#endif
#if defined(_WIN32) && defined(LBL_DATA_VALID)
  #undef LBL_DATA_VALID
#endif
#if defined(_WIN32) && defined(LBL_WAITING_FOR_DATA)
  #undef LBL_WAITING_FOR_DATA
#endif
#if defined(_WIN32) && defined(LBL_DATA_REJECTED)
  #undef LBL_DATA_REJECTED
#endif
#if defined(_WIN32) && defined(ALTITUDE_SATURATED)
  #undef ALTITUDE_SATURATED
#endif
#if defined(_WIN32) && defined(SPEED_SATURATED)
  #undef SPEED_SATURATED
#endif
#if defined(_WIN32) && defined(RESERVED_1)
  #undef RESERVED_1
#endif
#if defined(_WIN32) && defined(RESERVED_2)
  #undef RESERVED_2
#endif
#if defined(_WIN32) && defined(WATER_TRACK_USED)
  #undef WATER_TRACK_USED
#endif
#if defined(_WIN32) && defined(WATER_TRACK_DATA_VALID)
  #undef WATER_TRACK_DATA_VALID
#endif
#if defined(_WIN32) && defined(WATER_TRACK_WAITING_FOR_DATA)
  #undef WATER_TRACK_WAITING_FOR_DATA
#endif
#if defined(_WIN32) && defined(WATER_TRACK_REJECTED)
  #undef WATER_TRACK_REJECTED
#endif
#if defined(_WIN32) && defined(GPS2_USED)
  #undef GPS2_USED
#endif
#if defined(_WIN32) && defined(GPS2_DATA_VALID)
  #undef GPS2_DATA_VALID
#endif
#if defined(_WIN32) && defined(GPS2_WAITING_FOR_DATA)
  #undef GPS2_WAITING_FOR_DATA
#endif
#if defined(_WIN32) && defined(GPS2_DATA_REJECTED)
  #undef GPS2_DATA_REJECTED
#endif
#if defined(_WIN32) && defined(METROLOGY_USED)
  #undef METROLOGY_USED
#endif
#if defined(_WIN32) && defined(METROLOGY_DATA_VALID)
  #undef METROLOGY_DATA_VALID
#endif
#if defined(_WIN32) && defined(METROLOGY_WAITING_FOR_DATA)
  #undef METROLOGY_WAITING_FOR_DATA
#endif
#if defined(_WIN32) && defined(METROLOGY_DATA_REJECTED)
  #undef METROLOGY_DATA_REJECTED
#endif
#if defined(_WIN32) && defined(ALTITUDE_USED)
  #undef ALTITUDE_USED
#endif
#if defined(_WIN32) && defined(ALTITUDE_DATA_VALID)
  #undef ALTITUDE_DATA_VALID
#endif
#if defined(_WIN32) && defined(ALTITUDE_WAITING_FOR_DATA)
  #undef ALTITUDE_WAITING_FOR_DATA
#endif
#if defined(_WIN32) && defined(ALTITUDE_DATA_REJECTED)
  #undef ALTITUDE_DATA_REJECTED
#endif
#if defined(_WIN32) && defined(OPERATION_MODE_ZUP)
  #undef OPERATION_MODE_ZUP
#endif
#if defined(_WIN32) && defined(ZUP_VALID)
  #undef ZUP_VALID
#endif
#if defined(_WIN32) && defined(OPERATION_MODE_ZUP_VALID)
  #undef OPERATION_MODE_ZUP_VALID
#endif
#if defined(_WIN32) && defined(ZUP_BENCH_VALID)
  #undef ZUP_BENCH_VALID
#endif
#if defined(_WIN32) && defined(STATIC_ALIGNMENT)
  #undef STATIC_ALIGNMENT
#endif
#if defined(_WIN32) && defined(GO_TO_NAV)
  #undef GO_TO_NAV
#endif
#if defined(_WIN32) && defined(RESERVED_3)
  #undef RESERVED_3
#endif
#if defined(_WIN32) && defined(RESERVED_4)
  #undef RESERVED_4
#endif
#if defined(_WIN32) && defined(EM_LOG_USED)
  #undef EM_LOG_USED
#endif
#if defined(_WIN32) && defined(EM_LOG_DATA_VALID)
  #undef EM_LOG_DATA_VALID
#endif
#if defined(_WIN32) && defined(EM_LOG_WAITING_FOR_DATA)
  #undef EM_LOG_WAITING_FOR_DATA
#endif
#if defined(_WIN32) && defined(EM_LOG_DATA_REJECTED)
  #undef EM_LOG_DATA_REJECTED
#endif
#if defined(_WIN32) && defined(GPS_MANUAL_USED)
  #undef GPS_MANUAL_USED
#endif
#if defined(_WIN32) && defined(GPS_MANUAL_DATA_VALID)
  #undef GPS_MANUAL_DATA_VALID
#endif
#if defined(_WIN32) && defined(GPS_MANUAL_WAITING_FOR_DATA)
  #undef GPS_MANUAL_WAITING_FOR_DATA
#endif
#if defined(_WIN32) && defined(GPS_MANUAL_DATA_REJECTED)
  #undef GPS_MANUAL_DATA_REJECTED
#endif

  enum {
    OPERATION_MODE_NAVIGATION = 1u,
    OPERATION_MODE_ALIGNMENT = 2u,
    OPERATION_MODE_FINE_ALIGNMENT = 4u,
    OPERATION_MODE_DECK_RECKONING = 8u,
    ALTITUDE_USING_GPS = 16u,
    ALTITUDE_USING_DEPTH = 32u,
    ALTITUDE_SABLILIZED = 64u,
    ALTITUDE_HYDRO = 128u,
    LOG_USED = 256u,
    LOG_DATA_VALID = 512u,
    LOG_WAITING_FOR_DATA = 1024u,
    LOG_DATA_REJECTED = 2048u,
    GPS_USED = 4096u,
    GPS_DATA_VALID = 8192u,
    GPS_WAITING_FOR_DATA = 16384u,
    GPS_DATA_REJECTED = 32768u,
    USBL_USED = 65536u,
    USBL_DATA_VALID = 131072u,
    USBL_WAITING_FOR_DATA = 262144u,
    USBL_DATA_REJECTED = 524288u,
    DEPTH_USED = 1048576u,
    DEPTH_DATA_VALID = 2097152u,
    DEPTH_WAITING_FOR_DATA = 4194304u,
    DEPTH_DATA_REJECTED = 8388608u,
    LBL_USED = 16777216u,
    LBL_DATA_VALID = 33554432u,
    LBL_WAITING_FOR_DATA = 67108864u,
    LBL_DATA_REJECTED = 134217728u,
    ALTITUDE_SATURATED = 268435456u,
    SPEED_SATURATED = 536870912u,
    RESERVED_1 = 1073741824u,
    RESERVED_2 = 2147483648u,
    WATER_TRACK_USED = 4294967296u,
    WATER_TRACK_DATA_VALID = 8589934592u,
    WATER_TRACK_WAITING_FOR_DATA = 17179869184u,
    WATER_TRACK_REJECTED = 34359738368u,
    GPS2_USED = 68719476736u,
    GPS2_DATA_VALID = 137438953472u,
    GPS2_WAITING_FOR_DATA = 274877906944u,
    GPS2_DATA_REJECTED = 549755813888u,
    METROLOGY_USED = 1099511627776u,
    METROLOGY_DATA_VALID = 2199023255552u,
    METROLOGY_WAITING_FOR_DATA = 4398046511104u,
    METROLOGY_DATA_REJECTED = 8796093022208u,
    ALTITUDE_USED = 17592186044416u,
    ALTITUDE_DATA_VALID = 35184372088832u,
    ALTITUDE_WAITING_FOR_DATA = 70368744177664u,
    ALTITUDE_DATA_REJECTED = 140737488355328u,
    OPERATION_MODE_ZUP = 281474976710656u,
    ZUP_VALID = 562949953421312u,
    OPERATION_MODE_ZUP_VALID = 1125899906842624u,
    ZUP_BENCH_VALID = 2251799813685248u,
    STATIC_ALIGNMENT = 4503599627370496u,
    GO_TO_NAV = 9007199254740992u,
    RESERVED_3 = 18014398509481984u,
    RESERVED_4 = 36028797018963968u,
    EM_LOG_USED = 72057594037927936u,
    EM_LOG_DATA_VALID = 144115188075855872u,
    EM_LOG_WAITING_FOR_DATA = 288230376151711744u,
    EM_LOG_DATA_REJECTED = 576460752303423488u,
    GPS_MANUAL_USED = 1152921504606846976u,
    GPS_MANUAL_DATA_VALID = 2305843009213693952u,
    GPS_MANUAL_WAITING_FOR_DATA = 4611686018427387904u,
    GPS_MANUAL_DATA_REJECTED = 9223372036854775808u,
  };


  typedef boost::shared_ptr< ::ds_nmea_msgs::PixseAlgsts_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ds_nmea_msgs::PixseAlgsts_<ContainerAllocator> const> ConstPtr;

}; // struct PixseAlgsts_

typedef ::ds_nmea_msgs::PixseAlgsts_<std::allocator<void> > PixseAlgsts;

typedef boost::shared_ptr< ::ds_nmea_msgs::PixseAlgsts > PixseAlgstsPtr;
typedef boost::shared_ptr< ::ds_nmea_msgs::PixseAlgsts const> PixseAlgstsConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ds_nmea_msgs::PixseAlgsts_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ds_nmea_msgs::PixseAlgsts_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ds_nmea_msgs::PixseAlgsts_<ContainerAllocator1> & lhs, const ::ds_nmea_msgs::PixseAlgsts_<ContainerAllocator2> & rhs)
{
  return lhs.status == rhs.status &&
    lhs.checksum == rhs.checksum;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ds_nmea_msgs::PixseAlgsts_<ContainerAllocator1> & lhs, const ::ds_nmea_msgs::PixseAlgsts_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ds_nmea_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ds_nmea_msgs::PixseAlgsts_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ds_nmea_msgs::PixseAlgsts_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_nmea_msgs::PixseAlgsts_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_nmea_msgs::PixseAlgsts_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_nmea_msgs::PixseAlgsts_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_nmea_msgs::PixseAlgsts_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ds_nmea_msgs::PixseAlgsts_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5dcaf448183293c362fd7873a1aaa77a";
  }

  static const char* value(const ::ds_nmea_msgs::PixseAlgsts_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5dcaf448183293c3ULL;
  static const uint64_t static_value2 = 0x62fd7873a1aaa77aULL;
};

template<class ContainerAllocator>
struct DataType< ::ds_nmea_msgs::PixseAlgsts_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ds_nmea_msgs/PixseAlgsts";
  }

  static const char* value(const ::ds_nmea_msgs::PixseAlgsts_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ds_nmea_msgs::PixseAlgsts_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#  $PIXSE,ALGSTS,hhhhhhhh,llllllll *hh<CR><LF>\n"
"#  where:\n"
"#  hhhhhhhh is the hexadecimal value of PHINS Algo status LSB (see Table V-3)\n"
"#  llllllll is the hexadecimal value of PHINS Algo status MSB (see Table V-4)\n"
"#  hh is the checksum\n"
"\n"
"#  Values of PHINS Algo status LSB (see Table V-3)\n"
"\n"
"uint64 OPERATION_MODE_NAVIGATION     = 1                     # 0x00000000_00000001\n"
"uint64 OPERATION_MODE_ALIGNMENT      = 2                     # 0x00000000_00000002\n"
"uint64 OPERATION_MODE_FINE_ALIGNMENT = 4                     # 0x00000000_00000004\n"
"uint64 OPERATION_MODE_DECK_RECKONING = 8                     # 0x00000000_00000008\n"
"\n"
"uint64 ALTITUDE_USING_GPS            = 16                    # 0x00000000_00000010\n"
"uint64 ALTITUDE_USING_DEPTH          = 32                    # 0x00000000_00000020\n"
"uint64 ALTITUDE_SABLILIZED           = 64                    # 0x00000000_00000040\n"
"uint64 ALTITUDE_HYDRO                = 128                   # 0x00000000_00000080\n"
"\n"
"uint64 LOG_USED                      = 256                   # 0x00000000_00000100\n"
"uint64 LOG_DATA_VALID                = 512                   # 0x00000000_00000200\n"
"uint64 LOG_WAITING_FOR_DATA          = 1024                  # 0x00000000_00000400\n"
"uint64 LOG_DATA_REJECTED             = 2048                  # 0x00000000_00000800\n"
"\n"
"uint64 GPS_USED                      = 4096                  # 0x00000000_00001000\n"
"uint64 GPS_DATA_VALID                = 8192                  # 0x00000000_00002000\n"
"uint64 GPS_WAITING_FOR_DATA          = 16384                 # 0x00000000_00004000\n"
"uint64 GPS_DATA_REJECTED             = 32768                 # 0x00000000_00008000\n"
"\n"
"uint64 USBL_USED                     = 65536                 # 0x00000000_00010000\n"
"uint64 USBL_DATA_VALID               = 131072                # 0x00000000_00020000\n"
"uint64 USBL_WAITING_FOR_DATA         = 262144                # 0x00000000_00040000\n"
"uint64 USBL_DATA_REJECTED            = 524288                # 0x00000000_00080000\n"
"\n"
"uint64 DEPTH_USED                    = 1048576               # 0x00000000_00100000\n"
"uint64 DEPTH_DATA_VALID              = 2097152               # 0x00000000_00200000\n"
"uint64 DEPTH_WAITING_FOR_DATA        = 4194304               # 0x00000000_00400000\n"
"uint64 DEPTH_DATA_REJECTED           = 8388608               # 0x00000000_00800000\n"
"\n"
"uint64 LBL_USED                      = 16777216              # 0x00000000_01000000\n"
"uint64 LBL_DATA_VALID                = 33554432              # 0x00000000_02000000\n"
"uint64 LBL_WAITING_FOR_DATA          = 67108864              # 0x00000000_04000000\n"
"uint64 LBL_DATA_REJECTED             = 134217728             # 0x00000000_08000000\n"
"\n"
"uint64 ALTITUDE_SATURATED            = 268435456             # 0x00000000_10000000\n"
"uint64 SPEED_SATURATED               = 536870912             # 0x00000000_20000000\n"
"uint64 RESERVED_1                    = 1073741824            # 0x00000000_40000000\n"
"uint64 RESERVED_2                    = 2147483648            # 0x00000000_80000000\n"
"\n"
"#  Values of PHINS Algo status MSB (see Table V-4)\n"
"\n"
"uint64 WATER_TRACK_USED              = 4294967296            # 0x00000001_00000000\n"
"uint64 WATER_TRACK_DATA_VALID        = 8589934592            # 0x00000002_00000000\n"
"uint64 WATER_TRACK_WAITING_FOR_DATA  = 17179869184           # 0x00000004_00000000\n"
"uint64 WATER_TRACK_REJECTED          = 34359738368           # 0x00000008_00000000\n"
"\n"
"uint64 GPS2_USED                     = 68719476736           # 0x00000010_00000000\n"
"uint64 GPS2_DATA_VALID               = 137438953472          # 0x00000020_00000000\n"
"uint64 GPS2_WAITING_FOR_DATA         = 274877906944          # 0x00000040_00000000\n"
"uint64 GPS2_DATA_REJECTED            = 549755813888          # 0x00000080_00000800\n"
"\n"
"uint64 METROLOGY_USED                = 1099511627776         # 0x00000100_00000000\n"
"uint64 METROLOGY_DATA_VALID          = 2199023255552         # 0x00000200_00000000\n"
"uint64 METROLOGY_WAITING_FOR_DATA    = 4398046511104         # 0x00000400_00000000\n"
"uint64 METROLOGY_DATA_REJECTED       = 8796093022208         # 0x00000800_00000000\n"
"\n"
"uint64 ALTITUDE_USED                 = 17592186044416        # 0x00001000_00000000\n"
"uint64 ALTITUDE_DATA_VALID           = 35184372088832        # 0x00002000_00000000\n"
"uint64 ALTITUDE_WAITING_FOR_DATA     = 70368744177664        # 0x00004000_00000000\n"
"uint64 ALTITUDE_DATA_REJECTED        = 140737488355328       # 0x00008000_00000000\n"
"\n"
"uint64 OPERATION_MODE_ZUP            = 281474976710656       # 0x00010000_00000000\n"
"uint64 ZUP_VALID                     = 562949953421312       # 0x00020000_00000000\n"
"uint64 OPERATION_MODE_ZUP_VALID      = 1125899906842624      # 0x00040000_00000000\n"
"uint64 ZUP_BENCH_VALID               = 2251799813685248      # 0x00080000_00000000\n"
"\n"
"uint64 STATIC_ALIGNMENT              = 4503599627370496      # 0x00100000_00000000\n"
"uint64 GO_TO_NAV                     = 9007199254740992      # 0x00200000_00000000\n"
"uint64 RESERVED_3                    = 18014398509481984     # 0x00400000_00000000\n"
"uint64 RESERVED_4                    = 36028797018963968     # 0x00800000_00000000\n"
"\n"
"uint64 EM_LOG_USED                   = 72057594037927936     # 0x01000000_00000000\n"
"uint64 EM_LOG_DATA_VALID             = 144115188075855872    # 0x02000000_00000000\n"
"uint64 EM_LOG_WAITING_FOR_DATA       = 288230376151711744    # 0x04000000_00000000\n"
"uint64 EM_LOG_DATA_REJECTED          = 576460752303423488    # 0x08000000_00000000\n"
"\n"
"uint64 GPS_MANUAL_USED               = 1152921504606846976   # 0x10000000_00000000\n"
"uint64 GPS_MANUAL_DATA_VALID         = 2305843009213693952   # 0x20000000_00000000\n"
"uint64 GPS_MANUAL_WAITING_FOR_DATA   = 4611686018427387904   # 0x40000000_00000000\n"
"uint64 GPS_MANUAL_DATA_REJECTED      = 9223372036854775808   # 0x80000000_00000000\n"
"\n"
"uint64 status\n"
"\n"
"# Algorithm Status LSB enum\n"
"# PixseAlgstsLsb lsb\n"
"\n"
"# Algorithm Status MSB enum\n"
"# PixseAlgstsMsb msb\n"
"\n"
"uint8 checksum\n"
;
  }

  static const char* value(const ::ds_nmea_msgs::PixseAlgsts_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ds_nmea_msgs::PixseAlgsts_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.status);
      stream.next(m.checksum);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PixseAlgsts_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ds_nmea_msgs::PixseAlgsts_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ds_nmea_msgs::PixseAlgsts_<ContainerAllocator>& v)
  {
    s << indent << "status: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.status);
    s << indent << "checksum: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.checksum);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DS_NMEA_MSGS_MESSAGE_PIXSEALGSTS_H
