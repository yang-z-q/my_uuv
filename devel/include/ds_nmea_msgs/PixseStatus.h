// Generated by gencpp from file ds_nmea_msgs/PixseStatus.msg
// DO NOT EDIT!


#ifndef DS_NMEA_MSGS_MESSAGE_PIXSESTATUS_H
#define DS_NMEA_MSGS_MESSAGE_PIXSESTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ds_nmea_msgs
{
template <class ContainerAllocator>
struct PixseStatus_
{
  typedef PixseStatus_<ContainerAllocator> Type;

  PixseStatus_()
    : status(0)
    , checksum(0)  {
    }
  PixseStatus_(const ContainerAllocator& _alloc)
    : status(0)
    , checksum(0)  {
  (void)_alloc;
    }



   typedef uint64_t _status_type;
  _status_type status;

   typedef uint8_t _checksum_type;
  _checksum_type checksum;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(SERIAL_INPUT_R_ERROR)
  #undef SERIAL_INPUT_R_ERROR
#endif
#if defined(_WIN32) && defined(SERIAL_INPUT_A_ERROR)
  #undef SERIAL_INPUT_A_ERROR
#endif
#if defined(_WIN32) && defined(SERIAL_INPUT_B_ERROR)
  #undef SERIAL_INPUT_B_ERROR
#endif
#if defined(_WIN32) && defined(SERIAL_INPUT_C_ERROR)
  #undef SERIAL_INPUT_C_ERROR
#endif
#if defined(_WIN32) && defined(SERIAL_INPUT_D_ERROR)
  #undef SERIAL_INPUT_D_ERROR
#endif
#if defined(_WIN32) && defined(SERIAL_INPUT_E_ERROR)
  #undef SERIAL_INPUT_E_ERROR
#endif
#if defined(_WIN32) && defined(RESERVED_01)
  #undef RESERVED_01
#endif
#if defined(_WIN32) && defined(RESERVED_02)
  #undef RESERVED_02
#endif
#if defined(_WIN32) && defined(SERIAL_INPUT_R_ACTIVITY)
  #undef SERIAL_INPUT_R_ACTIVITY
#endif
#if defined(_WIN32) && defined(SERIAL_INPUT_A_ACTIVITY)
  #undef SERIAL_INPUT_A_ACTIVITY
#endif
#if defined(_WIN32) && defined(SERIAL_INPUT_B_ACTIVITY)
  #undef SERIAL_INPUT_B_ACTIVITY
#endif
#if defined(_WIN32) && defined(SERIAL_INPUT_C_ACTIVITY)
  #undef SERIAL_INPUT_C_ACTIVITY
#endif
#if defined(_WIN32) && defined(SERIAL_INPUT_D_ACTIVITY)
  #undef SERIAL_INPUT_D_ACTIVITY
#endif
#if defined(_WIN32) && defined(SERIAL_INPUT_E_ACTIVITY)
  #undef SERIAL_INPUT_E_ACTIVITY
#endif
#if defined(_WIN32) && defined(RESERVED_03)
  #undef RESERVED_03
#endif
#if defined(_WIN32) && defined(RESERVED_04)
  #undef RESERVED_04
#endif
#if defined(_WIN32) && defined(SERIAL_OUTPUT_R_FULL)
  #undef SERIAL_OUTPUT_R_FULL
#endif
#if defined(_WIN32) && defined(SERIAL_OUTPUT_A_FULL)
  #undef SERIAL_OUTPUT_A_FULL
#endif
#if defined(_WIN32) && defined(SERIAL_OUTPUT_B_FULL)
  #undef SERIAL_OUTPUT_B_FULL
#endif
#if defined(_WIN32) && defined(SERIAL_OUTPUT_C_FULL)
  #undef SERIAL_OUTPUT_C_FULL
#endif
#if defined(_WIN32) && defined(SERIAL_OUTPUT_D_FULL)
  #undef SERIAL_OUTPUT_D_FULL
#endif
#if defined(_WIN32) && defined(SERIAL_OUTPUT_E_FULL)
  #undef SERIAL_OUTPUT_E_FULL
#endif
#if defined(_WIN32) && defined(RESERVED_05)
  #undef RESERVED_05
#endif
#if defined(_WIN32) && defined(RESERVED_06)
  #undef RESERVED_06
#endif
#if defined(_WIN32) && defined(RESERVED_07)
  #undef RESERVED_07
#endif
#if defined(_WIN32) && defined(RESERVED_08)
  #undef RESERVED_08
#endif
#if defined(_WIN32) && defined(ETHERNET_ACTIVITY)
  #undef ETHERNET_ACTIVITY
#endif
#if defined(_WIN32) && defined(USER_CONTROL_BIT_A)
  #undef USER_CONTROL_BIT_A
#endif
#if defined(_WIN32) && defined(USERECONTROL_BIT_B)
  #undef USERECONTROL_BIT_B
#endif
#if defined(_WIN32) && defined(USER_CONTROL_BIT_C)
  #undef USER_CONTROL_BIT_C
#endif
#if defined(_WIN32) && defined(USER_CONTROL_BIT_D)
  #undef USER_CONTROL_BIT_D
#endif
#if defined(_WIN32) && defined(RESERVED_09)
  #undef RESERVED_09
#endif
#if defined(_WIN32) && defined(DVL_BOTTOM_TRACK_DETECTED)
  #undef DVL_BOTTOM_TRACK_DETECTED
#endif
#if defined(_WIN32) && defined(DVL_WATER_TRACK_DETECTED)
  #undef DVL_WATER_TRACK_DETECTED
#endif
#if defined(_WIN32) && defined(GPS1_DETECTED)
  #undef GPS1_DETECTED
#endif
#if defined(_WIN32) && defined(GPS2_DETECTED)
  #undef GPS2_DETECTED
#endif
#if defined(_WIN32) && defined(USBL_DETECTED)
  #undef USBL_DETECTED
#endif
#if defined(_WIN32) && defined(LBL_DETECTED)
  #undef LBL_DETECTED
#endif
#if defined(_WIN32) && defined(DEPTH_DETECTED)
  #undef DEPTH_DETECTED
#endif
#if defined(_WIN32) && defined(LOG_EM_DETECTED)
  #undef LOG_EM_DETECTED
#endif
#if defined(_WIN32) && defined(ODOMETER_DETECTED)
  #undef ODOMETER_DETECTED
#endif
#if defined(_WIN32) && defined(UTC_DETECTED)
  #undef UTC_DETECTED
#endif
#if defined(_WIN32) && defined(ALTITUDE_DETECTED)
  #undef ALTITUDE_DETECTED
#endif
#if defined(_WIN32) && defined(PPS_DETECTED)
  #undef PPS_DETECTED
#endif
#if defined(_WIN32) && defined(ZUP_ACTIVATED)
  #undef ZUP_ACTIVATED
#endif
#if defined(_WIN32) && defined(METROLOGY_DETECTED)
  #undef METROLOGY_DETECTED
#endif
#if defined(_WIN32) && defined(MANUAL_GPS_DETECTED)
  #undef MANUAL_GPS_DETECTED
#endif
#if defined(_WIN32) && defined(CTD_DETECTED)
  #undef CTD_DETECTED
#endif
#if defined(_WIN32) && defined(HRP_DEGRADED)
  #undef HRP_DEGRADED
#endif
#if defined(_WIN32) && defined(HRP_NOT_VALID)
  #undef HRP_NOT_VALID
#endif
#if defined(_WIN32) && defined(RESERVED_10)
  #undef RESERVED_10
#endif
#if defined(_WIN32) && defined(RESERVED_11)
  #undef RESERVED_11
#endif
#if defined(_WIN32) && defined(RESERVED_12)
  #undef RESERVED_12
#endif
#if defined(_WIN32) && defined(RESERVED_13)
  #undef RESERVED_13
#endif
#if defined(_WIN32) && defined(RESERVED_14)
  #undef RESERVED_14
#endif
#if defined(_WIN32) && defined(RESERVED_15)
  #undef RESERVED_15
#endif
#if defined(_WIN32) && defined(RESERVED_16)
  #undef RESERVED_16
#endif
#if defined(_WIN32) && defined(RESERVED_17)
  #undef RESERVED_17
#endif
#if defined(_WIN32) && defined(RESERVED_18)
  #undef RESERVED_18
#endif
#if defined(_WIN32) && defined(MPC_OVERLOAD)
  #undef MPC_OVERLOAD
#endif
#if defined(_WIN32) && defined(FAULT_ALARM)
  #undef FAULT_ALARM
#endif
#if defined(_WIN32) && defined(MANUFACTURES_MODE)
  #undef MANUFACTURES_MODE
#endif
#if defined(_WIN32) && defined(CONFIGURATION_SAVED)
  #undef CONFIGURATION_SAVED
#endif
#if defined(_WIN32) && defined(SYSTEM_RESTARTED)
  #undef SYSTEM_RESTARTED
#endif

  enum {
    SERIAL_INPUT_R_ERROR = 1u,
    SERIAL_INPUT_A_ERROR = 2u,
    SERIAL_INPUT_B_ERROR = 4u,
    SERIAL_INPUT_C_ERROR = 8u,
    SERIAL_INPUT_D_ERROR = 16u,
    SERIAL_INPUT_E_ERROR = 32u,
    RESERVED_01 = 64u,
    RESERVED_02 = 128u,
    SERIAL_INPUT_R_ACTIVITY = 256u,
    SERIAL_INPUT_A_ACTIVITY = 512u,
    SERIAL_INPUT_B_ACTIVITY = 1024u,
    SERIAL_INPUT_C_ACTIVITY = 2048u,
    SERIAL_INPUT_D_ACTIVITY = 4096u,
    SERIAL_INPUT_E_ACTIVITY = 8192u,
    RESERVED_03 = 16384u,
    RESERVED_04 = 32768u,
    SERIAL_OUTPUT_R_FULL = 65536u,
    SERIAL_OUTPUT_A_FULL = 131072u,
    SERIAL_OUTPUT_B_FULL = 262144u,
    SERIAL_OUTPUT_C_FULL = 524288u,
    SERIAL_OUTPUT_D_FULL = 1048576u,
    SERIAL_OUTPUT_E_FULL = 2097152u,
    RESERVED_05 = 4194304u,
    RESERVED_06 = 8388608u,
    RESERVED_07 = 16777216u,
    RESERVED_08 = 33554432u,
    ETHERNET_ACTIVITY = 67108864u,
    USER_CONTROL_BIT_A = 134217728u,
    USERECONTROL_BIT_B = 268435456u,
    USER_CONTROL_BIT_C = 536870912u,
    USER_CONTROL_BIT_D = 1073741824u,
    RESERVED_09 = 2147483648u,
    DVL_BOTTOM_TRACK_DETECTED = 4294967296u,
    DVL_WATER_TRACK_DETECTED = 8589934592u,
    GPS1_DETECTED = 17179869184u,
    GPS2_DETECTED = 34359738368u,
    USBL_DETECTED = 68719476736u,
    LBL_DETECTED = 137438953472u,
    DEPTH_DETECTED = 274877906944u,
    LOG_EM_DETECTED = 549755813888u,
    ODOMETER_DETECTED = 1099511627776u,
    UTC_DETECTED = 2199023255552u,
    ALTITUDE_DETECTED = 4398046511104u,
    PPS_DETECTED = 8796093022208u,
    ZUP_ACTIVATED = 17592186044416u,
    METROLOGY_DETECTED = 35184372088832u,
    MANUAL_GPS_DETECTED = 70368744177664u,
    CTD_DETECTED = 140737488355328u,
    HRP_DEGRADED = 281474976710656u,
    HRP_NOT_VALID = 562949953421312u,
    RESERVED_10 = 1125899906842624u,
    RESERVED_11 = 2251799813685248u,
    RESERVED_12 = 4503599627370496u,
    RESERVED_13 = 9007199254740992u,
    RESERVED_14 = 18014398509481984u,
    RESERVED_15 = 36028797018963968u,
    RESERVED_16 = 72057594037927936u,
    RESERVED_17 = 144115188075855872u,
    RESERVED_18 = 288230376151711744u,
    MPC_OVERLOAD = 576460752303423488u,
    FAULT_ALARM = 1152921504606846976u,
    MANUFACTURES_MODE = 2305843009213693952u,
    CONFIGURATION_SAVED = 4611686018427387904u,
    SYSTEM_RESTARTED = 9223372036854775808u,
  };


  typedef boost::shared_ptr< ::ds_nmea_msgs::PixseStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ds_nmea_msgs::PixseStatus_<ContainerAllocator> const> ConstPtr;

}; // struct PixseStatus_

typedef ::ds_nmea_msgs::PixseStatus_<std::allocator<void> > PixseStatus;

typedef boost::shared_ptr< ::ds_nmea_msgs::PixseStatus > PixseStatusPtr;
typedef boost::shared_ptr< ::ds_nmea_msgs::PixseStatus const> PixseStatusConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ds_nmea_msgs::PixseStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ds_nmea_msgs::PixseStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ds_nmea_msgs::PixseStatus_<ContainerAllocator1> & lhs, const ::ds_nmea_msgs::PixseStatus_<ContainerAllocator2> & rhs)
{
  return lhs.status == rhs.status &&
    lhs.checksum == rhs.checksum;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ds_nmea_msgs::PixseStatus_<ContainerAllocator1> & lhs, const ::ds_nmea_msgs::PixseStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ds_nmea_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ds_nmea_msgs::PixseStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ds_nmea_msgs::PixseStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_nmea_msgs::PixseStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_nmea_msgs::PixseStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_nmea_msgs::PixseStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_nmea_msgs::PixseStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ds_nmea_msgs::PixseStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3e428234e4d1ccbb5620637790a92074";
  }

  static const char* value(const ::ds_nmea_msgs::PixseStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3e428234e4d1ccbbULL;
  static const uint64_t static_value2 = 0x5620637790a92074ULL;
};

template<class ContainerAllocator>
struct DataType< ::ds_nmea_msgs::PixseStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ds_nmea_msgs/PixseStatus";
  }

  static const char* value(const ::ds_nmea_msgs::PixseStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ds_nmea_msgs::PixseStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#  $PIXSE,STATUS,hhhhhhhh,llllllll *hh<CR><LF>\n"
"#  where:\n"
"#  hhhhhhhh is the hexadecimal value of PHINS System status LSB (see Table V-1)\n"
"#  llllllll is the hexadecimal value of PHINS System status MSB (see Table V-2)\n"
"#  hh is the checksum\n"
"\n"
"#  Values of PHINS System status LSB (see Table V-1)\n"
"\n"
"uint64 SERIAL_INPUT_R_ERROR          = 1          # 0x00000000_00000001\n"
"uint64 SERIAL_INPUT_A_ERROR          = 2          # 0x00000000_00000002\n"
"uint64 SERIAL_INPUT_B_ERROR          = 4          # 0x00000000_00000004\n"
"uint64 SERIAL_INPUT_C_ERROR          = 8          # 0x00000000_00000008\n"
"\n"
"uint64 SERIAL_INPUT_D_ERROR          = 16         # 0x00000000_00000010\n"
"uint64 SERIAL_INPUT_E_ERROR          = 32         # 0x00000000_00000020\n"
"uint64 RESERVED_01                   = 64         # 0x00000000_00000040\n"
"uint64 RESERVED_02                   = 128        # 0x00000000_00000080\n"
"\n"
"uint64 SERIAL_INPUT_R_ACTIVITY       = 256        # 0x00000000_00000100\n"
"uint64 SERIAL_INPUT_A_ACTIVITY       = 512        # 0x00000000_00000200\n"
"uint64 SERIAL_INPUT_B_ACTIVITY       = 1024       # 0x00000000_00000400\n"
"uint64 SERIAL_INPUT_C_ACTIVITY       = 2048       # 0x00000000_00000800\n"
"\n"
"uint64 SERIAL_INPUT_D_ACTIVITY       = 4096       # 0x00000000_00001000\n"
"uint64 SERIAL_INPUT_E_ACTIVITY       = 8192       # 0x00000000_00002000\n"
"uint64 RESERVED_03                   = 16384      # 0x00000000_00004000\n"
"uint64 RESERVED_04                   = 32768      # 0x00000000_00008000\n"
"\n"
"uint64 SERIAL_OUTPUT_R_FULL          = 65536      # 0x00000000_00010000\n"
"uint64 SERIAL_OUTPUT_A_FULL          = 131072     # 0x00000000_00020000\n"
"uint64 SERIAL_OUTPUT_B_FULL          = 262144     # 0x00000000_00040000\n"
"uint64 SERIAL_OUTPUT_C_FULL          = 524288     # 0x00000000_00080000\n"
"\n"
"uint64 SERIAL_OUTPUT_D_FULL          = 1048576    # 0x00000000_00100000\n"
"uint64 SERIAL_OUTPUT_E_FULL          = 2097152    # 0x00000000_00200000\n"
"uint64 RESERVED_05                   = 4194304    # 0x00000000_00400000\n"
"uint64 RESERVED_06                   = 8388608    # 0x00000000_00800000\n"
"\n"
"uint64 RESERVED_07                   = 16777216   # 0x00000000_01000000\n"
"uint64 RESERVED_08                   = 33554432   # 0x00000000_02000000\n"
"uint64 ETHERNET_ACTIVITY             = 67108864   # 0x00000000_04000000\n"
"uint64 USER_CONTROL_BIT_A            = 134217728  # 0x00000000_08000000\n"
"\n"
"uint64 USERECONTROL_BIT_B            = 268435456  # 0x00000000_10000000\n"
"uint64 USER_CONTROL_BIT_C            = 536870912  # 0x00000000_20000000\n"
"uint64 USER_CONTROL_BIT_D            = 1073741824 # 0x00000000_40000000\n"
"uint64 RESERVED_09                   = 2147483648 # 0x00000000_80000000\n"
"\n"
"\n"
"#  Values of PHINS System status MSB (see Table V-2)\n"
"\n"
"uint64 DVL_BOTTOM_TRACK_DETECTED     = 4294967296            # 0x00000001_00000000\n"
"uint64 DVL_WATER_TRACK_DETECTED      = 8589934592            # 0x00000002_00000000\n"
"uint64 GPS1_DETECTED                 = 17179869184           # 0x00000004_00000000\n"
"uint64 GPS2_DETECTED                 = 34359738368           # 0x00000008_00000000\n"
"\n"
"uint64 USBL_DETECTED                 = 68719476736           # 0x00000010_00000000\n"
"uint64 LBL_DETECTED                  = 137438953472          # 0x00000020_00000000\n"
"uint64 DEPTH_DETECTED                = 274877906944          # 0x00000040_00000000\n"
"uint64 LOG_EM_DETECTED               = 549755813888          # 0x00000080_00000800\n"
"\n"
"uint64 ODOMETER_DETECTED             = 1099511627776         # 0x00000100_00000000\n"
"uint64 UTC_DETECTED                  = 2199023255552         # 0x00000200_00000000\n"
"uint64 ALTITUDE_DETECTED             = 4398046511104         # 0x00000400_00000000\n"
"uint64 PPS_DETECTED                  = 8796093022208         # 0x00000800_00000000\n"
"\n"
"uint64 ZUP_ACTIVATED                 = 17592186044416        # 0x00001000_00000000\n"
"uint64 METROLOGY_DETECTED            = 35184372088832        # 0x00002000_00000000\n"
"uint64 MANUAL_GPS_DETECTED           = 70368744177664        # 0x00004000_00000000\n"
"uint64 CTD_DETECTED                  = 140737488355328       # 0x00008000_00000000\n"
"\n"
"uint64 HRP_DEGRADED                  = 281474976710656       # 0x00010000_00000000\n"
"uint64 HRP_NOT_VALID                 = 562949953421312       # 0x00020000_00000000\n"
"uint64 RESERVED_10                   = 1125899906842624      # 0x00040000_00000000\n"
"uint64 RESERVED_11                   = 2251799813685248      # 0x00080000_00000000\n"
"\n"
"uint64 RESERVED_12                   = 4503599627370496      # 0x00100000_00000000\n"
"uint64 RESERVED_13                   = 9007199254740992      # 0x00200000_00000000\n"
"uint64 RESERVED_14                   = 18014398509481984     # 0x00400000_00000000\n"
"uint64 RESERVED_15                   = 36028797018963968     # 0x00800000_00000000\n"
"\n"
"uint64 RESERVED_16                   = 72057594037927936     # 0x01000000_00000000\n"
"uint64 RESERVED_17                   = 144115188075855872    # 0x02000000_00000000\n"
"uint64 RESERVED_18                   = 288230376151711744    # 0x04000000_00000000\n"
"uint64 MPC_OVERLOAD                  = 576460752303423488    # 0x08000000_00000000\n"
"\n"
"uint64 FAULT_ALARM                   = 1152921504606846976   # 0x10000000_00000000\n"
"uint64 MANUFACTURES_MODE             = 2305843009213693952   # 0x20000000_00000000\n"
"uint64 CONFIGURATION_SAVED           = 4611686018427387904   # 0x40000000_00000000\n"
"uint64 SYSTEM_RESTARTED              = 9223372036854775808   # 0x80000000_00000000\n"
"\n"
"uint64 status\n"
"uint8 checksum\n"
;
  }

  static const char* value(const ::ds_nmea_msgs::PixseStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ds_nmea_msgs::PixseStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.status);
      stream.next(m.checksum);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PixseStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ds_nmea_msgs::PixseStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ds_nmea_msgs::PixseStatus_<ContainerAllocator>& v)
  {
    s << indent << "status: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.status);
    s << indent << "checksum: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.checksum);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DS_NMEA_MSGS_MESSAGE_PIXSESTATUS_H
