// Generated by gencpp from file ds_nmea_msgs/PixseHtsts.msg
// DO NOT EDIT!


#ifndef DS_NMEA_MSGS_MESSAGE_PIXSEHTSTS_H
#define DS_NMEA_MSGS_MESSAGE_PIXSEHTSTS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ds_nmea_msgs
{
template <class ContainerAllocator>
struct PixseHtsts_
{
  typedef PixseHtsts_<ContainerAllocator> Type;

  PixseHtsts_()
    : status(0)
    , checksum(0)  {
    }
  PixseHtsts_(const ContainerAllocator& _alloc)
    : status(0)
    , checksum(0)  {
  (void)_alloc;
    }



   typedef uint32_t _status_type;
  _status_type status;

   typedef uint8_t _checksum_type;
  _checksum_type checksum;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(SYSTEM_OK)
  #undef SYSTEM_OK
#endif
#if defined(_WIN32) && defined(ALIGNMENT_IN_PROGRESS)
  #undef ALIGNMENT_IN_PROGRESS
#endif
#if defined(_WIN32) && defined(SYSTEM_ERROR)
  #undef SYSTEM_ERROR
#endif
#if defined(_WIN32) && defined(SYSTEM_WARNING)
  #undef SYSTEM_WARNING
#endif
#if defined(_WIN32) && defined(SERIAL_INPUT_OK)
  #undef SERIAL_INPUT_OK
#endif
#if defined(_WIN32) && defined(SERIAL_INPUT_ERROR)
  #undef SERIAL_INPUT_ERROR
#endif
#if defined(_WIN32) && defined(SERIAL_OUTPUT_OK)
  #undef SERIAL_OUTPUT_OK
#endif
#if defined(_WIN32) && defined(SERIAL_OUTPUT_ERROR)
  #undef SERIAL_OUTPUT_ERROR
#endif
#if defined(_WIN32) && defined(ELECTRONIC_OK)
  #undef ELECTRONIC_OK
#endif
#if defined(_WIN32) && defined(ELECTRONIC_ERROR)
  #undef ELECTRONIC_ERROR
#endif
#if defined(_WIN32) && defined(FOG_OK)
  #undef FOG_OK
#endif
#if defined(_WIN32) && defined(FOG_ERROR)
  #undef FOG_ERROR
#endif
#if defined(_WIN32) && defined(ACCEL_OK)
  #undef ACCEL_OK
#endif
#if defined(_WIN32) && defined(ACCEL_ERROR)
  #undef ACCEL_ERROR
#endif
#if defined(_WIN32) && defined(CPU_OK)
  #undef CPU_OK
#endif
#if defined(_WIN32) && defined(CPU_ERROR)
  #undef CPU_ERROR
#endif
#if defined(_WIN32) && defined(TEMP_OK)
  #undef TEMP_OK
#endif
#if defined(_WIN32) && defined(TEMP_ERROR)
  #undef TEMP_ERROR
#endif
#if defined(_WIN32) && defined(NO_GPS1_DETECTED)
  #undef NO_GPS1_DETECTED
#endif
#if defined(_WIN32) && defined(NO_GPS2_DETECTED)
  #undef NO_GPS2_DETECTED
#endif
#if defined(_WIN32) && defined(NO_MANUAL_GPS_DETECTED)
  #undef NO_MANUAL_GPS_DETECTED
#endif
#if defined(_WIN32) && defined(NO_DVL_BOTTOM_TRACK_DETECTED)
  #undef NO_DVL_BOTTOM_TRACK_DETECTED
#endif
#if defined(_WIN32) && defined(NO_DVL_WATER_TRACK_DETECTED)
  #undef NO_DVL_WATER_TRACK_DETECTED
#endif
#if defined(_WIN32) && defined(NO_EM_LOG_DETECTED)
  #undef NO_EM_LOG_DETECTED
#endif
#if defined(_WIN32) && defined(NO_DEPTH_DETECTED)
  #undef NO_DEPTH_DETECTED
#endif
#if defined(_WIN32) && defined(NO_USBL_DETECTED)
  #undef NO_USBL_DETECTED
#endif
#if defined(_WIN32) && defined(NO_LBL_DETECTED)
  #undef NO_LBL_DETECTED
#endif
#if defined(_WIN32) && defined(NO_ALITITUDE_DETECTED)
  #undef NO_ALITITUDE_DETECTED
#endif
#if defined(_WIN32) && defined(NO_UTC_SYNC_DETECTED)
  #undef NO_UTC_SYNC_DETECTED
#endif
#if defined(_WIN32) && defined(NO_PPS_SYNC_DETECTED)
  #undef NO_PPS_SYNC_DETECTED
#endif
#if defined(_WIN32) && defined(NO_CTD_DETECTED)
  #undef NO_CTD_DETECTED
#endif
#if defined(_WIN32) && defined(ZUP_MODE_ACTIVATED)
  #undef ZUP_MODE_ACTIVATED
#endif

  enum {
    SYSTEM_OK = 1u,
    ALIGNMENT_IN_PROGRESS = 2u,
    SYSTEM_ERROR = 4u,
    SYSTEM_WARNING = 8u,
    SERIAL_INPUT_OK = 16u,
    SERIAL_INPUT_ERROR = 32u,
    SERIAL_OUTPUT_OK = 64u,
    SERIAL_OUTPUT_ERROR = 128u,
    ELECTRONIC_OK = 256u,
    ELECTRONIC_ERROR = 512u,
    FOG_OK = 1024u,
    FOG_ERROR = 2048u,
    ACCEL_OK = 4096u,
    ACCEL_ERROR = 8192u,
    CPU_OK = 16384u,
    CPU_ERROR = 32768u,
    TEMP_OK = 65536u,
    TEMP_ERROR = 131072u,
    NO_GPS1_DETECTED = 262144u,
    NO_GPS2_DETECTED = 524288u,
    NO_MANUAL_GPS_DETECTED = 1048576u,
    NO_DVL_BOTTOM_TRACK_DETECTED = 2097152u,
    NO_DVL_WATER_TRACK_DETECTED = 4194304u,
    NO_EM_LOG_DETECTED = 8388608u,
    NO_DEPTH_DETECTED = 16777216u,
    NO_USBL_DETECTED = 33554432u,
    NO_LBL_DETECTED = 67108864u,
    NO_ALITITUDE_DETECTED = 134217728u,
    NO_UTC_SYNC_DETECTED = 268435456u,
    NO_PPS_SYNC_DETECTED = 536870912u,
    NO_CTD_DETECTED = 1073741824u,
    ZUP_MODE_ACTIVATED = 2147483648u,
  };


  typedef boost::shared_ptr< ::ds_nmea_msgs::PixseHtsts_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ds_nmea_msgs::PixseHtsts_<ContainerAllocator> const> ConstPtr;

}; // struct PixseHtsts_

typedef ::ds_nmea_msgs::PixseHtsts_<std::allocator<void> > PixseHtsts;

typedef boost::shared_ptr< ::ds_nmea_msgs::PixseHtsts > PixseHtstsPtr;
typedef boost::shared_ptr< ::ds_nmea_msgs::PixseHtsts const> PixseHtstsConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ds_nmea_msgs::PixseHtsts_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ds_nmea_msgs::PixseHtsts_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ds_nmea_msgs::PixseHtsts_<ContainerAllocator1> & lhs, const ::ds_nmea_msgs::PixseHtsts_<ContainerAllocator2> & rhs)
{
  return lhs.status == rhs.status &&
    lhs.checksum == rhs.checksum;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ds_nmea_msgs::PixseHtsts_<ContainerAllocator1> & lhs, const ::ds_nmea_msgs::PixseHtsts_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ds_nmea_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ds_nmea_msgs::PixseHtsts_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ds_nmea_msgs::PixseHtsts_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_nmea_msgs::PixseHtsts_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_nmea_msgs::PixseHtsts_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_nmea_msgs::PixseHtsts_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_nmea_msgs::PixseHtsts_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ds_nmea_msgs::PixseHtsts_<ContainerAllocator> >
{
  static const char* value()
  {
    return "78bf233ad3f7cf6823e55c18e0eb8573";
  }

  static const char* value(const ::ds_nmea_msgs::PixseHtsts_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x78bf233ad3f7cf68ULL;
  static const uint64_t static_value2 = 0x23e55c18e0eb8573ULL;
};

template<class ContainerAllocator>
struct DataType< ::ds_nmea_msgs::PixseHtsts_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ds_nmea_msgs/PixseHtsts";
  }

  static const char* value(const ::ds_nmea_msgs::PixseHtsts_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ds_nmea_msgs::PixseHtsts_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#  $PIXSE,HT_STS,hhhhhhhh *hh<CR><LF>\n"
"#  where:\n"
"#  hhhhhhhh is the hexadecimal value of PHINS User status (see Table V-5)\n"
"#  hh is the checksum\n"
"\n"
"#  Values of PHINS HT_STS status LSB (see Table V-5)\n"
"\n"
"uint32 SYSTEM_OK                     = 1          # 0x00000001\n"
"uint32 ALIGNMENT_IN_PROGRESS         = 2          # 0x00000002\n"
"uint32 SYSTEM_ERROR                  = 4          # 0x00000004\n"
"uint32 SYSTEM_WARNING                = 8          # 0x00000008\n"
"\n"
"uint32 SERIAL_INPUT_OK               = 16         # 0x00000010\n"
"uint32 SERIAL_INPUT_ERROR            = 32         # 0x00000020\n"
"uint32 SERIAL_OUTPUT_OK              = 64         # 0x00000040\n"
"uint32 SERIAL_OUTPUT_ERROR           = 128        # 0x00000080\n"
"\n"
"uint32 ELECTRONIC_OK                 = 256        # 0x00000100\n"
"uint32 ELECTRONIC_ERROR              = 512        # 0x00000200\n"
"uint32 FOG_OK                        = 1024       # 0x00000400\n"
"uint32 FOG_ERROR                     = 2048       # 0x00000800\n"
"\n"
"uint32 ACCEL_OK                      = 4096       # 0x00001000\n"
"uint32 ACCEL_ERROR                   = 8192       # 0x00002000\n"
"uint32 CPU_OK                        = 16384      # 0x00004000\n"
"uint32 CPU_ERROR                     = 32768      # 0x00008000\n"
"\n"
"uint32 TEMP_OK                       = 65536      # 0x00010000\n"
"uint32 TEMP_ERROR                    = 131072     # 0x00020000\n"
"uint32 NO_GPS1_DETECTED              = 262144     # 0x00040000\n"
"uint32 NO_GPS2_DETECTED              = 524288     # 0x00080000\n"
"\n"
"uint32 NO_MANUAL_GPS_DETECTED        = 1048576    # 0x00100000\n"
"uint32 NO_DVL_BOTTOM_TRACK_DETECTED  = 2097152    # 0x00200000\n"
"uint32 NO_DVL_WATER_TRACK_DETECTED   = 4194304    # 0x00400000\n"
"uint32 NO_EM_LOG_DETECTED            = 8388608    # 0x00800000\n"
"\n"
"uint32 NO_DEPTH_DETECTED             = 16777216   # 0x01000000\n"
"uint32 NO_USBL_DETECTED              = 33554432   # 0x02000000\n"
"uint32 NO_LBL_DETECTED               = 67108864   # 0x04000000\n"
"uint32 NO_ALITITUDE_DETECTED         = 134217728  # 0x08000000\n"
"\n"
"uint32 NO_UTC_SYNC_DETECTED          = 268435456  # 0x10000000\n"
"uint32 NO_PPS_SYNC_DETECTED          = 536870912  # 0x20000000\n"
"uint32 NO_CTD_DETECTED               = 1073741824 # 0x40000000\n"
"uint32 ZUP_MODE_ACTIVATED            = 2147483648 # 0x80000000\n"
"\n"
"uint32 status\n"
"uint8 checksum\n"
;
  }

  static const char* value(const ::ds_nmea_msgs::PixseHtsts_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ds_nmea_msgs::PixseHtsts_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.status);
      stream.next(m.checksum);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PixseHtsts_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ds_nmea_msgs::PixseHtsts_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ds_nmea_msgs::PixseHtsts_<ContainerAllocator>& v)
  {
    s << indent << "status: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.status);
    s << indent << "checksum: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.checksum);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DS_NMEA_MSGS_MESSAGE_PIXSEHTSTS_H
