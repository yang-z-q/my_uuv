// Generated by gencpp from file ds_nmea_msgs/Zda.msg
// DO NOT EDIT!


#ifndef DS_NMEA_MSGS_MESSAGE_ZDA_H
#define DS_NMEA_MSGS_MESSAGE_ZDA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ds_nmea_msgs
{
template <class ContainerAllocator>
struct Zda_
{
  typedef Zda_<ContainerAllocator> Type;

  Zda_()
    : talker()
    , utc_time()
    , zone_offset()
    , checksum(0)  {
    }
  Zda_(const ContainerAllocator& _alloc)
    : talker(_alloc)
    , utc_time()
    , zone_offset()
    , checksum(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _talker_type;
  _talker_type talker;

   typedef ros::Time _utc_time_type;
  _utc_time_type utc_time;

   typedef ros::Duration _zone_offset_type;
  _zone_offset_type zone_offset;

   typedef uint8_t _checksum_type;
  _checksum_type checksum;





  typedef boost::shared_ptr< ::ds_nmea_msgs::Zda_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ds_nmea_msgs::Zda_<ContainerAllocator> const> ConstPtr;

}; // struct Zda_

typedef ::ds_nmea_msgs::Zda_<std::allocator<void> > Zda;

typedef boost::shared_ptr< ::ds_nmea_msgs::Zda > ZdaPtr;
typedef boost::shared_ptr< ::ds_nmea_msgs::Zda const> ZdaConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ds_nmea_msgs::Zda_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ds_nmea_msgs::Zda_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ds_nmea_msgs::Zda_<ContainerAllocator1> & lhs, const ::ds_nmea_msgs::Zda_<ContainerAllocator2> & rhs)
{
  return lhs.talker == rhs.talker &&
    lhs.utc_time == rhs.utc_time &&
    lhs.zone_offset == rhs.zone_offset &&
    lhs.checksum == rhs.checksum;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ds_nmea_msgs::Zda_<ContainerAllocator1> & lhs, const ::ds_nmea_msgs::Zda_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ds_nmea_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ds_nmea_msgs::Zda_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ds_nmea_msgs::Zda_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_nmea_msgs::Zda_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_nmea_msgs::Zda_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_nmea_msgs::Zda_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_nmea_msgs::Zda_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ds_nmea_msgs::Zda_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f0d99daf09a49acaba2d669768a55717";
  }

  static const char* value(const ::ds_nmea_msgs::Zda_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf0d99daf09a49acaULL;
  static const uint64_t static_value2 = 0xba2d669768a55717ULL;
};

template<class ContainerAllocator>
struct DataType< ::ds_nmea_msgs::Zda_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ds_nmea_msgs/Zda";
  }

  static const char* value(const ::ds_nmea_msgs::Zda_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ds_nmea_msgs::Zda_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ZDA Time of day\n"
"#            1     2 3 4 5 6 7\n"
"#            |     | | | | | |\n"
"# $--ZDA,hhmmss.ss,x,x,x,x,x*hh\n"
"# 1). UTC Time (hhmmss.ss format)\n"
"# 2). Day (01-31)\n"
"# 3). Month (01-12)\n"
"# 4). Year (4-digit)\n"
"# 5). Local zone description, 00 to +/- 13 hours\n"
"# 6). Local zone minutes description (same sign as hours)\n"
"# 7). Checksum\n"
"\n"
"string talker\n"
"time utc_time\n"
"duration zone_offset\n"
"uint8 checksum\n"
;
  }

  static const char* value(const ::ds_nmea_msgs::Zda_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ds_nmea_msgs::Zda_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.talker);
      stream.next(m.utc_time);
      stream.next(m.zone_offset);
      stream.next(m.checksum);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Zda_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ds_nmea_msgs::Zda_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ds_nmea_msgs::Zda_<ContainerAllocator>& v)
  {
    s << indent << "talker: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.talker);
    s << indent << "utc_time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.utc_time);
    s << indent << "zone_offset: ";
    Printer<ros::Duration>::stream(s, indent + "  ", v.zone_offset);
    s << indent << "checksum: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.checksum);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DS_NMEA_MSGS_MESSAGE_ZDA_H
