// Generated by gencpp from file ds_nmea_msgs/Inf.msg
// DO NOT EDIT!


#ifndef DS_NMEA_MSGS_MESSAGE_INF_H
#define DS_NMEA_MSGS_MESSAGE_INF_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ds_nmea_msgs
{
template <class ContainerAllocator>
struct Inf_
{
  typedef Inf_<ContainerAllocator> Type;

  Inf_()
    : heading_invalid(false)
    , pitch_invalid(false)
    , roll_invalid(false)
    , checksum(0)  {
    }
  Inf_(const ContainerAllocator& _alloc)
    : heading_invalid(false)
    , pitch_invalid(false)
    , roll_invalid(false)
    , checksum(0)  {
  (void)_alloc;
    }



   typedef uint8_t _heading_invalid_type;
  _heading_invalid_type heading_invalid;

   typedef uint8_t _pitch_invalid_type;
  _pitch_invalid_type pitch_invalid;

   typedef uint8_t _roll_invalid_type;
  _roll_invalid_type roll_invalid;

   typedef uint8_t _checksum_type;
  _checksum_type checksum;





  typedef boost::shared_ptr< ::ds_nmea_msgs::Inf_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ds_nmea_msgs::Inf_<ContainerAllocator> const> ConstPtr;

}; // struct Inf_

typedef ::ds_nmea_msgs::Inf_<std::allocator<void> > Inf;

typedef boost::shared_ptr< ::ds_nmea_msgs::Inf > InfPtr;
typedef boost::shared_ptr< ::ds_nmea_msgs::Inf const> InfConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ds_nmea_msgs::Inf_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ds_nmea_msgs::Inf_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ds_nmea_msgs::Inf_<ContainerAllocator1> & lhs, const ::ds_nmea_msgs::Inf_<ContainerAllocator2> & rhs)
{
  return lhs.heading_invalid == rhs.heading_invalid &&
    lhs.pitch_invalid == rhs.pitch_invalid &&
    lhs.roll_invalid == rhs.roll_invalid &&
    lhs.checksum == rhs.checksum;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ds_nmea_msgs::Inf_<ContainerAllocator1> & lhs, const ::ds_nmea_msgs::Inf_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ds_nmea_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ds_nmea_msgs::Inf_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ds_nmea_msgs::Inf_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_nmea_msgs::Inf_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_nmea_msgs::Inf_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_nmea_msgs::Inf_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_nmea_msgs::Inf_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ds_nmea_msgs::Inf_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e4d60c2fdfcc64b5fd2650a1d8a49b0f";
  }

  static const char* value(const ::ds_nmea_msgs::Inf_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe4d60c2fdfcc64b5ULL;
  static const uint64_t static_value2 = 0xfd2650a1d8a49b0fULL;
};

template<class ContainerAllocator>
struct DataType< ::ds_nmea_msgs::Inf_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ds_nmea_msgs/Inf";
  }

  static const char* value(const ::ds_nmea_msgs::Inf_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ds_nmea_msgs::Inf_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# $PHINF,hhhhhhhh*hh\n"
"#Bit 0 Heading not valid\n"
"#Bit 1 Roll not valid\n"
"#Bit 2 Pitch not valid\n"
"#Bit 3 Position (Heave, surge and sway) not valid\n"
"#Bit 4 Position calculation starting\n"
"#Bit 5 Initialization\n"
"#Bit 6 Reserved\n"
"#Bit 7 Reserved\n"
"#Bit 8 FOG X1 Error\n"
"#Bit 9 FOG X2 Error\n"
"#Bit 10 FOG X3 Error\n"
"#Bit 11 Optical source error\n"
"#Bit 12 Accelerometer X1 error\n"
"#Bit 13 Accelerometer X2 error\n"
"#Bit 14 Accelerometer X3 error\n"
"#Bit 15 Analog input A or B error\n"
"#Bit 16 Serial input A error\n"
"#Bit 17 Serial input B error\n"
"#Bit 18 Serial input C error\n"
"#Bit 19 FIFO Full\n"
"#Bit 20 Serial output A full\n"
"#Bit 21 Serial output B full\n"
"#Bit 22 Serial output C full\n"
"#Bit 23 Reserved\n"
"#Bit 24 Manual log used\n"
"#Bit 25 Manual latitude used\n"
"\n"
"bool heading_invalid\n"
"bool pitch_invalid\n"
"bool roll_invalid\n"
"uint8 checksum\n"
;
  }

  static const char* value(const ::ds_nmea_msgs::Inf_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ds_nmea_msgs::Inf_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.heading_invalid);
      stream.next(m.pitch_invalid);
      stream.next(m.roll_invalid);
      stream.next(m.checksum);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Inf_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ds_nmea_msgs::Inf_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ds_nmea_msgs::Inf_<ContainerAllocator>& v)
  {
    s << indent << "heading_invalid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.heading_invalid);
    s << indent << "pitch_invalid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.pitch_invalid);
    s << indent << "roll_invalid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.roll_invalid);
    s << indent << "checksum: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.checksum);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DS_NMEA_MSGS_MESSAGE_INF_H
