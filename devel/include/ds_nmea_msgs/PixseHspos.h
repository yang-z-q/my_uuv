// Generated by gencpp from file ds_nmea_msgs/PixseHspos.msg
// DO NOT EDIT!


#ifndef DS_NMEA_MSGS_MESSAGE_PIXSEHSPOS_H
#define DS_NMEA_MSGS_MESSAGE_PIXSEHSPOS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ds_nmea_msgs
{
template <class ContainerAllocator>
struct PixseHspos_
{
  typedef PixseHspos_<ContainerAllocator> Type;

  PixseHspos_()
    : timestamp()
    , latitude(0.0)
    , latitude_dir(0)
    , longitude(0.0)
    , longitude_dir(0)
    , depth(0.0)
    , altitude(0.0)
    , latitude_stdev(0.0)
    , longitude_stdev(0.0)
    , depth_stdev(0.0)
    , longitude_utm_zone(0)
    , latitude_utm_zone(0)
    , eastings(0.0)
    , northings(0.0)
    , heading_misalignment(0.0)
    , heading_misalignment_scale_factor(0.0)
    , sound_velocity(0.0)  {
    }
  PixseHspos_(const ContainerAllocator& _alloc)
    : timestamp()
    , latitude(0.0)
    , latitude_dir(0)
    , longitude(0.0)
    , longitude_dir(0)
    , depth(0.0)
    , altitude(0.0)
    , latitude_stdev(0.0)
    , longitude_stdev(0.0)
    , depth_stdev(0.0)
    , longitude_utm_zone(0)
    , latitude_utm_zone(0)
    , eastings(0.0)
    , northings(0.0)
    , heading_misalignment(0.0)
    , heading_misalignment_scale_factor(0.0)
    , sound_velocity(0.0)  {
  (void)_alloc;
    }



   typedef ros::Time _timestamp_type;
  _timestamp_type timestamp;

   typedef double _latitude_type;
  _latitude_type latitude;

   typedef uint8_t _latitude_dir_type;
  _latitude_dir_type latitude_dir;

   typedef double _longitude_type;
  _longitude_type longitude;

   typedef uint8_t _longitude_dir_type;
  _longitude_dir_type longitude_dir;

   typedef double _depth_type;
  _depth_type depth;

   typedef double _altitude_type;
  _altitude_type altitude;

   typedef double _latitude_stdev_type;
  _latitude_stdev_type latitude_stdev;

   typedef double _longitude_stdev_type;
  _longitude_stdev_type longitude_stdev;

   typedef double _depth_stdev_type;
  _depth_stdev_type depth_stdev;

   typedef int16_t _longitude_utm_zone_type;
  _longitude_utm_zone_type longitude_utm_zone;

   typedef uint8_t _latitude_utm_zone_type;
  _latitude_utm_zone_type latitude_utm_zone;

   typedef double _eastings_type;
  _eastings_type eastings;

   typedef double _northings_type;
  _northings_type northings;

   typedef double _heading_misalignment_type;
  _heading_misalignment_type heading_misalignment;

   typedef double _heading_misalignment_scale_factor_type;
  _heading_misalignment_scale_factor_type heading_misalignment_scale_factor;

   typedef double _sound_velocity_type;
  _sound_velocity_type sound_velocity;





  typedef boost::shared_ptr< ::ds_nmea_msgs::PixseHspos_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ds_nmea_msgs::PixseHspos_<ContainerAllocator> const> ConstPtr;

}; // struct PixseHspos_

typedef ::ds_nmea_msgs::PixseHspos_<std::allocator<void> > PixseHspos;

typedef boost::shared_ptr< ::ds_nmea_msgs::PixseHspos > PixseHsposPtr;
typedef boost::shared_ptr< ::ds_nmea_msgs::PixseHspos const> PixseHsposConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ds_nmea_msgs::PixseHspos_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ds_nmea_msgs::PixseHspos_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ds_nmea_msgs::PixseHspos_<ContainerAllocator1> & lhs, const ::ds_nmea_msgs::PixseHspos_<ContainerAllocator2> & rhs)
{
  return lhs.timestamp == rhs.timestamp &&
    lhs.latitude == rhs.latitude &&
    lhs.latitude_dir == rhs.latitude_dir &&
    lhs.longitude == rhs.longitude &&
    lhs.longitude_dir == rhs.longitude_dir &&
    lhs.depth == rhs.depth &&
    lhs.altitude == rhs.altitude &&
    lhs.latitude_stdev == rhs.latitude_stdev &&
    lhs.longitude_stdev == rhs.longitude_stdev &&
    lhs.depth_stdev == rhs.depth_stdev &&
    lhs.longitude_utm_zone == rhs.longitude_utm_zone &&
    lhs.latitude_utm_zone == rhs.latitude_utm_zone &&
    lhs.eastings == rhs.eastings &&
    lhs.northings == rhs.northings &&
    lhs.heading_misalignment == rhs.heading_misalignment &&
    lhs.heading_misalignment_scale_factor == rhs.heading_misalignment_scale_factor &&
    lhs.sound_velocity == rhs.sound_velocity;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ds_nmea_msgs::PixseHspos_<ContainerAllocator1> & lhs, const ::ds_nmea_msgs::PixseHspos_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ds_nmea_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ds_nmea_msgs::PixseHspos_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ds_nmea_msgs::PixseHspos_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_nmea_msgs::PixseHspos_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_nmea_msgs::PixseHspos_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_nmea_msgs::PixseHspos_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_nmea_msgs::PixseHspos_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ds_nmea_msgs::PixseHspos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ecf1675cf370394ebfc52d763265df25";
  }

  static const char* value(const ::ds_nmea_msgs::PixseHspos_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xecf1675cf370394eULL;
  static const uint64_t static_value2 = 0xbfc52d763265df25ULL;
};

template<class ContainerAllocator>
struct DataType< ::ds_nmea_msgs::PixseHspos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ds_nmea_msgs/PixseHspos";
  }

  static const char* value(const ::ds_nmea_msgs::PixseHspos_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ds_nmea_msgs::PixseHspos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# $PIXSE,HSPOS_,hhmmss.ss,llmm.mmmmm,H,LLmm.mmmmm,D,d.dd,a.ad,x.xx,y.yy,z.zz,d.dd,nn,\n"
"#          c,e.e,n.n,m.mmmm,s.ssss,vvvv.v<CR><LF>\n"
"# where:\n"
"# hhmmss.ss      is the validity time of the latitude/longitude data transmitted in the\n"
"#                UTC time reference frame if available otherwise in the system\n"
"#                time reference frame\n"
"# llmm.mmmmm     is the latitude in deg, minutes, decimal minutes\n"
"# H              N: north, S: south\n"
"# LLLmm.mmmmm    is the longitude in deg, minutes, decimal minutes\n"
"# D              E: east, W: west\n"
"# d.dd           is the depth in meters\n"
"# a.aa           is the altitude in meters (from DVL)\n"
"# x.xx           is the latitude Std (meters)\n"
"# y.yy           is the longitude Std (meters)\n"
"# z.zz           is the latitude longitude error covariance (meters)\n"
"# d.dd           is the depth Std (meters)\n"
"# nn             is the longitude UTM zone (integer)\n"
"# c              is the latitude UTM zone (character)\n"
"# e.e            is the East UTM position (meters)\n"
"# n.n            is the North UTM position (meters)\n"
"# m.mmmm         is the log misalignment according to the heading in degrees\n"
"# s.ssss         is the log scale factor error estimation in %\n"
"# vvvv.v         is the sound velocity in m/s\n"
"\n"
"time             timestamp\n"
"float64          latitude\n"
"uint8            latitude_dir\n"
"float64          longitude\n"
"uint8            longitude_dir\n"
"float64          depth\n"
"float64          altitude\n"
"float64          latitude_stdev\n"
"float64          longitude_stdev\n"
"float64          depth_stdev\n"
"int16            longitude_utm_zone\n"
"uint8            latitude_utm_zone\n"
"float64          eastings\n"
"float64          northings\n"
"float64          heading_misalignment\n"
"float64          heading_misalignment_scale_factor\n"
"float64          sound_velocity\n"
;
  }

  static const char* value(const ::ds_nmea_msgs::PixseHspos_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ds_nmea_msgs::PixseHspos_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timestamp);
      stream.next(m.latitude);
      stream.next(m.latitude_dir);
      stream.next(m.longitude);
      stream.next(m.longitude_dir);
      stream.next(m.depth);
      stream.next(m.altitude);
      stream.next(m.latitude_stdev);
      stream.next(m.longitude_stdev);
      stream.next(m.depth_stdev);
      stream.next(m.longitude_utm_zone);
      stream.next(m.latitude_utm_zone);
      stream.next(m.eastings);
      stream.next(m.northings);
      stream.next(m.heading_misalignment);
      stream.next(m.heading_misalignment_scale_factor);
      stream.next(m.sound_velocity);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PixseHspos_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ds_nmea_msgs::PixseHspos_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ds_nmea_msgs::PixseHspos_<ContainerAllocator>& v)
  {
    s << indent << "timestamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.timestamp);
    s << indent << "latitude: ";
    Printer<double>::stream(s, indent + "  ", v.latitude);
    s << indent << "latitude_dir: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.latitude_dir);
    s << indent << "longitude: ";
    Printer<double>::stream(s, indent + "  ", v.longitude);
    s << indent << "longitude_dir: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.longitude_dir);
    s << indent << "depth: ";
    Printer<double>::stream(s, indent + "  ", v.depth);
    s << indent << "altitude: ";
    Printer<double>::stream(s, indent + "  ", v.altitude);
    s << indent << "latitude_stdev: ";
    Printer<double>::stream(s, indent + "  ", v.latitude_stdev);
    s << indent << "longitude_stdev: ";
    Printer<double>::stream(s, indent + "  ", v.longitude_stdev);
    s << indent << "depth_stdev: ";
    Printer<double>::stream(s, indent + "  ", v.depth_stdev);
    s << indent << "longitude_utm_zone: ";
    Printer<int16_t>::stream(s, indent + "  ", v.longitude_utm_zone);
    s << indent << "latitude_utm_zone: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.latitude_utm_zone);
    s << indent << "eastings: ";
    Printer<double>::stream(s, indent + "  ", v.eastings);
    s << indent << "northings: ";
    Printer<double>::stream(s, indent + "  ", v.northings);
    s << indent << "heading_misalignment: ";
    Printer<double>::stream(s, indent + "  ", v.heading_misalignment);
    s << indent << "heading_misalignment_scale_factor: ";
    Printer<double>::stream(s, indent + "  ", v.heading_misalignment_scale_factor);
    s << indent << "sound_velocity: ";
    Printer<double>::stream(s, indent + "  ", v.sound_velocity);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DS_NMEA_MSGS_MESSAGE_PIXSEHSPOS_H
