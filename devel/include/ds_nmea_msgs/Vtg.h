// Generated by gencpp from file ds_nmea_msgs/Vtg.msg
// DO NOT EDIT!


#ifndef DS_NMEA_MSGS_MESSAGE_VTG_H
#define DS_NMEA_MSGS_MESSAGE_VTG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ds_nmea_msgs
{
template <class ContainerAllocator>
struct Vtg_
{
  typedef Vtg_<ContainerAllocator> Type;

  Vtg_()
    : talker()
    , track_degrees_true(0.0)
    , track_degrees_magnetic(0.0)
    , speed_knots(0.0)
    , speed_km_per_hour(0.0)
    , mode()
    , checksum(0)  {
    }
  Vtg_(const ContainerAllocator& _alloc)
    : talker(_alloc)
    , track_degrees_true(0.0)
    , track_degrees_magnetic(0.0)
    , speed_knots(0.0)
    , speed_km_per_hour(0.0)
    , mode(_alloc)
    , checksum(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _talker_type;
  _talker_type talker;

   typedef double _track_degrees_true_type;
  _track_degrees_true_type track_degrees_true;

   typedef double _track_degrees_magnetic_type;
  _track_degrees_magnetic_type track_degrees_magnetic;

   typedef double _speed_knots_type;
  _speed_knots_type speed_knots;

   typedef double _speed_km_per_hour_type;
  _speed_km_per_hour_type speed_km_per_hour;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _mode_type;
  _mode_type mode;

   typedef uint8_t _checksum_type;
  _checksum_type checksum;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(VTG_NO_DATA)
  #undef VTG_NO_DATA
#endif


  static const double VTG_NO_DATA;

  typedef boost::shared_ptr< ::ds_nmea_msgs::Vtg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ds_nmea_msgs::Vtg_<ContainerAllocator> const> ConstPtr;

}; // struct Vtg_

typedef ::ds_nmea_msgs::Vtg_<std::allocator<void> > Vtg;

typedef boost::shared_ptr< ::ds_nmea_msgs::Vtg > VtgPtr;
typedef boost::shared_ptr< ::ds_nmea_msgs::Vtg const> VtgConstPtr;

// constants requiring out of line definition

   
   template<typename ContainerAllocator> const double
      Vtg_<ContainerAllocator>::VTG_NO_DATA =
        
          -999.999
        
        ;
   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ds_nmea_msgs::Vtg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ds_nmea_msgs::Vtg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ds_nmea_msgs::Vtg_<ContainerAllocator1> & lhs, const ::ds_nmea_msgs::Vtg_<ContainerAllocator2> & rhs)
{
  return lhs.talker == rhs.talker &&
    lhs.track_degrees_true == rhs.track_degrees_true &&
    lhs.track_degrees_magnetic == rhs.track_degrees_magnetic &&
    lhs.speed_knots == rhs.speed_knots &&
    lhs.speed_km_per_hour == rhs.speed_km_per_hour &&
    lhs.mode == rhs.mode &&
    lhs.checksum == rhs.checksum;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ds_nmea_msgs::Vtg_<ContainerAllocator1> & lhs, const ::ds_nmea_msgs::Vtg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ds_nmea_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ds_nmea_msgs::Vtg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ds_nmea_msgs::Vtg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_nmea_msgs::Vtg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_nmea_msgs::Vtg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_nmea_msgs::Vtg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_nmea_msgs::Vtg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ds_nmea_msgs::Vtg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0d569c07461d690ce7df420862dd96ad";
  }

  static const char* value(const ::ds_nmea_msgs::Vtg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0d569c07461d690cULL;
  static const uint64_t static_value2 = 0xe7df420862dd96adULL;
};

template<class ContainerAllocator>
struct DataType< ::ds_nmea_msgs::Vtg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ds_nmea_msgs/Vtg";
  }

  static const char* value(const ::ds_nmea_msgs::Vtg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ds_nmea_msgs::Vtg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# VTG Track Made Good and Ground Speed\n"
"#        1   2 3   4 5   6 7   8 9\n"
"#        |   | |   | |   | |   | |\n"
"# $--VTG,x.x,T,x.x,M,x.x,N,x.x,K,N*hh\n"
"# 1) Track Degrees\n"
"# 2) T = True\n"
"# 3) Track Degrees\n"
"# 4) M = Magnetic\n"
"# 5) Speed Knots\n"
"# 6) N = Knots\n"
"# 7) Speed Kph\n"
"# 8) K = Kilometres Per Hour\n"
"# 9) Mode Indicator\n"
"#    A = Automoous\n"
"#    D = Differential\n"
"#    E = Estimated / Dead Reckoning\n"
"#    M = Manual input\n"
"#    N = Data not valid.\n"
"# 9) Checksum\n"
"\n"
"float64    VTG_NO_DATA=-999.999\n"
"\n"
"string     talker\n"
"float64    track_degrees_true\n"
"float64    track_degrees_magnetic\n"
"float64    speed_knots\n"
"float64    speed_km_per_hour\n"
"string     mode\n"
"uint8      checksum\n"
;
  }

  static const char* value(const ::ds_nmea_msgs::Vtg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ds_nmea_msgs::Vtg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.talker);
      stream.next(m.track_degrees_true);
      stream.next(m.track_degrees_magnetic);
      stream.next(m.speed_knots);
      stream.next(m.speed_km_per_hour);
      stream.next(m.mode);
      stream.next(m.checksum);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Vtg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ds_nmea_msgs::Vtg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ds_nmea_msgs::Vtg_<ContainerAllocator>& v)
  {
    s << indent << "talker: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.talker);
    s << indent << "track_degrees_true: ";
    Printer<double>::stream(s, indent + "  ", v.track_degrees_true);
    s << indent << "track_degrees_magnetic: ";
    Printer<double>::stream(s, indent + "  ", v.track_degrees_magnetic);
    s << indent << "speed_knots: ";
    Printer<double>::stream(s, indent + "  ", v.speed_knots);
    s << indent << "speed_km_per_hour: ";
    Printer<double>::stream(s, indent + "  ", v.speed_km_per_hour);
    s << indent << "mode: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.mode);
    s << indent << "checksum: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.checksum);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DS_NMEA_MSGS_MESSAGE_VTG_H
