// Generated by gencpp from file ds_nmea_msgs/PixseUtmwgs.msg
// DO NOT EDIT!


#ifndef DS_NMEA_MSGS_MESSAGE_PIXSEUTMWGS_H
#define DS_NMEA_MSGS_MESSAGE_PIXSEUTMWGS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ds_nmea_msgs
{
template <class ContainerAllocator>
struct PixseUtmwgs_
{
  typedef PixseUtmwgs_<ContainerAllocator> Type;

  PixseUtmwgs_()
    : latitude_utm_zone(0)
    , longitude_utm_zone(0)
    , eastings(0.0)
    , northings(0.0)
    , altitude(0.0)
    , checksum(0)  {
    }
  PixseUtmwgs_(const ContainerAllocator& _alloc)
    : latitude_utm_zone(0)
    , longitude_utm_zone(0)
    , eastings(0.0)
    , northings(0.0)
    , altitude(0.0)
    , checksum(0)  {
  (void)_alloc;
    }



   typedef uint8_t _latitude_utm_zone_type;
  _latitude_utm_zone_type latitude_utm_zone;

   typedef int16_t _longitude_utm_zone_type;
  _longitude_utm_zone_type longitude_utm_zone;

   typedef double _eastings_type;
  _eastings_type eastings;

   typedef double _northings_type;
  _northings_type northings;

   typedef double _altitude_type;
  _altitude_type altitude;

   typedef uint8_t _checksum_type;
  _checksum_type checksum;





  typedef boost::shared_ptr< ::ds_nmea_msgs::PixseUtmwgs_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ds_nmea_msgs::PixseUtmwgs_<ContainerAllocator> const> ConstPtr;

}; // struct PixseUtmwgs_

typedef ::ds_nmea_msgs::PixseUtmwgs_<std::allocator<void> > PixseUtmwgs;

typedef boost::shared_ptr< ::ds_nmea_msgs::PixseUtmwgs > PixseUtmwgsPtr;
typedef boost::shared_ptr< ::ds_nmea_msgs::PixseUtmwgs const> PixseUtmwgsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ds_nmea_msgs::PixseUtmwgs_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ds_nmea_msgs::PixseUtmwgs_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ds_nmea_msgs::PixseUtmwgs_<ContainerAllocator1> & lhs, const ::ds_nmea_msgs::PixseUtmwgs_<ContainerAllocator2> & rhs)
{
  return lhs.latitude_utm_zone == rhs.latitude_utm_zone &&
    lhs.longitude_utm_zone == rhs.longitude_utm_zone &&
    lhs.eastings == rhs.eastings &&
    lhs.northings == rhs.northings &&
    lhs.altitude == rhs.altitude &&
    lhs.checksum == rhs.checksum;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ds_nmea_msgs::PixseUtmwgs_<ContainerAllocator1> & lhs, const ::ds_nmea_msgs::PixseUtmwgs_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ds_nmea_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ds_nmea_msgs::PixseUtmwgs_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ds_nmea_msgs::PixseUtmwgs_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_nmea_msgs::PixseUtmwgs_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_nmea_msgs::PixseUtmwgs_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_nmea_msgs::PixseUtmwgs_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_nmea_msgs::PixseUtmwgs_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ds_nmea_msgs::PixseUtmwgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1e85b504ef3574f02eaff5dc8eded397";
  }

  static const char* value(const ::ds_nmea_msgs::PixseUtmwgs_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1e85b504ef3574f0ULL;
  static const uint64_t static_value2 = 0x2eaff5dc8eded397ULL;
};

template<class ContainerAllocator>
struct DataType< ::ds_nmea_msgs::PixseUtmwgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ds_nmea_msgs/PixseUtmwgs";
  }

  static const char* value(const ::ds_nmea_msgs::PixseUtmwgs_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ds_nmea_msgs::PixseUtmwgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# $PIXSE,UTMWGS,c,nn,x.xxx,y.yyy,z.zzz*hh<CR><LF>\n"
"# where:\n"
"# C is the latitude UTM zone (character)\n"
"# nn is the longitude UTM zone (integer)\n"
"# x.xxx is the east UTM position in meter\n"
"# y.yyy is the north UTM position in meter\n"
"# z.zzz is the altitude in meters\n"
"# hh is the checksum\n"
"\n"
"uint8 latitude_utm_zone\n"
"int16 longitude_utm_zone\n"
"float64 eastings\n"
"float64 northings\n"
"float64 altitude\n"
"uint8 checksum\n"
;
  }

  static const char* value(const ::ds_nmea_msgs::PixseUtmwgs_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ds_nmea_msgs::PixseUtmwgs_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.latitude_utm_zone);
      stream.next(m.longitude_utm_zone);
      stream.next(m.eastings);
      stream.next(m.northings);
      stream.next(m.altitude);
      stream.next(m.checksum);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PixseUtmwgs_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ds_nmea_msgs::PixseUtmwgs_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ds_nmea_msgs::PixseUtmwgs_<ContainerAllocator>& v)
  {
    s << indent << "latitude_utm_zone: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.latitude_utm_zone);
    s << indent << "longitude_utm_zone: ";
    Printer<int16_t>::stream(s, indent + "  ", v.longitude_utm_zone);
    s << indent << "eastings: ";
    Printer<double>::stream(s, indent + "  ", v.eastings);
    s << indent << "northings: ";
    Printer<double>::stream(s, indent + "  ", v.northings);
    s << indent << "altitude: ";
    Printer<double>::stream(s, indent + "  ", v.altitude);
    s << indent << "checksum: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.checksum);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DS_NMEA_MSGS_MESSAGE_PIXSEUTMWGS_H
