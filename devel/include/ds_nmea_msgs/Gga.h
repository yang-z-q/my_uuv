// Generated by gencpp from file ds_nmea_msgs/Gga.msg
// DO NOT EDIT!


#ifndef DS_NMEA_MSGS_MESSAGE_GGA_H
#define DS_NMEA_MSGS_MESSAGE_GGA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ds_nmea_msgs
{
template <class ContainerAllocator>
struct Gga_
{
  typedef Gga_<ContainerAllocator> Type;

  Gga_()
    : talker()
    , timestamp()
    , latitude(0.0)
    , latitude_dir(0)
    , longitude(0.0)
    , longitude_dir(0)
    , fix_quality(0)
    , num_satellites(0)
    , hdop(0.0)
    , antenna_alt(0.0)
    , antenna_alt_unit(0)
    , geoid_separation(0.0)
    , geoid_separation_unit(0)
    , dgps_age(0.0)
    , dgps_ref(0)
    , checksum(0)  {
    }
  Gga_(const ContainerAllocator& _alloc)
    : talker(_alloc)
    , timestamp()
    , latitude(0.0)
    , latitude_dir(0)
    , longitude(0.0)
    , longitude_dir(0)
    , fix_quality(0)
    , num_satellites(0)
    , hdop(0.0)
    , antenna_alt(0.0)
    , antenna_alt_unit(0)
    , geoid_separation(0.0)
    , geoid_separation_unit(0)
    , dgps_age(0.0)
    , dgps_ref(0)
    , checksum(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _talker_type;
  _talker_type talker;

   typedef ros::Time _timestamp_type;
  _timestamp_type timestamp;

   typedef double _latitude_type;
  _latitude_type latitude;

   typedef uint8_t _latitude_dir_type;
  _latitude_dir_type latitude_dir;

   typedef double _longitude_type;
  _longitude_type longitude;

   typedef uint8_t _longitude_dir_type;
  _longitude_dir_type longitude_dir;

   typedef uint8_t _fix_quality_type;
  _fix_quality_type fix_quality;

   typedef uint8_t _num_satellites_type;
  _num_satellites_type num_satellites;

   typedef double _hdop_type;
  _hdop_type hdop;

   typedef double _antenna_alt_type;
  _antenna_alt_type antenna_alt;

   typedef uint8_t _antenna_alt_unit_type;
  _antenna_alt_unit_type antenna_alt_unit;

   typedef double _geoid_separation_type;
  _geoid_separation_type geoid_separation;

   typedef uint8_t _geoid_separation_unit_type;
  _geoid_separation_unit_type geoid_separation_unit;

   typedef double _dgps_age_type;
  _dgps_age_type dgps_age;

   typedef uint16_t _dgps_ref_type;
  _dgps_ref_type dgps_ref;

   typedef uint8_t _checksum_type;
  _checksum_type checksum;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(GGA_NO_DATA)
  #undef GGA_NO_DATA
#endif
#if defined(_WIN32) && defined(FIX_NONE)
  #undef FIX_NONE
#endif
#if defined(_WIN32) && defined(FIX_GPS)
  #undef FIX_GPS
#endif
#if defined(_WIN32) && defined(FIX_DGPS)
  #undef FIX_DGPS
#endif

  enum {
    FIX_NONE = 0u,
    FIX_GPS = 1u,
    FIX_DGPS = 2u,
  };

  static const double GGA_NO_DATA;

  typedef boost::shared_ptr< ::ds_nmea_msgs::Gga_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ds_nmea_msgs::Gga_<ContainerAllocator> const> ConstPtr;

}; // struct Gga_

typedef ::ds_nmea_msgs::Gga_<std::allocator<void> > Gga;

typedef boost::shared_ptr< ::ds_nmea_msgs::Gga > GgaPtr;
typedef boost::shared_ptr< ::ds_nmea_msgs::Gga const> GgaConstPtr;

// constants requiring out of line definition

   
   template<typename ContainerAllocator> const double
      Gga_<ContainerAllocator>::GGA_NO_DATA =
        
          -999.9999
        
        ;
   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ds_nmea_msgs::Gga_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ds_nmea_msgs::Gga_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ds_nmea_msgs::Gga_<ContainerAllocator1> & lhs, const ::ds_nmea_msgs::Gga_<ContainerAllocator2> & rhs)
{
  return lhs.talker == rhs.talker &&
    lhs.timestamp == rhs.timestamp &&
    lhs.latitude == rhs.latitude &&
    lhs.latitude_dir == rhs.latitude_dir &&
    lhs.longitude == rhs.longitude &&
    lhs.longitude_dir == rhs.longitude_dir &&
    lhs.fix_quality == rhs.fix_quality &&
    lhs.num_satellites == rhs.num_satellites &&
    lhs.hdop == rhs.hdop &&
    lhs.antenna_alt == rhs.antenna_alt &&
    lhs.antenna_alt_unit == rhs.antenna_alt_unit &&
    lhs.geoid_separation == rhs.geoid_separation &&
    lhs.geoid_separation_unit == rhs.geoid_separation_unit &&
    lhs.dgps_age == rhs.dgps_age &&
    lhs.dgps_ref == rhs.dgps_ref &&
    lhs.checksum == rhs.checksum;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ds_nmea_msgs::Gga_<ContainerAllocator1> & lhs, const ::ds_nmea_msgs::Gga_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ds_nmea_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ds_nmea_msgs::Gga_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ds_nmea_msgs::Gga_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_nmea_msgs::Gga_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_nmea_msgs::Gga_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_nmea_msgs::Gga_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_nmea_msgs::Gga_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ds_nmea_msgs::Gga_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ac688c8c94235795168e8df4f2a7a2f9";
  }

  static const char* value(const ::ds_nmea_msgs::Gga_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xac688c8c94235795ULL;
  static const uint64_t static_value2 = 0x168e8df4f2a7a2f9ULL;
};

template<class ContainerAllocator>
struct DataType< ::ds_nmea_msgs::Gga_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ds_nmea_msgs/Gga";
  }

  static const char* value(const ::ds_nmea_msgs::Gga_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ds_nmea_msgs::Gga_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#         1         2      3 4        5 6 7  8   9   10 |  12 13  14   15\n"
"#         |         |      | |        | | |  |   |   |  |  |  |   |    |\n"
"# $--GGA,hhmmss.ss,llll.ll,a,yyyyy.yy,a,x,xx,x.x,x.x,M,x.x,M,x.x,xxxx*hh\n"
"#  1) Time (UTC)\n"
"#  2) Latitude\n"
"#  3) N or S (North or South)\n"
"#  4) Longitude\n"
"#  5) E or W (East or West)\n"
"#  6) GPS Quality Indicator,\n"
"#  0 - fix not available,\n"
"#  1 - GPS fix,\n"
"#  2 - Differential GPS fix\n"
"#  7) Number of satellites in view, 00 - 12\n"
"#  8) Horizontal Dilution of precision\n"
"#  9) Antenna Altitude above/below mean-sea-level (geoid)\n"
"# 10) Units of antenna altitude, meters\n"
"# 11) Geoidal separation, the difference between the WGS-84 earth ellipsoid and mean-sea-level (geoid), \"-\" means mean-sea-level below ellipsoid\n"
"# 12) Units of geoidal separation, meters\n"
"# 13) Age of differential GPS data, time in seconds since last SC104 type 1 or 9 update, null field when DGPS is not used\n"
"# 14) Differential reference station ID, 0000-1023\n"
"# 15) Checksum\n"
"\n"
"# No data value\n"
"float64 GGA_NO_DATA=-999.9999\n"
"\n"
"# Enum values for fix_quality field.\n"
"uint8 FIX_NONE=0\n"
"uint8 FIX_GPS=1\n"
"uint8 FIX_DGPS=2\n"
"\n"
"string           talker\n"
"time             timestamp\n"
"float64          latitude\n"
"uint8            latitude_dir\n"
"float64          longitude\n"
"uint8            longitude_dir\n"
"uint8            fix_quality\n"
"uint8            num_satellites\n"
"float64          hdop\n"
"float64          antenna_alt\n"
"uint8            antenna_alt_unit\n"
"float64          geoid_separation\n"
"uint8            geoid_separation_unit\n"
"float64          dgps_age\n"
"uint16           dgps_ref\n"
"uint8            checksum\n"
"\n"
"\n"
;
  }

  static const char* value(const ::ds_nmea_msgs::Gga_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ds_nmea_msgs::Gga_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.talker);
      stream.next(m.timestamp);
      stream.next(m.latitude);
      stream.next(m.latitude_dir);
      stream.next(m.longitude);
      stream.next(m.longitude_dir);
      stream.next(m.fix_quality);
      stream.next(m.num_satellites);
      stream.next(m.hdop);
      stream.next(m.antenna_alt);
      stream.next(m.antenna_alt_unit);
      stream.next(m.geoid_separation);
      stream.next(m.geoid_separation_unit);
      stream.next(m.dgps_age);
      stream.next(m.dgps_ref);
      stream.next(m.checksum);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Gga_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ds_nmea_msgs::Gga_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ds_nmea_msgs::Gga_<ContainerAllocator>& v)
  {
    s << indent << "talker: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.talker);
    s << indent << "timestamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.timestamp);
    s << indent << "latitude: ";
    Printer<double>::stream(s, indent + "  ", v.latitude);
    s << indent << "latitude_dir: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.latitude_dir);
    s << indent << "longitude: ";
    Printer<double>::stream(s, indent + "  ", v.longitude);
    s << indent << "longitude_dir: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.longitude_dir);
    s << indent << "fix_quality: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.fix_quality);
    s << indent << "num_satellites: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.num_satellites);
    s << indent << "hdop: ";
    Printer<double>::stream(s, indent + "  ", v.hdop);
    s << indent << "antenna_alt: ";
    Printer<double>::stream(s, indent + "  ", v.antenna_alt);
    s << indent << "antenna_alt_unit: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.antenna_alt_unit);
    s << indent << "geoid_separation: ";
    Printer<double>::stream(s, indent + "  ", v.geoid_separation);
    s << indent << "geoid_separation_unit: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.geoid_separation_unit);
    s << indent << "dgps_age: ";
    Printer<double>::stream(s, indent + "  ", v.dgps_age);
    s << indent << "dgps_ref: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.dgps_ref);
    s << indent << "checksum: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.checksum);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DS_NMEA_MSGS_MESSAGE_GGA_H
