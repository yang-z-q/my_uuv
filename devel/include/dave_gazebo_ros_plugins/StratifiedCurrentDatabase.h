// Generated by gencpp from file dave_gazebo_ros_plugins/StratifiedCurrentDatabase.msg
// DO NOT EDIT!


#ifndef DAVE_GAZEBO_ROS_PLUGINS_MESSAGE_STRATIFIEDCURRENTDATABASE_H
#define DAVE_GAZEBO_ROS_PLUGINS_MESSAGE_STRATIFIEDCURRENTDATABASE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Vector3.h>

namespace dave_gazebo_ros_plugins
{
template <class ContainerAllocator>
struct StratifiedCurrentDatabase_
{
  typedef StratifiedCurrentDatabase_<ContainerAllocator> Type;

  StratifiedCurrentDatabase_()
    : depths()
    , velocities()
    , timeGMTYear()
    , timeGMTMonth()
    , timeGMTDay()
    , timeGMTHour()
    , timeGMTMinute()
    , tideVelocities()
    , tideConstituents(false)
    , M2amp(0.0)
    , M2phase(0.0)
    , M2speed(0.0)
    , S2amp(0.0)
    , S2phase(0.0)
    , S2speed(0.0)
    , N2amp(0.0)
    , N2phase(0.0)
    , N2speed(0.0)
    , ebbDirection(0.0)
    , floodDirection(0.0)
    , worldStartTimeYear(0)
    , worldStartTimeMonth(0)
    , worldStartTimeDay(0)
    , worldStartTimeHour(0)
    , worldStartTimeMinute(0)  {
    }
  StratifiedCurrentDatabase_(const ContainerAllocator& _alloc)
    : depths(_alloc)
    , velocities(_alloc)
    , timeGMTYear(_alloc)
    , timeGMTMonth(_alloc)
    , timeGMTDay(_alloc)
    , timeGMTHour(_alloc)
    , timeGMTMinute(_alloc)
    , tideVelocities(_alloc)
    , tideConstituents(false)
    , M2amp(0.0)
    , M2phase(0.0)
    , M2speed(0.0)
    , S2amp(0.0)
    , S2phase(0.0)
    , S2speed(0.0)
    , N2amp(0.0)
    , N2phase(0.0)
    , N2speed(0.0)
    , ebbDirection(0.0)
    , floodDirection(0.0)
    , worldStartTimeYear(0)
    , worldStartTimeMonth(0)
    , worldStartTimeDay(0)
    , worldStartTimeHour(0)
    , worldStartTimeMinute(0)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _depths_type;
  _depths_type depths;

   typedef std::vector< ::geometry_msgs::Vector3_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Vector3_<ContainerAllocator> >> _velocities_type;
  _velocities_type velocities;

   typedef std::vector<int16_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int16_t>> _timeGMTYear_type;
  _timeGMTYear_type timeGMTYear;

   typedef std::vector<int16_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int16_t>> _timeGMTMonth_type;
  _timeGMTMonth_type timeGMTMonth;

   typedef std::vector<int16_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int16_t>> _timeGMTDay_type;
  _timeGMTDay_type timeGMTDay;

   typedef std::vector<int16_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int16_t>> _timeGMTHour_type;
  _timeGMTHour_type timeGMTHour;

   typedef std::vector<int16_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int16_t>> _timeGMTMinute_type;
  _timeGMTMinute_type timeGMTMinute;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _tideVelocities_type;
  _tideVelocities_type tideVelocities;

   typedef uint8_t _tideConstituents_type;
  _tideConstituents_type tideConstituents;

   typedef float _M2amp_type;
  _M2amp_type M2amp;

   typedef float _M2phase_type;
  _M2phase_type M2phase;

   typedef float _M2speed_type;
  _M2speed_type M2speed;

   typedef float _S2amp_type;
  _S2amp_type S2amp;

   typedef float _S2phase_type;
  _S2phase_type S2phase;

   typedef float _S2speed_type;
  _S2speed_type S2speed;

   typedef float _N2amp_type;
  _N2amp_type N2amp;

   typedef float _N2phase_type;
  _N2phase_type N2phase;

   typedef float _N2speed_type;
  _N2speed_type N2speed;

   typedef float _ebbDirection_type;
  _ebbDirection_type ebbDirection;

   typedef float _floodDirection_type;
  _floodDirection_type floodDirection;

   typedef int16_t _worldStartTimeYear_type;
  _worldStartTimeYear_type worldStartTimeYear;

   typedef int16_t _worldStartTimeMonth_type;
  _worldStartTimeMonth_type worldStartTimeMonth;

   typedef int16_t _worldStartTimeDay_type;
  _worldStartTimeDay_type worldStartTimeDay;

   typedef int16_t _worldStartTimeHour_type;
  _worldStartTimeHour_type worldStartTimeHour;

   typedef int16_t _worldStartTimeMinute_type;
  _worldStartTimeMinute_type worldStartTimeMinute;





  typedef boost::shared_ptr< ::dave_gazebo_ros_plugins::StratifiedCurrentDatabase_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dave_gazebo_ros_plugins::StratifiedCurrentDatabase_<ContainerAllocator> const> ConstPtr;

}; // struct StratifiedCurrentDatabase_

typedef ::dave_gazebo_ros_plugins::StratifiedCurrentDatabase_<std::allocator<void> > StratifiedCurrentDatabase;

typedef boost::shared_ptr< ::dave_gazebo_ros_plugins::StratifiedCurrentDatabase > StratifiedCurrentDatabasePtr;
typedef boost::shared_ptr< ::dave_gazebo_ros_plugins::StratifiedCurrentDatabase const> StratifiedCurrentDatabaseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dave_gazebo_ros_plugins::StratifiedCurrentDatabase_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dave_gazebo_ros_plugins::StratifiedCurrentDatabase_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dave_gazebo_ros_plugins::StratifiedCurrentDatabase_<ContainerAllocator1> & lhs, const ::dave_gazebo_ros_plugins::StratifiedCurrentDatabase_<ContainerAllocator2> & rhs)
{
  return lhs.depths == rhs.depths &&
    lhs.velocities == rhs.velocities &&
    lhs.timeGMTYear == rhs.timeGMTYear &&
    lhs.timeGMTMonth == rhs.timeGMTMonth &&
    lhs.timeGMTDay == rhs.timeGMTDay &&
    lhs.timeGMTHour == rhs.timeGMTHour &&
    lhs.timeGMTMinute == rhs.timeGMTMinute &&
    lhs.tideVelocities == rhs.tideVelocities &&
    lhs.tideConstituents == rhs.tideConstituents &&
    lhs.M2amp == rhs.M2amp &&
    lhs.M2phase == rhs.M2phase &&
    lhs.M2speed == rhs.M2speed &&
    lhs.S2amp == rhs.S2amp &&
    lhs.S2phase == rhs.S2phase &&
    lhs.S2speed == rhs.S2speed &&
    lhs.N2amp == rhs.N2amp &&
    lhs.N2phase == rhs.N2phase &&
    lhs.N2speed == rhs.N2speed &&
    lhs.ebbDirection == rhs.ebbDirection &&
    lhs.floodDirection == rhs.floodDirection &&
    lhs.worldStartTimeYear == rhs.worldStartTimeYear &&
    lhs.worldStartTimeMonth == rhs.worldStartTimeMonth &&
    lhs.worldStartTimeDay == rhs.worldStartTimeDay &&
    lhs.worldStartTimeHour == rhs.worldStartTimeHour &&
    lhs.worldStartTimeMinute == rhs.worldStartTimeMinute;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dave_gazebo_ros_plugins::StratifiedCurrentDatabase_<ContainerAllocator1> & lhs, const ::dave_gazebo_ros_plugins::StratifiedCurrentDatabase_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dave_gazebo_ros_plugins

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dave_gazebo_ros_plugins::StratifiedCurrentDatabase_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dave_gazebo_ros_plugins::StratifiedCurrentDatabase_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dave_gazebo_ros_plugins::StratifiedCurrentDatabase_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dave_gazebo_ros_plugins::StratifiedCurrentDatabase_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dave_gazebo_ros_plugins::StratifiedCurrentDatabase_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dave_gazebo_ros_plugins::StratifiedCurrentDatabase_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dave_gazebo_ros_plugins::StratifiedCurrentDatabase_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cae79f9939f13721eab1911acfc60050";
  }

  static const char* value(const ::dave_gazebo_ros_plugins::StratifiedCurrentDatabase_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcae79f9939f13721ULL;
  static const uint64_t static_value2 = 0xeab1911acfc60050ULL;
};

template<class ContainerAllocator>
struct DataType< ::dave_gazebo_ros_plugins::StratifiedCurrentDatabase_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dave_gazebo_ros_plugins/StratifiedCurrentDatabase";
  }

  static const char* value(const ::dave_gazebo_ros_plugins::StratifiedCurrentDatabase_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dave_gazebo_ros_plugins::StratifiedCurrentDatabase_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Publishes depths and velocities read from the csv database\n"
"\n"
"# Depths\n"
"float32[] depths\n"
"\n"
"# Velocities\n"
"geometry_msgs/Vector3[] velocities\n"
"\n"
"# Tide time (GMT)\n"
"int16[] timeGMTYear\n"
"int16[] timeGMTMonth\n"
"int16[] timeGMTDay\n"
"int16[] timeGMTHour\n"
"int16[] timeGMTMinute\n"
"\n"
"# Tide velocities\n"
"float32[] tideVelocities\n"
"\n"
"# Tide constituents\n"
"bool tideConstituents\n"
"float32 M2amp\n"
"float32 M2phase\n"
"float32 M2speed\n"
"float32 S2amp\n"
"float32 S2phase\n"
"float32 S2speed\n"
"float32 N2amp\n"
"float32 N2phase\n"
"float32 N2speed\n"
"\n"
"# Tide direction\n"
"float32 ebbDirection\n"
"float32 floodDirection\n"
"\n"
"# World start time (GMT)\n"
"int16 worldStartTimeYear\n"
"int16 worldStartTimeMonth\n"
"int16 worldStartTimeDay\n"
"int16 worldStartTimeHour\n"
"int16 worldStartTimeMinute\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::dave_gazebo_ros_plugins::StratifiedCurrentDatabase_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dave_gazebo_ros_plugins::StratifiedCurrentDatabase_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.depths);
      stream.next(m.velocities);
      stream.next(m.timeGMTYear);
      stream.next(m.timeGMTMonth);
      stream.next(m.timeGMTDay);
      stream.next(m.timeGMTHour);
      stream.next(m.timeGMTMinute);
      stream.next(m.tideVelocities);
      stream.next(m.tideConstituents);
      stream.next(m.M2amp);
      stream.next(m.M2phase);
      stream.next(m.M2speed);
      stream.next(m.S2amp);
      stream.next(m.S2phase);
      stream.next(m.S2speed);
      stream.next(m.N2amp);
      stream.next(m.N2phase);
      stream.next(m.N2speed);
      stream.next(m.ebbDirection);
      stream.next(m.floodDirection);
      stream.next(m.worldStartTimeYear);
      stream.next(m.worldStartTimeMonth);
      stream.next(m.worldStartTimeDay);
      stream.next(m.worldStartTimeHour);
      stream.next(m.worldStartTimeMinute);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct StratifiedCurrentDatabase_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dave_gazebo_ros_plugins::StratifiedCurrentDatabase_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dave_gazebo_ros_plugins::StratifiedCurrentDatabase_<ContainerAllocator>& v)
  {
    s << indent << "depths[]" << std::endl;
    for (size_t i = 0; i < v.depths.size(); ++i)
    {
      s << indent << "  depths[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.depths[i]);
    }
    s << indent << "velocities[]" << std::endl;
    for (size_t i = 0; i < v.velocities.size(); ++i)
    {
      s << indent << "  velocities[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "    ", v.velocities[i]);
    }
    s << indent << "timeGMTYear[]" << std::endl;
    for (size_t i = 0; i < v.timeGMTYear.size(); ++i)
    {
      s << indent << "  timeGMTYear[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.timeGMTYear[i]);
    }
    s << indent << "timeGMTMonth[]" << std::endl;
    for (size_t i = 0; i < v.timeGMTMonth.size(); ++i)
    {
      s << indent << "  timeGMTMonth[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.timeGMTMonth[i]);
    }
    s << indent << "timeGMTDay[]" << std::endl;
    for (size_t i = 0; i < v.timeGMTDay.size(); ++i)
    {
      s << indent << "  timeGMTDay[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.timeGMTDay[i]);
    }
    s << indent << "timeGMTHour[]" << std::endl;
    for (size_t i = 0; i < v.timeGMTHour.size(); ++i)
    {
      s << indent << "  timeGMTHour[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.timeGMTHour[i]);
    }
    s << indent << "timeGMTMinute[]" << std::endl;
    for (size_t i = 0; i < v.timeGMTMinute.size(); ++i)
    {
      s << indent << "  timeGMTMinute[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.timeGMTMinute[i]);
    }
    s << indent << "tideVelocities[]" << std::endl;
    for (size_t i = 0; i < v.tideVelocities.size(); ++i)
    {
      s << indent << "  tideVelocities[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.tideVelocities[i]);
    }
    s << indent << "tideConstituents: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.tideConstituents);
    s << indent << "M2amp: ";
    Printer<float>::stream(s, indent + "  ", v.M2amp);
    s << indent << "M2phase: ";
    Printer<float>::stream(s, indent + "  ", v.M2phase);
    s << indent << "M2speed: ";
    Printer<float>::stream(s, indent + "  ", v.M2speed);
    s << indent << "S2amp: ";
    Printer<float>::stream(s, indent + "  ", v.S2amp);
    s << indent << "S2phase: ";
    Printer<float>::stream(s, indent + "  ", v.S2phase);
    s << indent << "S2speed: ";
    Printer<float>::stream(s, indent + "  ", v.S2speed);
    s << indent << "N2amp: ";
    Printer<float>::stream(s, indent + "  ", v.N2amp);
    s << indent << "N2phase: ";
    Printer<float>::stream(s, indent + "  ", v.N2phase);
    s << indent << "N2speed: ";
    Printer<float>::stream(s, indent + "  ", v.N2speed);
    s << indent << "ebbDirection: ";
    Printer<float>::stream(s, indent + "  ", v.ebbDirection);
    s << indent << "floodDirection: ";
    Printer<float>::stream(s, indent + "  ", v.floodDirection);
    s << indent << "worldStartTimeYear: ";
    Printer<int16_t>::stream(s, indent + "  ", v.worldStartTimeYear);
    s << indent << "worldStartTimeMonth: ";
    Printer<int16_t>::stream(s, indent + "  ", v.worldStartTimeMonth);
    s << indent << "worldStartTimeDay: ";
    Printer<int16_t>::stream(s, indent + "  ", v.worldStartTimeDay);
    s << indent << "worldStartTimeHour: ";
    Printer<int16_t>::stream(s, indent + "  ", v.worldStartTimeHour);
    s << indent << "worldStartTimeMinute: ";
    Printer<int16_t>::stream(s, indent + "  ", v.worldStartTimeMinute);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DAVE_GAZEBO_ROS_PLUGINS_MESSAGE_STRATIFIEDCURRENTDATABASE_H
