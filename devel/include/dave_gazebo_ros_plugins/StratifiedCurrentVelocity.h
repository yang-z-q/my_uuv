// Generated by gencpp from file dave_gazebo_ros_plugins/StratifiedCurrentVelocity.msg
// DO NOT EDIT!


#ifndef DAVE_GAZEBO_ROS_PLUGINS_MESSAGE_STRATIFIEDCURRENTVELOCITY_H
#define DAVE_GAZEBO_ROS_PLUGINS_MESSAGE_STRATIFIEDCURRENTVELOCITY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Vector3.h>

namespace dave_gazebo_ros_plugins
{
template <class ContainerAllocator>
struct StratifiedCurrentVelocity_
{
  typedef StratifiedCurrentVelocity_<ContainerAllocator> Type;

  StratifiedCurrentVelocity_()
    : header()
    , depths()
    , velocities()  {
    }
  StratifiedCurrentVelocity_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , depths(_alloc)
    , velocities(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _depths_type;
  _depths_type depths;

   typedef std::vector< ::geometry_msgs::Vector3_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Vector3_<ContainerAllocator> >> _velocities_type;
  _velocities_type velocities;





  typedef boost::shared_ptr< ::dave_gazebo_ros_plugins::StratifiedCurrentVelocity_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dave_gazebo_ros_plugins::StratifiedCurrentVelocity_<ContainerAllocator> const> ConstPtr;

}; // struct StratifiedCurrentVelocity_

typedef ::dave_gazebo_ros_plugins::StratifiedCurrentVelocity_<std::allocator<void> > StratifiedCurrentVelocity;

typedef boost::shared_ptr< ::dave_gazebo_ros_plugins::StratifiedCurrentVelocity > StratifiedCurrentVelocityPtr;
typedef boost::shared_ptr< ::dave_gazebo_ros_plugins::StratifiedCurrentVelocity const> StratifiedCurrentVelocityConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dave_gazebo_ros_plugins::StratifiedCurrentVelocity_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dave_gazebo_ros_plugins::StratifiedCurrentVelocity_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dave_gazebo_ros_plugins::StratifiedCurrentVelocity_<ContainerAllocator1> & lhs, const ::dave_gazebo_ros_plugins::StratifiedCurrentVelocity_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.depths == rhs.depths &&
    lhs.velocities == rhs.velocities;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dave_gazebo_ros_plugins::StratifiedCurrentVelocity_<ContainerAllocator1> & lhs, const ::dave_gazebo_ros_plugins::StratifiedCurrentVelocity_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dave_gazebo_ros_plugins

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dave_gazebo_ros_plugins::StratifiedCurrentVelocity_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dave_gazebo_ros_plugins::StratifiedCurrentVelocity_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dave_gazebo_ros_plugins::StratifiedCurrentVelocity_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dave_gazebo_ros_plugins::StratifiedCurrentVelocity_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dave_gazebo_ros_plugins::StratifiedCurrentVelocity_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dave_gazebo_ros_plugins::StratifiedCurrentVelocity_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dave_gazebo_ros_plugins::StratifiedCurrentVelocity_<ContainerAllocator> >
{
  static const char* value()
  {
    return "422df86c624da3e1216f0ce5b905f9f3";
  }

  static const char* value(const ::dave_gazebo_ros_plugins::StratifiedCurrentVelocity_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x422df86c624da3e1ULL;
  static const uint64_t static_value2 = 0x216f0ce5b905f9f3ULL;
};

template<class ContainerAllocator>
struct DataType< ::dave_gazebo_ros_plugins::StratifiedCurrentVelocity_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dave_gazebo_ros_plugins/StratifiedCurrentVelocity";
  }

  static const char* value(const ::dave_gazebo_ros_plugins::StratifiedCurrentVelocity_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dave_gazebo_ros_plugins::StratifiedCurrentVelocity_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Publishes depths and velocities based on the database contents\n"
"\n"
"std_msgs/Header header\n"
"\n"
"# Depths\n"
"float32[] depths\n"
"\n"
"# Velocities\n"
"geometry_msgs/Vector3[] velocities\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::dave_gazebo_ros_plugins::StratifiedCurrentVelocity_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dave_gazebo_ros_plugins::StratifiedCurrentVelocity_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.depths);
      stream.next(m.velocities);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct StratifiedCurrentVelocity_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dave_gazebo_ros_plugins::StratifiedCurrentVelocity_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dave_gazebo_ros_plugins::StratifiedCurrentVelocity_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "depths[]" << std::endl;
    for (size_t i = 0; i < v.depths.size(); ++i)
    {
      s << indent << "  depths[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.depths[i]);
    }
    s << indent << "velocities[]" << std::endl;
    for (size_t i = 0; i < v.velocities.size(); ++i)
    {
      s << indent << "  velocities[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "    ", v.velocities[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DAVE_GAZEBO_ROS_PLUGINS_MESSAGE_STRATIFIEDCURRENTVELOCITY_H
