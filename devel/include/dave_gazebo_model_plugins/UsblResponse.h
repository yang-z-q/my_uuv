// Generated by gencpp from file dave_gazebo_model_plugins/UsblResponse.msg
// DO NOT EDIT!


#ifndef DAVE_GAZEBO_MODEL_PLUGINS_MESSAGE_USBLRESPONSE_H
#define DAVE_GAZEBO_MODEL_PLUGINS_MESSAGE_USBLRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dave_gazebo_model_plugins
{
template <class ContainerAllocator>
struct UsblResponse_
{
  typedef UsblResponse_<ContainerAllocator> Type;

  UsblResponse_()
    : transceverID(0)
    , responseID(0)
    , data()  {
    }
  UsblResponse_(const ContainerAllocator& _alloc)
    : transceverID(0)
    , responseID(0)
    , data(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _transceverID_type;
  _transceverID_type transceverID;

   typedef int32_t _responseID_type;
  _responseID_type responseID;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _data_type;
  _data_type data;





  typedef boost::shared_ptr< ::dave_gazebo_model_plugins::UsblResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dave_gazebo_model_plugins::UsblResponse_<ContainerAllocator> const> ConstPtr;

}; // struct UsblResponse_

typedef ::dave_gazebo_model_plugins::UsblResponse_<std::allocator<void> > UsblResponse;

typedef boost::shared_ptr< ::dave_gazebo_model_plugins::UsblResponse > UsblResponsePtr;
typedef boost::shared_ptr< ::dave_gazebo_model_plugins::UsblResponse const> UsblResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dave_gazebo_model_plugins::UsblResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dave_gazebo_model_plugins::UsblResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dave_gazebo_model_plugins::UsblResponse_<ContainerAllocator1> & lhs, const ::dave_gazebo_model_plugins::UsblResponse_<ContainerAllocator2> & rhs)
{
  return lhs.transceverID == rhs.transceverID &&
    lhs.responseID == rhs.responseID &&
    lhs.data == rhs.data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dave_gazebo_model_plugins::UsblResponse_<ContainerAllocator1> & lhs, const ::dave_gazebo_model_plugins::UsblResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dave_gazebo_model_plugins

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dave_gazebo_model_plugins::UsblResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dave_gazebo_model_plugins::UsblResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dave_gazebo_model_plugins::UsblResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dave_gazebo_model_plugins::UsblResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dave_gazebo_model_plugins::UsblResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dave_gazebo_model_plugins::UsblResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dave_gazebo_model_plugins::UsblResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7457a516da54e3edd1c04a2bda0888f2";
  }

  static const char* value(const ::dave_gazebo_model_plugins::UsblResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7457a516da54e3edULL;
  static const uint64_t static_value2 = 0xd1c04a2bda0888f2ULL;
};

template<class ContainerAllocator>
struct DataType< ::dave_gazebo_model_plugins::UsblResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dave_gazebo_model_plugins/UsblResponse";
  }

  static const char* value(const ::dave_gazebo_model_plugins::UsblResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dave_gazebo_model_plugins::UsblResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 transceverID\n"
"int32 responseID\n"
"string data\n"
;
  }

  static const char* value(const ::dave_gazebo_model_plugins::UsblResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dave_gazebo_model_plugins::UsblResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.transceverID);
      stream.next(m.responseID);
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct UsblResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dave_gazebo_model_plugins::UsblResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dave_gazebo_model_plugins::UsblResponse_<ContainerAllocator>& v)
  {
    s << indent << "transceverID: ";
    Printer<int32_t>::stream(s, indent + "  ", v.transceverID);
    s << indent << "responseID: ";
    Printer<int32_t>::stream(s, indent + "  ", v.responseID);
    s << indent << "data: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.data);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DAVE_GAZEBO_MODEL_PLUGINS_MESSAGE_USBLRESPONSE_H
