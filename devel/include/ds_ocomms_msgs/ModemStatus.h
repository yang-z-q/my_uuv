// Generated by gencpp from file ds_ocomms_msgs/ModemStatus.msg
// DO NOT EDIT!


#ifndef DS_OCOMMS_MSGS_MESSAGE_MODEMSTATUS_H
#define DS_OCOMMS_MSGS_MESSAGE_MODEMSTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <ds_core_msgs/DsHeader.h>

namespace ds_ocomms_msgs
{
template <class ContainerAllocator>
struct ModemStatus_
{
  typedef ModemStatus_<ContainerAllocator> Type;

  ModemStatus_()
    : header()
    , ds_header()
    , link_state(0)
    , timestamp_date()
    , timestamp_time()
    , tdma_mode(0)
    , carrier_rate(0.0)
    , tx_rate(0.0)
    , rx_rate(0.0)
    , fec_corrects(0.0)
    , fec_failure(0.0)
    , deadlink_timer(0.0)
    , checksum_failures(0.0)
    , tx_kbps(0.0)
    , rx_kbps(0.0)
    , corr_val(0.0)
    , hv_dac(0.0)
    , dc_adc(0.0)
    , ac_adc(0.0)
    , backscatter_adc(0.0)
    , gating_mode(0.0)
    , read_reg_2(0.0)
    , read_reg_3(0.0)
    , read_reg_4(0.0)
    , housing_humidity(0.0)
    , housing_temp(0.0)
    , env_err(0.0)
    , mode_indicator(0.0)
    , system_voltage(0.0)  {
    }
  ModemStatus_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , ds_header(_alloc)
    , link_state(0)
    , timestamp_date(_alloc)
    , timestamp_time(_alloc)
    , tdma_mode(0)
    , carrier_rate(0.0)
    , tx_rate(0.0)
    , rx_rate(0.0)
    , fec_corrects(0.0)
    , fec_failure(0.0)
    , deadlink_timer(0.0)
    , checksum_failures(0.0)
    , tx_kbps(0.0)
    , rx_kbps(0.0)
    , corr_val(0.0)
    , hv_dac(0.0)
    , dc_adc(0.0)
    , ac_adc(0.0)
    , backscatter_adc(0.0)
    , gating_mode(0.0)
    , read_reg_2(0.0)
    , read_reg_3(0.0)
    , read_reg_4(0.0)
    , housing_humidity(0.0)
    , housing_temp(0.0)
    , env_err(0.0)
    , mode_indicator(0.0)
    , system_voltage(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::ds_core_msgs::DsHeader_<ContainerAllocator>  _ds_header_type;
  _ds_header_type ds_header;

   typedef uint16_t _link_state_type;
  _link_state_type link_state;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _timestamp_date_type;
  _timestamp_date_type timestamp_date;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _timestamp_time_type;
  _timestamp_time_type timestamp_time;

   typedef uint16_t _tdma_mode_type;
  _tdma_mode_type tdma_mode;

   typedef float _carrier_rate_type;
  _carrier_rate_type carrier_rate;

   typedef float _tx_rate_type;
  _tx_rate_type tx_rate;

   typedef float _rx_rate_type;
  _rx_rate_type rx_rate;

   typedef float _fec_corrects_type;
  _fec_corrects_type fec_corrects;

   typedef float _fec_failure_type;
  _fec_failure_type fec_failure;

   typedef float _deadlink_timer_type;
  _deadlink_timer_type deadlink_timer;

   typedef float _checksum_failures_type;
  _checksum_failures_type checksum_failures;

   typedef float _tx_kbps_type;
  _tx_kbps_type tx_kbps;

   typedef float _rx_kbps_type;
  _rx_kbps_type rx_kbps;

   typedef float _corr_val_type;
  _corr_val_type corr_val;

   typedef float _hv_dac_type;
  _hv_dac_type hv_dac;

   typedef float _dc_adc_type;
  _dc_adc_type dc_adc;

   typedef float _ac_adc_type;
  _ac_adc_type ac_adc;

   typedef float _backscatter_adc_type;
  _backscatter_adc_type backscatter_adc;

   typedef float _gating_mode_type;
  _gating_mode_type gating_mode;

   typedef float _read_reg_2_type;
  _read_reg_2_type read_reg_2;

   typedef float _read_reg_3_type;
  _read_reg_3_type read_reg_3;

   typedef float _read_reg_4_type;
  _read_reg_4_type read_reg_4;

   typedef float _housing_humidity_type;
  _housing_humidity_type housing_humidity;

   typedef float _housing_temp_type;
  _housing_temp_type housing_temp;

   typedef float _env_err_type;
  _env_err_type env_err;

   typedef float _mode_indicator_type;
  _mode_indicator_type mode_indicator;

   typedef float _system_voltage_type;
  _system_voltage_type system_voltage;





  typedef boost::shared_ptr< ::ds_ocomms_msgs::ModemStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ds_ocomms_msgs::ModemStatus_<ContainerAllocator> const> ConstPtr;

}; // struct ModemStatus_

typedef ::ds_ocomms_msgs::ModemStatus_<std::allocator<void> > ModemStatus;

typedef boost::shared_ptr< ::ds_ocomms_msgs::ModemStatus > ModemStatusPtr;
typedef boost::shared_ptr< ::ds_ocomms_msgs::ModemStatus const> ModemStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ds_ocomms_msgs::ModemStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ds_ocomms_msgs::ModemStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ds_ocomms_msgs::ModemStatus_<ContainerAllocator1> & lhs, const ::ds_ocomms_msgs::ModemStatus_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.ds_header == rhs.ds_header &&
    lhs.link_state == rhs.link_state &&
    lhs.timestamp_date == rhs.timestamp_date &&
    lhs.timestamp_time == rhs.timestamp_time &&
    lhs.tdma_mode == rhs.tdma_mode &&
    lhs.carrier_rate == rhs.carrier_rate &&
    lhs.tx_rate == rhs.tx_rate &&
    lhs.rx_rate == rhs.rx_rate &&
    lhs.fec_corrects == rhs.fec_corrects &&
    lhs.fec_failure == rhs.fec_failure &&
    lhs.deadlink_timer == rhs.deadlink_timer &&
    lhs.checksum_failures == rhs.checksum_failures &&
    lhs.tx_kbps == rhs.tx_kbps &&
    lhs.rx_kbps == rhs.rx_kbps &&
    lhs.corr_val == rhs.corr_val &&
    lhs.hv_dac == rhs.hv_dac &&
    lhs.dc_adc == rhs.dc_adc &&
    lhs.ac_adc == rhs.ac_adc &&
    lhs.backscatter_adc == rhs.backscatter_adc &&
    lhs.gating_mode == rhs.gating_mode &&
    lhs.read_reg_2 == rhs.read_reg_2 &&
    lhs.read_reg_3 == rhs.read_reg_3 &&
    lhs.read_reg_4 == rhs.read_reg_4 &&
    lhs.housing_humidity == rhs.housing_humidity &&
    lhs.housing_temp == rhs.housing_temp &&
    lhs.env_err == rhs.env_err &&
    lhs.mode_indicator == rhs.mode_indicator &&
    lhs.system_voltage == rhs.system_voltage;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ds_ocomms_msgs::ModemStatus_<ContainerAllocator1> & lhs, const ::ds_ocomms_msgs::ModemStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ds_ocomms_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ds_ocomms_msgs::ModemStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ds_ocomms_msgs::ModemStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_ocomms_msgs::ModemStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_ocomms_msgs::ModemStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_ocomms_msgs::ModemStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_ocomms_msgs::ModemStatus_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ds_ocomms_msgs::ModemStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9c43bac3c7a1d1c07a2a3980312f8cea";
  }

  static const char* value(const ::ds_ocomms_msgs::ModemStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9c43bac3c7a1d1c0ULL;
  static const uint64_t static_value2 = 0x7a2a3980312f8ceaULL;
};

template<class ContainerAllocator>
struct DataType< ::ds_ocomms_msgs::ModemStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ds_ocomms_msgs/ModemStatus";
  }

  static const char* value(const ::ds_ocomms_msgs::ModemStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ds_ocomms_msgs::ModemStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# The standard 2-part DsHeader block\n"
"# This allows both a standard ROS header and DS-specific header blocks\n"
"# See HEADERS.md in ds_core_msgs for details\n"
"std_msgs/Header header\n"
"ds_core_msgs/DsHeader ds_header\n"
"\n"
"uint16 link_state\n"
"string timestamp_date\n"
"string timestamp_time\n"
"uint16 tdma_mode\n"
"float32 carrier_rate\n"
"float32 tx_rate\n"
"float32 rx_rate\n"
"float32 fec_corrects\n"
"float32 fec_failure\n"
"float32 deadlink_timer\n"
"float32 checksum_failures\n"
"float32 tx_kbps\n"
"float32 rx_kbps \n"
"float32 corr_val \n"
"float32 hv_dac \n"
"float32 dc_adc \n"
"float32 ac_adc \n"
"float32 backscatter_adc \n"
"float32 gating_mode\n"
"float32 read_reg_2\n"
"float32 read_reg_3\n"
"float32 read_reg_4\n"
"float32 housing_humidity\n"
"float32 housing_temp\n"
"float32 env_err\n"
"float32 mode_indicator\n"
"float32 system_voltage\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: ds_core_msgs/DsHeader\n"
"# This is half our standard header for ds_msgs; see\n"
"# HEADERS.md for details\n"
"\n"
"# This header should ALWAYS be paired with a std_msgs/Header\n"
"# and should ALWAYS reference HEADERS.md.  If you're looking at this\n"
"# file to add headers to a type, you probably want to copy/paste\n"
"# the following block:\n"
"#\n"
"#     # The standard 2-part DsHeader block\n"
"#     # This allows both a standard ROS header and DS-specific header blocks\n"
"#     # See HEADERS.md in ds_core_msgs for details\n"
"#     std_msgs/Header header\n"
"#     ds_core_msgs/DsHeader ds_header\n"
"#\n"
"\n"
"# Time data was received or sent out (i/o time)\n"
"time io_time\n"
"\n"
"# Sensor source UUID\n"
"uint8[16] source_uuid\n"
"\n"
;
  }

  static const char* value(const ::ds_ocomms_msgs::ModemStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ds_ocomms_msgs::ModemStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.ds_header);
      stream.next(m.link_state);
      stream.next(m.timestamp_date);
      stream.next(m.timestamp_time);
      stream.next(m.tdma_mode);
      stream.next(m.carrier_rate);
      stream.next(m.tx_rate);
      stream.next(m.rx_rate);
      stream.next(m.fec_corrects);
      stream.next(m.fec_failure);
      stream.next(m.deadlink_timer);
      stream.next(m.checksum_failures);
      stream.next(m.tx_kbps);
      stream.next(m.rx_kbps);
      stream.next(m.corr_val);
      stream.next(m.hv_dac);
      stream.next(m.dc_adc);
      stream.next(m.ac_adc);
      stream.next(m.backscatter_adc);
      stream.next(m.gating_mode);
      stream.next(m.read_reg_2);
      stream.next(m.read_reg_3);
      stream.next(m.read_reg_4);
      stream.next(m.housing_humidity);
      stream.next(m.housing_temp);
      stream.next(m.env_err);
      stream.next(m.mode_indicator);
      stream.next(m.system_voltage);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ModemStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ds_ocomms_msgs::ModemStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ds_ocomms_msgs::ModemStatus_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "ds_header: ";
    s << std::endl;
    Printer< ::ds_core_msgs::DsHeader_<ContainerAllocator> >::stream(s, indent + "  ", v.ds_header);
    s << indent << "link_state: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.link_state);
    s << indent << "timestamp_date: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.timestamp_date);
    s << indent << "timestamp_time: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.timestamp_time);
    s << indent << "tdma_mode: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.tdma_mode);
    s << indent << "carrier_rate: ";
    Printer<float>::stream(s, indent + "  ", v.carrier_rate);
    s << indent << "tx_rate: ";
    Printer<float>::stream(s, indent + "  ", v.tx_rate);
    s << indent << "rx_rate: ";
    Printer<float>::stream(s, indent + "  ", v.rx_rate);
    s << indent << "fec_corrects: ";
    Printer<float>::stream(s, indent + "  ", v.fec_corrects);
    s << indent << "fec_failure: ";
    Printer<float>::stream(s, indent + "  ", v.fec_failure);
    s << indent << "deadlink_timer: ";
    Printer<float>::stream(s, indent + "  ", v.deadlink_timer);
    s << indent << "checksum_failures: ";
    Printer<float>::stream(s, indent + "  ", v.checksum_failures);
    s << indent << "tx_kbps: ";
    Printer<float>::stream(s, indent + "  ", v.tx_kbps);
    s << indent << "rx_kbps: ";
    Printer<float>::stream(s, indent + "  ", v.rx_kbps);
    s << indent << "corr_val: ";
    Printer<float>::stream(s, indent + "  ", v.corr_val);
    s << indent << "hv_dac: ";
    Printer<float>::stream(s, indent + "  ", v.hv_dac);
    s << indent << "dc_adc: ";
    Printer<float>::stream(s, indent + "  ", v.dc_adc);
    s << indent << "ac_adc: ";
    Printer<float>::stream(s, indent + "  ", v.ac_adc);
    s << indent << "backscatter_adc: ";
    Printer<float>::stream(s, indent + "  ", v.backscatter_adc);
    s << indent << "gating_mode: ";
    Printer<float>::stream(s, indent + "  ", v.gating_mode);
    s << indent << "read_reg_2: ";
    Printer<float>::stream(s, indent + "  ", v.read_reg_2);
    s << indent << "read_reg_3: ";
    Printer<float>::stream(s, indent + "  ", v.read_reg_3);
    s << indent << "read_reg_4: ";
    Printer<float>::stream(s, indent + "  ", v.read_reg_4);
    s << indent << "housing_humidity: ";
    Printer<float>::stream(s, indent + "  ", v.housing_humidity);
    s << indent << "housing_temp: ";
    Printer<float>::stream(s, indent + "  ", v.housing_temp);
    s << indent << "env_err: ";
    Printer<float>::stream(s, indent + "  ", v.env_err);
    s << indent << "mode_indicator: ";
    Printer<float>::stream(s, indent + "  ", v.mode_indicator);
    s << indent << "system_voltage: ";
    Printer<float>::stream(s, indent + "  ", v.system_voltage);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DS_OCOMMS_MSGS_MESSAGE_MODEMSTATUS_H
