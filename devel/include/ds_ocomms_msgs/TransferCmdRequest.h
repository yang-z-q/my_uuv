// Generated by gencpp from file ds_ocomms_msgs/TransferCmdRequest.msg
// DO NOT EDIT!


#ifndef DS_OCOMMS_MSGS_MESSAGE_TRANSFERCMDREQUEST_H
#define DS_OCOMMS_MSGS_MESSAGE_TRANSFERCMDREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ds_ocomms_msgs
{
template <class ContainerAllocator>
struct TransferCmdRequest_
{
  typedef TransferCmdRequest_<ContainerAllocator> Type;

  TransferCmdRequest_()
    : action(0)  {
    }
  TransferCmdRequest_(const ContainerAllocator& _alloc)
    : action(0)  {
  (void)_alloc;
    }



   typedef uint8_t _action_type;
  _action_type action;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(BEGIN_FILE_TRANSFER)
  #undef BEGIN_FILE_TRANSFER
#endif

  enum {
    BEGIN_FILE_TRANSFER = 1u,
  };


  typedef boost::shared_ptr< ::ds_ocomms_msgs::TransferCmdRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ds_ocomms_msgs::TransferCmdRequest_<ContainerAllocator> const> ConstPtr;

}; // struct TransferCmdRequest_

typedef ::ds_ocomms_msgs::TransferCmdRequest_<std::allocator<void> > TransferCmdRequest;

typedef boost::shared_ptr< ::ds_ocomms_msgs::TransferCmdRequest > TransferCmdRequestPtr;
typedef boost::shared_ptr< ::ds_ocomms_msgs::TransferCmdRequest const> TransferCmdRequestConstPtr;

// constants requiring out of line definition

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ds_ocomms_msgs::TransferCmdRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ds_ocomms_msgs::TransferCmdRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ds_ocomms_msgs::TransferCmdRequest_<ContainerAllocator1> & lhs, const ::ds_ocomms_msgs::TransferCmdRequest_<ContainerAllocator2> & rhs)
{
  return lhs.action == rhs.action;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ds_ocomms_msgs::TransferCmdRequest_<ContainerAllocator1> & lhs, const ::ds_ocomms_msgs::TransferCmdRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ds_ocomms_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ds_ocomms_msgs::TransferCmdRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ds_ocomms_msgs::TransferCmdRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_ocomms_msgs::TransferCmdRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_ocomms_msgs::TransferCmdRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_ocomms_msgs::TransferCmdRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_ocomms_msgs::TransferCmdRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ds_ocomms_msgs::TransferCmdRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8139f356bef81a11603686899916a9d1";
  }

  static const char* value(const ::ds_ocomms_msgs::TransferCmdRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8139f356bef81a11ULL;
  static const uint64_t static_value2 = 0x603686899916a9d1ULL;
};

template<class ContainerAllocator>
struct DataType< ::ds_ocomms_msgs::TransferCmdRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ds_ocomms_msgs/TransferCmdRequest";
  }

  static const char* value(const ::ds_ocomms_msgs::TransferCmdRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ds_ocomms_msgs::TransferCmdRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 BEGIN_FILE_TRANSFER = 1\n"
"\n"
"uint8 action\n"
;
  }

  static const char* value(const ::ds_ocomms_msgs::TransferCmdRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ds_ocomms_msgs::TransferCmdRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.action);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TransferCmdRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ds_ocomms_msgs::TransferCmdRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ds_ocomms_msgs::TransferCmdRequest_<ContainerAllocator>& v)
  {
    s << indent << "action: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.action);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DS_OCOMMS_MSGS_MESSAGE_TRANSFERCMDREQUEST_H
