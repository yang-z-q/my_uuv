// Generated by gencpp from file ds_core_msgs/IoSMcommandRequest.msg
// DO NOT EDIT!


#ifndef DS_CORE_MSGS_MESSAGE_IOSMCOMMANDREQUEST_H
#define DS_CORE_MSGS_MESSAGE_IOSMCOMMANDREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ds_core_msgs/IoCommand.h>

namespace ds_core_msgs
{
template <class ContainerAllocator>
struct IoSMcommandRequest_
{
  typedef IoSMcommandRequest_<ContainerAllocator> Type;

  IoSMcommandRequest_()
    : iosm_command(0)
    , commands()  {
    }
  IoSMcommandRequest_(const ContainerAllocator& _alloc)
    : iosm_command(0)
    , commands(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _iosm_command_type;
  _iosm_command_type iosm_command;

   typedef std::vector< ::ds_core_msgs::IoCommand_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::ds_core_msgs::IoCommand_<ContainerAllocator> >> _commands_type;
  _commands_type commands;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(IOSM_ADD_REGULAR)
  #undef IOSM_ADD_REGULAR
#endif
#if defined(_WIN32) && defined(IOSM_UPDATE_REGULAR)
  #undef IOSM_UPDATE_REGULAR
#endif
#if defined(_WIN32) && defined(IOSM_REMOVE_REGULAR)
  #undef IOSM_REMOVE_REGULAR
#endif
#if defined(_WIN32) && defined(IOSM_ADD_PREEMPT)
  #undef IOSM_ADD_PREEMPT
#endif
#if defined(_WIN32) && defined(IOSM_ADD_SHUTDOWN)
  #undef IOSM_ADD_SHUTDOWN
#endif
#if defined(_WIN32) && defined(IOSM_UPDATE_SHUTDOWN)
  #undef IOSM_UPDATE_SHUTDOWN
#endif
#if defined(_WIN32) && defined(IOSM_REMOVE_SHUTDOWN)
  #undef IOSM_REMOVE_SHUTDOWN
#endif

  enum {
    IOSM_ADD_REGULAR = 1u,
    IOSM_UPDATE_REGULAR = 2u,
    IOSM_REMOVE_REGULAR = 3u,
    IOSM_ADD_PREEMPT = 4u,
    IOSM_ADD_SHUTDOWN = 5u,
    IOSM_UPDATE_SHUTDOWN = 6u,
    IOSM_REMOVE_SHUTDOWN = 7u,
  };


  typedef boost::shared_ptr< ::ds_core_msgs::IoSMcommandRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ds_core_msgs::IoSMcommandRequest_<ContainerAllocator> const> ConstPtr;

}; // struct IoSMcommandRequest_

typedef ::ds_core_msgs::IoSMcommandRequest_<std::allocator<void> > IoSMcommandRequest;

typedef boost::shared_ptr< ::ds_core_msgs::IoSMcommandRequest > IoSMcommandRequestPtr;
typedef boost::shared_ptr< ::ds_core_msgs::IoSMcommandRequest const> IoSMcommandRequestConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ds_core_msgs::IoSMcommandRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ds_core_msgs::IoSMcommandRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ds_core_msgs::IoSMcommandRequest_<ContainerAllocator1> & lhs, const ::ds_core_msgs::IoSMcommandRequest_<ContainerAllocator2> & rhs)
{
  return lhs.iosm_command == rhs.iosm_command &&
    lhs.commands == rhs.commands;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ds_core_msgs::IoSMcommandRequest_<ContainerAllocator1> & lhs, const ::ds_core_msgs::IoSMcommandRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ds_core_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ds_core_msgs::IoSMcommandRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ds_core_msgs::IoSMcommandRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_core_msgs::IoSMcommandRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_core_msgs::IoSMcommandRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_core_msgs::IoSMcommandRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_core_msgs::IoSMcommandRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ds_core_msgs::IoSMcommandRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "68d244fc7823e08cce16d4bc446e7c70";
  }

  static const char* value(const ::ds_core_msgs::IoSMcommandRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x68d244fc7823e08cULL;
  static const uint64_t static_value2 = 0xce16d4bc446e7c70ULL;
};

template<class ContainerAllocator>
struct DataType< ::ds_core_msgs::IoSMcommandRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ds_core_msgs/IoSMcommandRequest";
  }

  static const char* value(const ::ds_core_msgs::IoSMcommandRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ds_core_msgs::IoSMcommandRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Command constants\n"
"\n"
"uint8 IOSM_ADD_REGULAR     = 1\n"
"uint8 IOSM_UPDATE_REGULAR  = 2\n"
"uint8 IOSM_REMOVE_REGULAR  = 3\n"
"\n"
"uint8 IOSM_ADD_PREEMPT     = 4\n"
"\n"
"uint8 IOSM_ADD_SHUTDOWN    = 5\n"
"uint8 IOSM_UPDATE_SHUTDOWN = 6\n"
"uint8 IOSM_REMOVE_SHUTDOWN = 7\n"
"\n"
"# MUST be one of the above commands\n"
"uint8 iosm_command\n"
"\n"
"# All of these commands are processed in sequence using the above\n"
"# command code.  The command sequence is guaranteed to be added to\n"
"# the relevant queue as one unit.  The return values are\n"
"# given in the return vector\n"
"IoCommand[] commands\n"
"\n"
"# To specify the ID\n"
"\n"
"\n"
"================================================================================\n"
"MSG: ds_core_msgs/IoCommand\n"
"# The command's state machine ID.  Managed by the state machine\n"
"uint64 id\n"
"\n"
"# The command to send\n"
"string command\n"
"\n"
"# Send the received buffer out on matching\n"
"bool emitOnMatch\n"
"\n"
"# Send a warning on timeout\n"
"bool timeoutWarn\n"
"\n"
"# Force the next message to come from the same queue.\n"
"# Useful when you need to run two commands (e.g., address + command)\n"
"bool forceNext\n"
"\n"
"# Send an error message on state transition guard condition check\n"
"bool stateTransErr\n"
"\n"
"# Delay before sending the command, in milliseconds\n"
"float32 delayBefore_ms\n"
"\n"
"# Delay After receiving a reply, in milliseconds\n"
"float32 delayAfter_ms\n"
"\n"
"# The maximum amount of time (in milliseconds) to wait for\n"
"# a reply.  A timeout <= 0 means \"wait forever\"\n"
"float32 timeout_ms\n"
"\n"
;
  }

  static const char* value(const ::ds_core_msgs::IoSMcommandRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ds_core_msgs::IoSMcommandRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.iosm_command);
      stream.next(m.commands);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct IoSMcommandRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ds_core_msgs::IoSMcommandRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ds_core_msgs::IoSMcommandRequest_<ContainerAllocator>& v)
  {
    s << indent << "iosm_command: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.iosm_command);
    s << indent << "commands[]" << std::endl;
    for (size_t i = 0; i < v.commands.size(); ++i)
    {
      s << indent << "  commands[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ds_core_msgs::IoCommand_<ContainerAllocator> >::stream(s, indent + "    ", v.commands[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DS_CORE_MSGS_MESSAGE_IOSMCOMMANDREQUEST_H
