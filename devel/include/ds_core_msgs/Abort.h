// Generated by gencpp from file ds_core_msgs/Abort.msg
// DO NOT EDIT!


#ifndef DS_CORE_MSGS_MESSAGE_ABORT_H
#define DS_CORE_MSGS_MESSAGE_ABORT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ds_core_msgs
{
template <class ContainerAllocator>
struct Abort_
{
  typedef Abort_<ContainerAllocator> Type;

  Abort_()
    : stamp()
    , abort(false)
    , enable(false)
    , ttl(0)  {
    }
  Abort_(const ContainerAllocator& _alloc)
    : stamp()
    , abort(false)
    , enable(false)
    , ttl(0)  {
  (void)_alloc;
    }



   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef uint8_t _abort_type;
  _abort_type abort;

   typedef uint8_t _enable_type;
  _enable_type enable;

   typedef int32_t _ttl_type;
  _ttl_type ttl;





  typedef boost::shared_ptr< ::ds_core_msgs::Abort_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ds_core_msgs::Abort_<ContainerAllocator> const> ConstPtr;

}; // struct Abort_

typedef ::ds_core_msgs::Abort_<std::allocator<void> > Abort;

typedef boost::shared_ptr< ::ds_core_msgs::Abort > AbortPtr;
typedef boost::shared_ptr< ::ds_core_msgs::Abort const> AbortConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ds_core_msgs::Abort_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ds_core_msgs::Abort_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ds_core_msgs::Abort_<ContainerAllocator1> & lhs, const ::ds_core_msgs::Abort_<ContainerAllocator2> & rhs)
{
  return lhs.stamp == rhs.stamp &&
    lhs.abort == rhs.abort &&
    lhs.enable == rhs.enable &&
    lhs.ttl == rhs.ttl;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ds_core_msgs::Abort_<ContainerAllocator1> & lhs, const ::ds_core_msgs::Abort_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ds_core_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ds_core_msgs::Abort_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ds_core_msgs::Abort_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_core_msgs::Abort_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_core_msgs::Abort_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_core_msgs::Abort_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_core_msgs::Abort_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ds_core_msgs::Abort_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d205a64f02aae3fdf27dc1e0077e42b1";
  }

  static const char* value(const ::ds_core_msgs::Abort_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd205a64f02aae3fdULL;
  static const uint64_t static_value2 = 0xf27dc1e0077e42b1ULL;
};

template<class ContainerAllocator>
struct DataType< ::ds_core_msgs::Abort_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ds_core_msgs/Abort";
  }

  static const char* value(const ::ds_core_msgs::Abort_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ds_core_msgs::Abort_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Time of this message; good for logging\n"
"time stamp\n"
"\n"
"# Signal an abort\n"
"bool abort\n"
"\n"
"# Arm thrusters / servos\n"
"bool enable\n"
"\n"
"# Message is valid for ttl seconds\n"
"# after its received\n"
"# < 0 for \"indefinitely\"\n"
"int32 ttl\n"
;
  }

  static const char* value(const ::ds_core_msgs::Abort_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ds_core_msgs::Abort_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamp);
      stream.next(m.abort);
      stream.next(m.enable);
      stream.next(m.ttl);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Abort_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ds_core_msgs::Abort_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ds_core_msgs::Abort_<ContainerAllocator>& v)
  {
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "abort: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.abort);
    s << indent << "enable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.enable);
    s << indent << "ttl: ";
    Printer<int32_t>::stream(s, indent + "  ", v.ttl);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DS_CORE_MSGS_MESSAGE_ABORT_H
