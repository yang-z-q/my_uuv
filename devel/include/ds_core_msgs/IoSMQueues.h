// Generated by gencpp from file ds_core_msgs/IoSMQueues.msg
// DO NOT EDIT!


#ifndef DS_CORE_MSGS_MESSAGE_IOSMQUEUES_H
#define DS_CORE_MSGS_MESSAGE_IOSMQUEUES_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ds_core_msgs/IoCommand.h>
#include <ds_core_msgs/IoCommand.h>
#include <ds_core_msgs/IoCommand.h>

namespace ds_core_msgs
{
template <class ContainerAllocator>
struct IoSMQueues_
{
  typedef IoSMQueues_<ContainerAllocator> Type;

  IoSMQueues_()
    : regular()
    , preempt()
    , shutdown()  {
    }
  IoSMQueues_(const ContainerAllocator& _alloc)
    : regular(_alloc)
    , preempt(_alloc)
    , shutdown(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::ds_core_msgs::IoCommand_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::ds_core_msgs::IoCommand_<ContainerAllocator> >> _regular_type;
  _regular_type regular;

   typedef std::vector< ::ds_core_msgs::IoCommand_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::ds_core_msgs::IoCommand_<ContainerAllocator> >> _preempt_type;
  _preempt_type preempt;

   typedef std::vector< ::ds_core_msgs::IoCommand_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::ds_core_msgs::IoCommand_<ContainerAllocator> >> _shutdown_type;
  _shutdown_type shutdown;





  typedef boost::shared_ptr< ::ds_core_msgs::IoSMQueues_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ds_core_msgs::IoSMQueues_<ContainerAllocator> const> ConstPtr;

}; // struct IoSMQueues_

typedef ::ds_core_msgs::IoSMQueues_<std::allocator<void> > IoSMQueues;

typedef boost::shared_ptr< ::ds_core_msgs::IoSMQueues > IoSMQueuesPtr;
typedef boost::shared_ptr< ::ds_core_msgs::IoSMQueues const> IoSMQueuesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ds_core_msgs::IoSMQueues_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ds_core_msgs::IoSMQueues_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ds_core_msgs::IoSMQueues_<ContainerAllocator1> & lhs, const ::ds_core_msgs::IoSMQueues_<ContainerAllocator2> & rhs)
{
  return lhs.regular == rhs.regular &&
    lhs.preempt == rhs.preempt &&
    lhs.shutdown == rhs.shutdown;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ds_core_msgs::IoSMQueues_<ContainerAllocator1> & lhs, const ::ds_core_msgs::IoSMQueues_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ds_core_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ds_core_msgs::IoSMQueues_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ds_core_msgs::IoSMQueues_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_core_msgs::IoSMQueues_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_core_msgs::IoSMQueues_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_core_msgs::IoSMQueues_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_core_msgs::IoSMQueues_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ds_core_msgs::IoSMQueues_<ContainerAllocator> >
{
  static const char* value()
  {
    return "63d383c99cba2db837ac5c602f2f1365";
  }

  static const char* value(const ::ds_core_msgs::IoSMQueues_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x63d383c99cba2db8ULL;
  static const uint64_t static_value2 = 0x37ac5c602f2f1365ULL;
};

template<class ContainerAllocator>
struct DataType< ::ds_core_msgs::IoSMQueues_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ds_core_msgs/IoSMQueues";
  }

  static const char* value(const ::ds_core_msgs::IoSMQueues_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ds_core_msgs::IoSMQueues_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# The regular command queue\n"
"IoCommand[] regular\n"
"\n"
"# The preempt command queue\n"
"IoCommand[] preempt\n"
"\n"
"# The shutdown command queue that gets run\n"
"# when the node is shutting down\n"
"IoCommand[] shutdown\n"
"================================================================================\n"
"MSG: ds_core_msgs/IoCommand\n"
"# The command's state machine ID.  Managed by the state machine\n"
"uint64 id\n"
"\n"
"# The command to send\n"
"string command\n"
"\n"
"# Send the received buffer out on matching\n"
"bool emitOnMatch\n"
"\n"
"# Send a warning on timeout\n"
"bool timeoutWarn\n"
"\n"
"# Force the next message to come from the same queue.\n"
"# Useful when you need to run two commands (e.g., address + command)\n"
"bool forceNext\n"
"\n"
"# Send an error message on state transition guard condition check\n"
"bool stateTransErr\n"
"\n"
"# Delay before sending the command, in milliseconds\n"
"float32 delayBefore_ms\n"
"\n"
"# Delay After receiving a reply, in milliseconds\n"
"float32 delayAfter_ms\n"
"\n"
"# The maximum amount of time (in milliseconds) to wait for\n"
"# a reply.  A timeout <= 0 means \"wait forever\"\n"
"float32 timeout_ms\n"
"\n"
;
  }

  static const char* value(const ::ds_core_msgs::IoSMQueues_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ds_core_msgs::IoSMQueues_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.regular);
      stream.next(m.preempt);
      stream.next(m.shutdown);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct IoSMQueues_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ds_core_msgs::IoSMQueues_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ds_core_msgs::IoSMQueues_<ContainerAllocator>& v)
  {
    s << indent << "regular[]" << std::endl;
    for (size_t i = 0; i < v.regular.size(); ++i)
    {
      s << indent << "  regular[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ds_core_msgs::IoCommand_<ContainerAllocator> >::stream(s, indent + "    ", v.regular[i]);
    }
    s << indent << "preempt[]" << std::endl;
    for (size_t i = 0; i < v.preempt.size(); ++i)
    {
      s << indent << "  preempt[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ds_core_msgs::IoCommand_<ContainerAllocator> >::stream(s, indent + "    ", v.preempt[i]);
    }
    s << indent << "shutdown[]" << std::endl;
    for (size_t i = 0; i < v.shutdown.size(); ++i)
    {
      s << indent << "  shutdown[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ds_core_msgs::IoCommand_<ContainerAllocator> >::stream(s, indent + "    ", v.shutdown[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DS_CORE_MSGS_MESSAGE_IOSMQUEUES_H
