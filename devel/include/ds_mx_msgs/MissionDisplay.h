// Generated by gencpp from file ds_mx_msgs/MissionDisplay.msg
// DO NOT EDIT!


#ifndef DS_MX_MSGS_MESSAGE_MISSIONDISPLAY_H
#define DS_MX_MSGS_MESSAGE_MISSIONDISPLAY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ds_mx_msgs/MissionElementDisplay.h>

namespace ds_mx_msgs
{
template <class ContainerAllocator>
struct MissionDisplay_
{
  typedef MissionDisplay_<ContainerAllocator> Type;

  MissionDisplay_()
    : elements()  {
    }
  MissionDisplay_(const ContainerAllocator& _alloc)
    : elements(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::ds_mx_msgs::MissionElementDisplay_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::ds_mx_msgs::MissionElementDisplay_<ContainerAllocator> >> _elements_type;
  _elements_type elements;





  typedef boost::shared_ptr< ::ds_mx_msgs::MissionDisplay_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ds_mx_msgs::MissionDisplay_<ContainerAllocator> const> ConstPtr;

}; // struct MissionDisplay_

typedef ::ds_mx_msgs::MissionDisplay_<std::allocator<void> > MissionDisplay;

typedef boost::shared_ptr< ::ds_mx_msgs::MissionDisplay > MissionDisplayPtr;
typedef boost::shared_ptr< ::ds_mx_msgs::MissionDisplay const> MissionDisplayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ds_mx_msgs::MissionDisplay_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ds_mx_msgs::MissionDisplay_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ds_mx_msgs::MissionDisplay_<ContainerAllocator1> & lhs, const ::ds_mx_msgs::MissionDisplay_<ContainerAllocator2> & rhs)
{
  return lhs.elements == rhs.elements;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ds_mx_msgs::MissionDisplay_<ContainerAllocator1> & lhs, const ::ds_mx_msgs::MissionDisplay_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ds_mx_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ds_mx_msgs::MissionDisplay_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ds_mx_msgs::MissionDisplay_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_mx_msgs::MissionDisplay_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_mx_msgs::MissionDisplay_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_mx_msgs::MissionDisplay_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_mx_msgs::MissionDisplay_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ds_mx_msgs::MissionDisplay_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8519cea0fd55c3a90b83ceb74bd96ef3";
  }

  static const char* value(const ::ds_mx_msgs::MissionDisplay_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8519cea0fd55c3a9ULL;
  static const uint64_t static_value2 = 0x0b83ceb74bd96ef3ULL;
};

template<class ContainerAllocator>
struct DataType< ::ds_mx_msgs::MissionDisplay_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ds_mx_msgs/MissionDisplay";
  }

  static const char* value(const ::ds_mx_msgs::MissionDisplay_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ds_mx_msgs::MissionDisplay_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"# This message is simply a list of things to draw.  Individual tasks can draw\n"
"# as many or as few elements as they like.\n"
"MissionElementDisplay[] elements\n"
"================================================================================\n"
"MSG: ds_mx_msgs/MissionElementDisplay\n"
"# This includes instructions on how to draw a single mission element\n"
"string role\n"
"string label         # An annotation label to add; generally blank\n"
"string wellknowntext # Well-known text, ALWAYS in lat/lon;\n"
"                     # see https://en.wikipedia.org/wiki/Well-known_text_representation_of_geometry\n"
"                     # Currently, only Point, LineString, and Polygon are supported\n"
"uint8[16] task_uuid\n"
"\n"
"# Numbers are assigned somewhat randomly\n"
"string ROLE_POINT_LAUNCH=\"launch\"\n"
"string ROLE_IDLE=\"idle\"\n"
"string ROLE_JOYSTICK=\"joystick\"\n"
"\n"
"string ROLE_TRACKLINE=\"trackline\"\n"
"string ROLE_TRACKLINE_CONNECTING=\"connecting_trackline\"\n"
"string ROLE_TRACKLINE_COMPLETED=\"completed_trackline\"\n"
"string ROLE_TRACKLINE_CURRENT=\"current_trackline\"\n"
"\n"
"string ROLE_OPERATING_AREA=\"operating_area\"\n"
"\n"
"string ROLE_GEOFENCE=\"geofence\"\n"
"string ROLE_LOITER=\"loiter\"\n"
"string ROLE_MANUAL=\"manual\"\n"
;
  }

  static const char* value(const ::ds_mx_msgs::MissionDisplay_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ds_mx_msgs::MissionDisplay_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.elements);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MissionDisplay_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ds_mx_msgs::MissionDisplay_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ds_mx_msgs::MissionDisplay_<ContainerAllocator>& v)
  {
    s << indent << "elements[]" << std::endl;
    for (size_t i = 0; i < v.elements.size(); ++i)
    {
      s << indent << "  elements[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ds_mx_msgs::MissionElementDisplay_<ContainerAllocator> >::stream(s, indent + "    ", v.elements[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DS_MX_MSGS_MESSAGE_MISSIONDISPLAY_H
