// Generated by gencpp from file ds_mx_msgs/StdPayloadCommand.msg
// DO NOT EDIT!


#ifndef DS_MX_MSGS_MESSAGE_STDPAYLOADCOMMAND_H
#define DS_MX_MSGS_MESSAGE_STDPAYLOADCOMMAND_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ds_core_msgs/KeyString.h>

namespace ds_mx_msgs
{
template <class ContainerAllocator>
struct StdPayloadCommand_
{
  typedef StdPayloadCommand_<ContainerAllocator> Type;

  StdPayloadCommand_()
    : command(0)
    , stamp()
    , config()  {
    }
  StdPayloadCommand_(const ContainerAllocator& _alloc)
    : command(0)
    , stamp()
    , config(_alloc)  {
  (void)_alloc;
    }



   typedef uint16_t _command_type;
  _command_type command;

   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef std::vector< ::ds_core_msgs::KeyString_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::ds_core_msgs::KeyString_<ContainerAllocator> >> _config_type;
  _config_type config;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(COMMAND_CONFIGONLY)
  #undef COMMAND_CONFIGONLY
#endif
#if defined(_WIN32) && defined(COMMAND_START)
  #undef COMMAND_START
#endif
#if defined(_WIN32) && defined(COMMAND_STOP)
  #undef COMMAND_STOP
#endif
#if defined(_WIN32) && defined(COMMAND_POWERUP)
  #undef COMMAND_POWERUP
#endif
#if defined(_WIN32) && defined(COMMAND_SHUTDOWN)
  #undef COMMAND_SHUTDOWN
#endif
#if defined(_WIN32) && defined(COMMAND_NEWLINE)
  #undef COMMAND_NEWLINE
#endif

  enum {
    COMMAND_CONFIGONLY = 0u,
    COMMAND_START = 1u,
    COMMAND_STOP = 2u,
    COMMAND_POWERUP = 3u,
    COMMAND_SHUTDOWN = 4u,
    COMMAND_NEWLINE = 5u,
  };


  typedef boost::shared_ptr< ::ds_mx_msgs::StdPayloadCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ds_mx_msgs::StdPayloadCommand_<ContainerAllocator> const> ConstPtr;

}; // struct StdPayloadCommand_

typedef ::ds_mx_msgs::StdPayloadCommand_<std::allocator<void> > StdPayloadCommand;

typedef boost::shared_ptr< ::ds_mx_msgs::StdPayloadCommand > StdPayloadCommandPtr;
typedef boost::shared_ptr< ::ds_mx_msgs::StdPayloadCommand const> StdPayloadCommandConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ds_mx_msgs::StdPayloadCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ds_mx_msgs::StdPayloadCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ds_mx_msgs::StdPayloadCommand_<ContainerAllocator1> & lhs, const ::ds_mx_msgs::StdPayloadCommand_<ContainerAllocator2> & rhs)
{
  return lhs.command == rhs.command &&
    lhs.stamp == rhs.stamp &&
    lhs.config == rhs.config;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ds_mx_msgs::StdPayloadCommand_<ContainerAllocator1> & lhs, const ::ds_mx_msgs::StdPayloadCommand_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ds_mx_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ds_mx_msgs::StdPayloadCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ds_mx_msgs::StdPayloadCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_mx_msgs::StdPayloadCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_mx_msgs::StdPayloadCommand_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_mx_msgs::StdPayloadCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_mx_msgs::StdPayloadCommand_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ds_mx_msgs::StdPayloadCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e9831eee6c5da4dfb9633972ab3adb90";
  }

  static const char* value(const ::ds_mx_msgs::StdPayloadCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe9831eee6c5da4dfULL;
  static const uint64_t static_value2 = 0xb9633972ab3adb90ULL;
};

template<class ContainerAllocator>
struct DataType< ::ds_mx_msgs::StdPayloadCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ds_mx_msgs/StdPayloadCommand";
  }

  static const char* value(const ::ds_mx_msgs::StdPayloadCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ds_mx_msgs::StdPayloadCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This type is a general payload command for use by the Imaging Payload series of Tasks\n"
"\n"
"# This message includes a command to execute and a set of key/value configuration pairs.\n"
"\n"
"# This value indicates that only the config should be updated\n"
"uint16 COMMAND_CONFIGONLY=0\n"
"\n"
"# Start imaging\n"
"uint16 COMMAND_START=1\n"
"\n"
"# Stop imaging.  Has the same effect as \"powerup\"\n"
"uint16 COMMAND_STOP=2\n"
"\n"
"# Power up the instrument.  Has the same effect as \"stop\"\n"
"uint16 COMMAND_POWERUP=3\n"
"\n"
"# Tells the PayloadManager it should stop the payload and shut it down of noone asks for it in a few minutes\n"
"uint16 COMMAND_SHUTDOWN=4\n"
"\n"
"# Tells the PayloadManager\n"
"uint16 COMMAND_NEWLINE=5\n"
"\n"
"uint16 command\n"
"\n"
"time stamp\n"
"\n"
"# We also include a dictionary of key/value pairs passed directly from the mission\n"
"ds_core_msgs/KeyString[] config\n"
"\n"
"================================================================================\n"
"MSG: ds_core_msgs/KeyString\n"
"string key\n"
"string value\n"
;
  }

  static const char* value(const ::ds_mx_msgs::StdPayloadCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ds_mx_msgs::StdPayloadCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.command);
      stream.next(m.stamp);
      stream.next(m.config);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct StdPayloadCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ds_mx_msgs::StdPayloadCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ds_mx_msgs::StdPayloadCommand_<ContainerAllocator>& v)
  {
    s << indent << "command: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.command);
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "config[]" << std::endl;
    for (size_t i = 0; i < v.config.size(); ++i)
    {
      s << indent << "  config[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ds_core_msgs::KeyString_<ContainerAllocator> >::stream(s, indent + "    ", v.config[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DS_MX_MSGS_MESSAGE_STDPAYLOADCOMMAND_H
