// Generated by gencpp from file ds_control_msgs/GoalLegState.msg
// DO NOT EDIT!


#ifndef DS_CONTROL_MSGS_MESSAGE_GOALLEGSTATE_H
#define DS_CONTROL_MSGS_MESSAGE_GOALLEGSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <ds_core_msgs/DsHeader.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace ds_control_msgs
{
template <class ContainerAllocator>
struct GoalLegState_
{
  typedef GoalLegState_<ContainerAllocator> Type;

  GoalLegState_()
    : header()
    , ds_header()
    , line_start()
    , line_end()
    , angle_line_segment(0.0)
    , off_line_vect(0.0)
    , sign_of_vect(0.0)
    , kappa(0.0)
    , new_goal(0.0)
    , old_goal(0.0)
    , leg_number(0)  {
    }
  GoalLegState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , ds_header(_alloc)
    , line_start(_alloc)
    , line_end(_alloc)
    , angle_line_segment(0.0)
    , off_line_vect(0.0)
    , sign_of_vect(0.0)
    , kappa(0.0)
    , new_goal(0.0)
    , old_goal(0.0)
    , leg_number(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::ds_core_msgs::DsHeader_<ContainerAllocator>  _ds_header_type;
  _ds_header_type ds_header;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _line_start_type;
  _line_start_type line_start;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _line_end_type;
  _line_end_type line_end;

   typedef double _angle_line_segment_type;
  _angle_line_segment_type angle_line_segment;

   typedef double _off_line_vect_type;
  _off_line_vect_type off_line_vect;

   typedef double _sign_of_vect_type;
  _sign_of_vect_type sign_of_vect;

   typedef double _kappa_type;
  _kappa_type kappa;

   typedef double _new_goal_type;
  _new_goal_type new_goal;

   typedef double _old_goal_type;
  _old_goal_type old_goal;

   typedef uint64_t _leg_number_type;
  _leg_number_type leg_number;





  typedef boost::shared_ptr< ::ds_control_msgs::GoalLegState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ds_control_msgs::GoalLegState_<ContainerAllocator> const> ConstPtr;

}; // struct GoalLegState_

typedef ::ds_control_msgs::GoalLegState_<std::allocator<void> > GoalLegState;

typedef boost::shared_ptr< ::ds_control_msgs::GoalLegState > GoalLegStatePtr;
typedef boost::shared_ptr< ::ds_control_msgs::GoalLegState const> GoalLegStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ds_control_msgs::GoalLegState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ds_control_msgs::GoalLegState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ds_control_msgs::GoalLegState_<ContainerAllocator1> & lhs, const ::ds_control_msgs::GoalLegState_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.ds_header == rhs.ds_header &&
    lhs.line_start == rhs.line_start &&
    lhs.line_end == rhs.line_end &&
    lhs.angle_line_segment == rhs.angle_line_segment &&
    lhs.off_line_vect == rhs.off_line_vect &&
    lhs.sign_of_vect == rhs.sign_of_vect &&
    lhs.kappa == rhs.kappa &&
    lhs.new_goal == rhs.new_goal &&
    lhs.old_goal == rhs.old_goal &&
    lhs.leg_number == rhs.leg_number;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ds_control_msgs::GoalLegState_<ContainerAllocator1> & lhs, const ::ds_control_msgs::GoalLegState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ds_control_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ds_control_msgs::GoalLegState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ds_control_msgs::GoalLegState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_control_msgs::GoalLegState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_control_msgs::GoalLegState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_control_msgs::GoalLegState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_control_msgs::GoalLegState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ds_control_msgs::GoalLegState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c3dd492615e233c6fb7acb5330aff42e";
  }

  static const char* value(const ::ds_control_msgs::GoalLegState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc3dd492615e233c6ULL;
  static const uint64_t static_value2 = 0xfb7acb5330aff42eULL;
};

template<class ContainerAllocator>
struct DataType< ::ds_control_msgs::GoalLegState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ds_control_msgs/GoalLegState";
  }

  static const char* value(const ::ds_control_msgs::GoalLegState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ds_control_msgs::GoalLegState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# The standard 2-part DsHeader block\n"
"# This allows both a standard ROS header and DS-specific header blocks\n"
"# See HEADERS.md in ds_core_msgs for details\n"
"std_msgs/Header header\n"
"ds_core_msgs/DsHeader ds_header\n"
"\n"
"geometry_msgs/Point line_start\n"
"geometry_msgs/Point line_end\n"
"\n"
"float64 angle_line_segment\n"
"float64 off_line_vect\n"
"float64 sign_of_vect\n"
"\n"
"float64 kappa\n"
"\n"
"float64 new_goal\n"
"float64 old_goal\n"
"\n"
"uint64 leg_number\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: ds_core_msgs/DsHeader\n"
"# This is half our standard header for ds_msgs; see\n"
"# HEADERS.md for details\n"
"\n"
"# This header should ALWAYS be paired with a std_msgs/Header\n"
"# and should ALWAYS reference HEADERS.md.  If you're looking at this\n"
"# file to add headers to a type, you probably want to copy/paste\n"
"# the following block:\n"
"#\n"
"#     # The standard 2-part DsHeader block\n"
"#     # This allows both a standard ROS header and DS-specific header blocks\n"
"#     # See HEADERS.md in ds_core_msgs for details\n"
"#     std_msgs/Header header\n"
"#     ds_core_msgs/DsHeader ds_header\n"
"#\n"
"\n"
"# Time data was received or sent out (i/o time)\n"
"time io_time\n"
"\n"
"# Sensor source UUID\n"
"uint8[16] source_uuid\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::ds_control_msgs::GoalLegState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ds_control_msgs::GoalLegState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.ds_header);
      stream.next(m.line_start);
      stream.next(m.line_end);
      stream.next(m.angle_line_segment);
      stream.next(m.off_line_vect);
      stream.next(m.sign_of_vect);
      stream.next(m.kappa);
      stream.next(m.new_goal);
      stream.next(m.old_goal);
      stream.next(m.leg_number);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GoalLegState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ds_control_msgs::GoalLegState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ds_control_msgs::GoalLegState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "ds_header: ";
    s << std::endl;
    Printer< ::ds_core_msgs::DsHeader_<ContainerAllocator> >::stream(s, indent + "  ", v.ds_header);
    s << indent << "line_start: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.line_start);
    s << indent << "line_end: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.line_end);
    s << indent << "angle_line_segment: ";
    Printer<double>::stream(s, indent + "  ", v.angle_line_segment);
    s << indent << "off_line_vect: ";
    Printer<double>::stream(s, indent + "  ", v.off_line_vect);
    s << indent << "sign_of_vect: ";
    Printer<double>::stream(s, indent + "  ", v.sign_of_vect);
    s << indent << "kappa: ";
    Printer<double>::stream(s, indent + "  ", v.kappa);
    s << indent << "new_goal: ";
    Printer<double>::stream(s, indent + "  ", v.new_goal);
    s << indent << "old_goal: ";
    Printer<double>::stream(s, indent + "  ", v.old_goal);
    s << indent << "leg_number: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.leg_number);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DS_CONTROL_MSGS_MESSAGE_GOALLEGSTATE_H
