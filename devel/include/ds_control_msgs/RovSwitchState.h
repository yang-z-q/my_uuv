// Generated by gencpp from file ds_control_msgs/RovSwitchState.msg
// DO NOT EDIT!


#ifndef DS_CONTROL_MSGS_MESSAGE_ROVSWITCHSTATE_H
#define DS_CONTROL_MSGS_MESSAGE_ROVSWITCHSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ds_control_msgs
{
template <class ContainerAllocator>
struct RovSwitchState_
{
  typedef RovSwitchState_<ContainerAllocator> Type;

  RovSwitchState_()
    : stamp()
    , active_joystick(0)
    , active_controller(0)
    , active_allocation(0)
    , auto_xy(false)
    , auto_heading(false)
    , auto_depth(false)  {
    }
  RovSwitchState_(const ContainerAllocator& _alloc)
    : stamp()
    , active_joystick(0)
    , active_controller(0)
    , active_allocation(0)
    , auto_xy(false)
    , auto_heading(false)
    , auto_depth(false)  {
  (void)_alloc;
    }



   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef int32_t _active_joystick_type;
  _active_joystick_type active_joystick;

   typedef int32_t _active_controller_type;
  _active_controller_type active_controller;

   typedef int32_t _active_allocation_type;
  _active_allocation_type active_allocation;

   typedef uint8_t _auto_xy_type;
  _auto_xy_type auto_xy;

   typedef uint8_t _auto_heading_type;
  _auto_heading_type auto_heading;

   typedef uint8_t _auto_depth_type;
  _auto_depth_type auto_depth;





  typedef boost::shared_ptr< ::ds_control_msgs::RovSwitchState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ds_control_msgs::RovSwitchState_<ContainerAllocator> const> ConstPtr;

}; // struct RovSwitchState_

typedef ::ds_control_msgs::RovSwitchState_<std::allocator<void> > RovSwitchState;

typedef boost::shared_ptr< ::ds_control_msgs::RovSwitchState > RovSwitchStatePtr;
typedef boost::shared_ptr< ::ds_control_msgs::RovSwitchState const> RovSwitchStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ds_control_msgs::RovSwitchState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ds_control_msgs::RovSwitchState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ds_control_msgs::RovSwitchState_<ContainerAllocator1> & lhs, const ::ds_control_msgs::RovSwitchState_<ContainerAllocator2> & rhs)
{
  return lhs.stamp == rhs.stamp &&
    lhs.active_joystick == rhs.active_joystick &&
    lhs.active_controller == rhs.active_controller &&
    lhs.active_allocation == rhs.active_allocation &&
    lhs.auto_xy == rhs.auto_xy &&
    lhs.auto_heading == rhs.auto_heading &&
    lhs.auto_depth == rhs.auto_depth;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ds_control_msgs::RovSwitchState_<ContainerAllocator1> & lhs, const ::ds_control_msgs::RovSwitchState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ds_control_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ds_control_msgs::RovSwitchState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ds_control_msgs::RovSwitchState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_control_msgs::RovSwitchState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_control_msgs::RovSwitchState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_control_msgs::RovSwitchState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_control_msgs::RovSwitchState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ds_control_msgs::RovSwitchState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cc4cb2c549ff43239f08167688271b72";
  }

  static const char* value(const ::ds_control_msgs::RovSwitchState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcc4cb2c549ff4323ULL;
  static const uint64_t static_value2 = 0x9f08167688271b72ULL;
};

template<class ContainerAllocator>
struct DataType< ::ds_control_msgs::RovSwitchState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ds_control_msgs/RovSwitchState";
  }

  static const char* value(const ::ds_control_msgs::RovSwitchState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ds_control_msgs::RovSwitchState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time stamp\n"
"int32 active_joystick\n"
"int32 active_controller\n"
"int32 active_allocation\n"
"bool auto_xy\n"
"bool auto_heading\n"
"bool auto_depth\n"
;
  }

  static const char* value(const ::ds_control_msgs::RovSwitchState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ds_control_msgs::RovSwitchState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamp);
      stream.next(m.active_joystick);
      stream.next(m.active_controller);
      stream.next(m.active_allocation);
      stream.next(m.auto_xy);
      stream.next(m.auto_heading);
      stream.next(m.auto_depth);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RovSwitchState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ds_control_msgs::RovSwitchState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ds_control_msgs::RovSwitchState_<ContainerAllocator>& v)
  {
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "active_joystick: ";
    Printer<int32_t>::stream(s, indent + "  ", v.active_joystick);
    s << indent << "active_controller: ";
    Printer<int32_t>::stream(s, indent + "  ", v.active_controller);
    s << indent << "active_allocation: ";
    Printer<int32_t>::stream(s, indent + "  ", v.active_allocation);
    s << indent << "auto_xy: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.auto_xy);
    s << indent << "auto_heading: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.auto_heading);
    s << indent << "auto_depth: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.auto_depth);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DS_CONTROL_MSGS_MESSAGE_ROVSWITCHSTATE_H
