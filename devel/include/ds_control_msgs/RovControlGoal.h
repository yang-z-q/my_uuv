// Generated by gencpp from file ds_control_msgs/RovControlGoal.msg
// DO NOT EDIT!


#ifndef DS_CONTROL_MSGS_MESSAGE_ROVCONTROLGOAL_H
#define DS_CONTROL_MSGS_MESSAGE_ROVCONTROLGOAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ds_nav_msgs/AggregatedState.h>

namespace ds_control_msgs
{
template <class ContainerAllocator>
struct RovControlGoal_
{
  typedef RovControlGoal_<ContainerAllocator> Type;

  RovControlGoal_()
    : auto_heading(false)
    , auto_depth(false)
    , auto_xy(false)
    , goal()  {
    }
  RovControlGoal_(const ContainerAllocator& _alloc)
    : auto_heading(false)
    , auto_depth(false)
    , auto_xy(false)
    , goal(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _auto_heading_type;
  _auto_heading_type auto_heading;

   typedef uint8_t _auto_depth_type;
  _auto_depth_type auto_depth;

   typedef uint8_t _auto_xy_type;
  _auto_xy_type auto_xy;

   typedef  ::ds_nav_msgs::AggregatedState_<ContainerAllocator>  _goal_type;
  _goal_type goal;





  typedef boost::shared_ptr< ::ds_control_msgs::RovControlGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ds_control_msgs::RovControlGoal_<ContainerAllocator> const> ConstPtr;

}; // struct RovControlGoal_

typedef ::ds_control_msgs::RovControlGoal_<std::allocator<void> > RovControlGoal;

typedef boost::shared_ptr< ::ds_control_msgs::RovControlGoal > RovControlGoalPtr;
typedef boost::shared_ptr< ::ds_control_msgs::RovControlGoal const> RovControlGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ds_control_msgs::RovControlGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ds_control_msgs::RovControlGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ds_control_msgs::RovControlGoal_<ContainerAllocator1> & lhs, const ::ds_control_msgs::RovControlGoal_<ContainerAllocator2> & rhs)
{
  return lhs.auto_heading == rhs.auto_heading &&
    lhs.auto_depth == rhs.auto_depth &&
    lhs.auto_xy == rhs.auto_xy &&
    lhs.goal == rhs.goal;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ds_control_msgs::RovControlGoal_<ContainerAllocator1> & lhs, const ::ds_control_msgs::RovControlGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ds_control_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ds_control_msgs::RovControlGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ds_control_msgs::RovControlGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_control_msgs::RovControlGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_control_msgs::RovControlGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_control_msgs::RovControlGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_control_msgs::RovControlGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ds_control_msgs::RovControlGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "16732e294833366747b3f7a226dfc8ec";
  }

  static const char* value(const ::ds_control_msgs::RovControlGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x16732e2948333667ULL;
  static const uint64_t static_value2 = 0x47b3f7a226dfc8ecULL;
};

template<class ContainerAllocator>
struct DataType< ::ds_control_msgs::RovControlGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ds_control_msgs/RovControlGoal";
  }

  static const char* value(const ::ds_control_msgs::RovControlGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ds_control_msgs::RovControlGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This message mostly wraps the AggregatedState message we normally use, but\n"
"# also adds auto modes\n"
"bool auto_heading\n"
"bool auto_depth\n"
"bool auto_xy\n"
"\n"
"ds_nav_msgs/AggregatedState goal\n"
"\n"
"================================================================================\n"
"MSG: ds_nav_msgs/AggregatedState\n"
"# The standard 2-part DsHeader block\n"
"# This allows both a standard ROS header and DS-specific header blocks\n"
"# See HEADERS.md in ds_core_msgs for details\n"
"std_msgs/Header header\n"
"ds_core_msgs/DsHeader ds_header\n"
"\n"
"# Position\n"
"FlaggedDouble northing\n"
"FlaggedDouble easting\n"
"FlaggedDouble down\n"
"FlaggedDouble roll\n"
"FlaggedDouble pitch\n"
"FlaggedDouble heading\n"
"\n"
"# Rates\n"
"FlaggedDouble surge_u\n"
"FlaggedDouble sway_v\n"
"FlaggedDouble heave_w\n"
"FlaggedDouble p\n"
"FlaggedDouble q\n"
"FlaggedDouble r\n"
"\n"
"# Accelerations\n"
"FlaggedDouble du_dt\n"
"FlaggedDouble dv_dt\n"
"FlaggedDouble dw_dt\n"
"FlaggedDouble dp_dt\n"
"FlaggedDouble dq_dt\n"
"FlaggedDouble dr_dt\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: ds_core_msgs/DsHeader\n"
"# This is half our standard header for ds_msgs; see\n"
"# HEADERS.md for details\n"
"\n"
"# This header should ALWAYS be paired with a std_msgs/Header\n"
"# and should ALWAYS reference HEADERS.md.  If you're looking at this\n"
"# file to add headers to a type, you probably want to copy/paste\n"
"# the following block:\n"
"#\n"
"#     # The standard 2-part DsHeader block\n"
"#     # This allows both a standard ROS header and DS-specific header blocks\n"
"#     # See HEADERS.md in ds_core_msgs for details\n"
"#     std_msgs/Header header\n"
"#     ds_core_msgs/DsHeader ds_header\n"
"#\n"
"\n"
"# Time data was received or sent out (i/o time)\n"
"time io_time\n"
"\n"
"# Sensor source UUID\n"
"uint8[16] source_uuid\n"
"\n"
"\n"
"================================================================================\n"
"MSG: ds_nav_msgs/FlaggedDouble\n"
"# This enum states whether or not a particular DOF value is valid\n"
"uint8 VALUE_INVALID=0\n"
"uint8 VALUE_VALID=1\n"
"\n"
"float64 value\n"
"uint8   valid\n"
;
  }

  static const char* value(const ::ds_control_msgs::RovControlGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ds_control_msgs::RovControlGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.auto_heading);
      stream.next(m.auto_depth);
      stream.next(m.auto_xy);
      stream.next(m.goal);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RovControlGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ds_control_msgs::RovControlGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ds_control_msgs::RovControlGoal_<ContainerAllocator>& v)
  {
    s << indent << "auto_heading: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.auto_heading);
    s << indent << "auto_depth: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.auto_depth);
    s << indent << "auto_xy: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.auto_xy);
    s << indent << "goal: ";
    s << std::endl;
    Printer< ::ds_nav_msgs::AggregatedState_<ContainerAllocator> >::stream(s, indent + "  ", v.goal);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DS_CONTROL_MSGS_MESSAGE_ROVCONTROLGOAL_H
