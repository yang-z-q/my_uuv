// Generated by gencpp from file ds_control_msgs/RovAutoState.msg
// DO NOT EDIT!


#ifndef DS_CONTROL_MSGS_MESSAGE_ROVAUTOSTATE_H
#define DS_CONTROL_MSGS_MESSAGE_ROVAUTOSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ds_control_msgs
{
template <class ContainerAllocator>
struct RovAutoState_
{
  typedef RovAutoState_<ContainerAllocator> Type;

  RovAutoState_()
    : auto_xy_enabled(false)
    , auto_depth_enabled(false)
    , auto_heading_enabled(false)
    , auto_xy_available(false)
    , auto_depth_available(false)
    , auto_heading_available(false)  {
    }
  RovAutoState_(const ContainerAllocator& _alloc)
    : auto_xy_enabled(false)
    , auto_depth_enabled(false)
    , auto_heading_enabled(false)
    , auto_xy_available(false)
    , auto_depth_available(false)
    , auto_heading_available(false)  {
  (void)_alloc;
    }



   typedef uint8_t _auto_xy_enabled_type;
  _auto_xy_enabled_type auto_xy_enabled;

   typedef uint8_t _auto_depth_enabled_type;
  _auto_depth_enabled_type auto_depth_enabled;

   typedef uint8_t _auto_heading_enabled_type;
  _auto_heading_enabled_type auto_heading_enabled;

   typedef uint8_t _auto_xy_available_type;
  _auto_xy_available_type auto_xy_available;

   typedef uint8_t _auto_depth_available_type;
  _auto_depth_available_type auto_depth_available;

   typedef uint8_t _auto_heading_available_type;
  _auto_heading_available_type auto_heading_available;





  typedef boost::shared_ptr< ::ds_control_msgs::RovAutoState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ds_control_msgs::RovAutoState_<ContainerAllocator> const> ConstPtr;

}; // struct RovAutoState_

typedef ::ds_control_msgs::RovAutoState_<std::allocator<void> > RovAutoState;

typedef boost::shared_ptr< ::ds_control_msgs::RovAutoState > RovAutoStatePtr;
typedef boost::shared_ptr< ::ds_control_msgs::RovAutoState const> RovAutoStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ds_control_msgs::RovAutoState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ds_control_msgs::RovAutoState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ds_control_msgs::RovAutoState_<ContainerAllocator1> & lhs, const ::ds_control_msgs::RovAutoState_<ContainerAllocator2> & rhs)
{
  return lhs.auto_xy_enabled == rhs.auto_xy_enabled &&
    lhs.auto_depth_enabled == rhs.auto_depth_enabled &&
    lhs.auto_heading_enabled == rhs.auto_heading_enabled &&
    lhs.auto_xy_available == rhs.auto_xy_available &&
    lhs.auto_depth_available == rhs.auto_depth_available &&
    lhs.auto_heading_available == rhs.auto_heading_available;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ds_control_msgs::RovAutoState_<ContainerAllocator1> & lhs, const ::ds_control_msgs::RovAutoState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ds_control_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ds_control_msgs::RovAutoState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ds_control_msgs::RovAutoState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_control_msgs::RovAutoState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_control_msgs::RovAutoState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_control_msgs::RovAutoState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_control_msgs::RovAutoState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ds_control_msgs::RovAutoState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7967bdc84bf681c832c8067e5802e865";
  }

  static const char* value(const ::ds_control_msgs::RovAutoState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7967bdc84bf681c8ULL;
  static const uint64_t static_value2 = 0x32c8067e5802e865ULL;
};

template<class ContainerAllocator>
struct DataType< ::ds_control_msgs::RovAutoState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ds_control_msgs/RovAutoState";
  }

  static const char* value(const ::ds_control_msgs::RovAutoState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ds_control_msgs::RovAutoState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool auto_xy_enabled\n"
"bool auto_depth_enabled\n"
"bool auto_heading_enabled\n"
"\n"
"bool auto_xy_available\n"
"bool auto_depth_available\n"
"bool auto_heading_available\n"
;
  }

  static const char* value(const ::ds_control_msgs::RovAutoState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ds_control_msgs::RovAutoState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.auto_xy_enabled);
      stream.next(m.auto_depth_enabled);
      stream.next(m.auto_heading_enabled);
      stream.next(m.auto_xy_available);
      stream.next(m.auto_depth_available);
      stream.next(m.auto_heading_available);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RovAutoState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ds_control_msgs::RovAutoState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ds_control_msgs::RovAutoState_<ContainerAllocator>& v)
  {
    s << indent << "auto_xy_enabled: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.auto_xy_enabled);
    s << indent << "auto_depth_enabled: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.auto_depth_enabled);
    s << indent << "auto_heading_enabled: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.auto_heading_enabled);
    s << indent << "auto_xy_available: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.auto_xy_available);
    s << indent << "auto_depth_available: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.auto_depth_available);
    s << indent << "auto_heading_available: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.auto_heading_available);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DS_CONTROL_MSGS_MESSAGE_ROVAUTOSTATE_H
