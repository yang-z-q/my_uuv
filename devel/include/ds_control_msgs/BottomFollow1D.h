// Generated by gencpp from file ds_control_msgs/BottomFollow1D.msg
// DO NOT EDIT!


#ifndef DS_CONTROL_MSGS_MESSAGE_BOTTOMFOLLOW1D_H
#define DS_CONTROL_MSGS_MESSAGE_BOTTOMFOLLOW1D_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <ds_core_msgs/DsHeader.h>

namespace ds_control_msgs
{
template <class ContainerAllocator>
struct BottomFollow1D_
{
  typedef BottomFollow1D_<ContainerAllocator> Type;

  BottomFollow1D_()
    : header()
    , ds_header()
    , depth_bot(0.0)
    , depth_env()
    , depth_goal(0.0)
    , ref_speed(0.0)
    , depth_rate_filtered(0.0)
    , past_altitude_values()
    , median_altitude(0.0)
    , commanded_altitude(0.0)
    , env_padding_speed(0.0)
    , env_padding_accel(0.0)
    , step(0.0)
    , last_good_altitude(0.0)
    , last_good_depth(0.0)
    , last_good_depth_bot(0.0)
    , depth_floor(0.0)
    , alarm_timeout(0.0)
    , min_speed(0.0)
    , speed_gain(0.0)
    , time_inside_env()
    , alt_bad_timer()
    , last_good_altitude_time()
    , time_low_depth_rate()
    , last_altitude_time()
    , alarm(false)
    , stuck(false)
    , pseudo_bot_code(0)
    , depth_rate_d(0.0)
    , depth_accel_d(0.0)
    , bad_altitude_hits(0)
    , raw_altitude(0.0)
    , userDepthOverrideEngageTime()
    , userDepthOverrideEngaged(false)
    , userDepthOverrideEndTime()
    , override_depth_direction(0)  {
      depth_env.assign(0.0);

      past_altitude_values.assign(0.0);
  }
  BottomFollow1D_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , ds_header(_alloc)
    , depth_bot(0.0)
    , depth_env()
    , depth_goal(0.0)
    , ref_speed(0.0)
    , depth_rate_filtered(0.0)
    , past_altitude_values()
    , median_altitude(0.0)
    , commanded_altitude(0.0)
    , env_padding_speed(0.0)
    , env_padding_accel(0.0)
    , step(0.0)
    , last_good_altitude(0.0)
    , last_good_depth(0.0)
    , last_good_depth_bot(0.0)
    , depth_floor(0.0)
    , alarm_timeout(0.0)
    , min_speed(0.0)
    , speed_gain(0.0)
    , time_inside_env()
    , alt_bad_timer()
    , last_good_altitude_time()
    , time_low_depth_rate()
    , last_altitude_time()
    , alarm(false)
    , stuck(false)
    , pseudo_bot_code(0)
    , depth_rate_d(0.0)
    , depth_accel_d(0.0)
    , bad_altitude_hits(0)
    , raw_altitude(0.0)
    , userDepthOverrideEngageTime()
    , userDepthOverrideEngaged(false)
    , userDepthOverrideEndTime()
    , override_depth_direction(0)  {
  (void)_alloc;
      depth_env.assign(0.0);

      past_altitude_values.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::ds_core_msgs::DsHeader_<ContainerAllocator>  _ds_header_type;
  _ds_header_type ds_header;

   typedef double _depth_bot_type;
  _depth_bot_type depth_bot;

   typedef boost::array<double, 2>  _depth_env_type;
  _depth_env_type depth_env;

   typedef double _depth_goal_type;
  _depth_goal_type depth_goal;

   typedef double _ref_speed_type;
  _ref_speed_type ref_speed;

   typedef double _depth_rate_filtered_type;
  _depth_rate_filtered_type depth_rate_filtered;

   typedef boost::array<double, 5>  _past_altitude_values_type;
  _past_altitude_values_type past_altitude_values;

   typedef double _median_altitude_type;
  _median_altitude_type median_altitude;

   typedef double _commanded_altitude_type;
  _commanded_altitude_type commanded_altitude;

   typedef double _env_padding_speed_type;
  _env_padding_speed_type env_padding_speed;

   typedef double _env_padding_accel_type;
  _env_padding_accel_type env_padding_accel;

   typedef double _step_type;
  _step_type step;

   typedef double _last_good_altitude_type;
  _last_good_altitude_type last_good_altitude;

   typedef double _last_good_depth_type;
  _last_good_depth_type last_good_depth;

   typedef double _last_good_depth_bot_type;
  _last_good_depth_bot_type last_good_depth_bot;

   typedef double _depth_floor_type;
  _depth_floor_type depth_floor;

   typedef double _alarm_timeout_type;
  _alarm_timeout_type alarm_timeout;

   typedef double _min_speed_type;
  _min_speed_type min_speed;

   typedef double _speed_gain_type;
  _speed_gain_type speed_gain;

   typedef ros::Duration _time_inside_env_type;
  _time_inside_env_type time_inside_env;

   typedef ros::Duration _alt_bad_timer_type;
  _alt_bad_timer_type alt_bad_timer;

   typedef ros::Time _last_good_altitude_time_type;
  _last_good_altitude_time_type last_good_altitude_time;

   typedef ros::Time _time_low_depth_rate_type;
  _time_low_depth_rate_type time_low_depth_rate;

   typedef ros::Time _last_altitude_time_type;
  _last_altitude_time_type last_altitude_time;

   typedef uint8_t _alarm_type;
  _alarm_type alarm;

   typedef uint8_t _stuck_type;
  _stuck_type stuck;

   typedef int8_t _pseudo_bot_code_type;
  _pseudo_bot_code_type pseudo_bot_code;

   typedef double _depth_rate_d_type;
  _depth_rate_d_type depth_rate_d;

   typedef double _depth_accel_d_type;
  _depth_accel_d_type depth_accel_d;

   typedef uint64_t _bad_altitude_hits_type;
  _bad_altitude_hits_type bad_altitude_hits;

   typedef double _raw_altitude_type;
  _raw_altitude_type raw_altitude;

   typedef ros::Time _userDepthOverrideEngageTime_type;
  _userDepthOverrideEngageTime_type userDepthOverrideEngageTime;

   typedef uint8_t _userDepthOverrideEngaged_type;
  _userDepthOverrideEngaged_type userDepthOverrideEngaged;

   typedef ros::Time _userDepthOverrideEndTime_type;
  _userDepthOverrideEndTime_type userDepthOverrideEndTime;

   typedef int8_t _override_depth_direction_type;
  _override_depth_direction_type override_depth_direction;





  typedef boost::shared_ptr< ::ds_control_msgs::BottomFollow1D_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ds_control_msgs::BottomFollow1D_<ContainerAllocator> const> ConstPtr;

}; // struct BottomFollow1D_

typedef ::ds_control_msgs::BottomFollow1D_<std::allocator<void> > BottomFollow1D;

typedef boost::shared_ptr< ::ds_control_msgs::BottomFollow1D > BottomFollow1DPtr;
typedef boost::shared_ptr< ::ds_control_msgs::BottomFollow1D const> BottomFollow1DConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ds_control_msgs::BottomFollow1D_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ds_control_msgs::BottomFollow1D_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ds_control_msgs::BottomFollow1D_<ContainerAllocator1> & lhs, const ::ds_control_msgs::BottomFollow1D_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.ds_header == rhs.ds_header &&
    lhs.depth_bot == rhs.depth_bot &&
    lhs.depth_env == rhs.depth_env &&
    lhs.depth_goal == rhs.depth_goal &&
    lhs.ref_speed == rhs.ref_speed &&
    lhs.depth_rate_filtered == rhs.depth_rate_filtered &&
    lhs.past_altitude_values == rhs.past_altitude_values &&
    lhs.median_altitude == rhs.median_altitude &&
    lhs.commanded_altitude == rhs.commanded_altitude &&
    lhs.env_padding_speed == rhs.env_padding_speed &&
    lhs.env_padding_accel == rhs.env_padding_accel &&
    lhs.step == rhs.step &&
    lhs.last_good_altitude == rhs.last_good_altitude &&
    lhs.last_good_depth == rhs.last_good_depth &&
    lhs.last_good_depth_bot == rhs.last_good_depth_bot &&
    lhs.depth_floor == rhs.depth_floor &&
    lhs.alarm_timeout == rhs.alarm_timeout &&
    lhs.min_speed == rhs.min_speed &&
    lhs.speed_gain == rhs.speed_gain &&
    lhs.time_inside_env == rhs.time_inside_env &&
    lhs.alt_bad_timer == rhs.alt_bad_timer &&
    lhs.last_good_altitude_time == rhs.last_good_altitude_time &&
    lhs.time_low_depth_rate == rhs.time_low_depth_rate &&
    lhs.last_altitude_time == rhs.last_altitude_time &&
    lhs.alarm == rhs.alarm &&
    lhs.stuck == rhs.stuck &&
    lhs.pseudo_bot_code == rhs.pseudo_bot_code &&
    lhs.depth_rate_d == rhs.depth_rate_d &&
    lhs.depth_accel_d == rhs.depth_accel_d &&
    lhs.bad_altitude_hits == rhs.bad_altitude_hits &&
    lhs.raw_altitude == rhs.raw_altitude &&
    lhs.userDepthOverrideEngageTime == rhs.userDepthOverrideEngageTime &&
    lhs.userDepthOverrideEngaged == rhs.userDepthOverrideEngaged &&
    lhs.userDepthOverrideEndTime == rhs.userDepthOverrideEndTime &&
    lhs.override_depth_direction == rhs.override_depth_direction;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ds_control_msgs::BottomFollow1D_<ContainerAllocator1> & lhs, const ::ds_control_msgs::BottomFollow1D_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ds_control_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ds_control_msgs::BottomFollow1D_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ds_control_msgs::BottomFollow1D_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_control_msgs::BottomFollow1D_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_control_msgs::BottomFollow1D_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_control_msgs::BottomFollow1D_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_control_msgs::BottomFollow1D_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ds_control_msgs::BottomFollow1D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "358ee6b880ac348548fbc9ea838b96b5";
  }

  static const char* value(const ::ds_control_msgs::BottomFollow1D_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x358ee6b880ac3485ULL;
  static const uint64_t static_value2 = 0x48fbc9ea838b96b5ULL;
};

template<class ContainerAllocator>
struct DataType< ::ds_control_msgs::BottomFollow1D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ds_control_msgs/BottomFollow1D";
  }

  static const char* value(const ::ds_control_msgs::BottomFollow1D_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ds_control_msgs::BottomFollow1D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# The standard 2-part DsHeader block\n"
"# This allows both a standard ROS header and DS-specific header blocks\n"
"# See HEADERS.md in ds_core_msgs for details\n"
"std_msgs/Header header\n"
"ds_core_msgs/DsHeader ds_header\n"
"\n"
"float64 depth_bot\n"
"float64[2] depth_env\n"
"float64 depth_goal\n"
"float64 ref_speed\n"
"float64 depth_rate_filtered\n"
"float64[5] past_altitude_values\n"
"float64 median_altitude\n"
"float64 commanded_altitude\n"
"float64 env_padding_speed\n"
"float64 env_padding_accel\n"
"float64 step\n"
"float64 last_good_altitude\n"
"float64 last_good_depth\n"
"float64 last_good_depth_bot\n"
"float64 depth_floor\n"
"float64 alarm_timeout\n"
"float64 min_speed\n"
"float64 speed_gain\n"
"duration time_inside_env\n"
"duration alt_bad_timer\n"
"\n"
"time last_good_altitude_time\n"
"time time_low_depth_rate\n"
"time last_altitude_time\n"
"\n"
"bool alarm\n"
"bool stuck\n"
"\n"
"int8 pseudo_bot_code\n"
"\n"
"# copy of the smoothing parameters to sync the reference smoother\n"
"float64 depth_rate_d\n"
"float64 depth_accel_d\n"
"\n"
"uint64 bad_altitude_hits\n"
"\n"
"# The raw altitude after tf. This can be negative if bad, for mc descent\n"
"float64 raw_altitude\n"
"\n"
"# User push-up or push-down override\n"
"# When the override begins\n"
"time userDepthOverrideEngageTime\n"
"# Whether or not the override is engaged for the current control loop\n"
"bool userDepthOverrideEngaged\n"
"# When the override ends\n"
"time userDepthOverrideEndTime\n"
"# Override direction\n"
"int8 override_depth_direction\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: ds_core_msgs/DsHeader\n"
"# This is half our standard header for ds_msgs; see\n"
"# HEADERS.md for details\n"
"\n"
"# This header should ALWAYS be paired with a std_msgs/Header\n"
"# and should ALWAYS reference HEADERS.md.  If you're looking at this\n"
"# file to add headers to a type, you probably want to copy/paste\n"
"# the following block:\n"
"#\n"
"#     # The standard 2-part DsHeader block\n"
"#     # This allows both a standard ROS header and DS-specific header blocks\n"
"#     # See HEADERS.md in ds_core_msgs for details\n"
"#     std_msgs/Header header\n"
"#     ds_core_msgs/DsHeader ds_header\n"
"#\n"
"\n"
"# Time data was received or sent out (i/o time)\n"
"time io_time\n"
"\n"
"# Sensor source UUID\n"
"uint8[16] source_uuid\n"
"\n"
;
  }

  static const char* value(const ::ds_control_msgs::BottomFollow1D_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ds_control_msgs::BottomFollow1D_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.ds_header);
      stream.next(m.depth_bot);
      stream.next(m.depth_env);
      stream.next(m.depth_goal);
      stream.next(m.ref_speed);
      stream.next(m.depth_rate_filtered);
      stream.next(m.past_altitude_values);
      stream.next(m.median_altitude);
      stream.next(m.commanded_altitude);
      stream.next(m.env_padding_speed);
      stream.next(m.env_padding_accel);
      stream.next(m.step);
      stream.next(m.last_good_altitude);
      stream.next(m.last_good_depth);
      stream.next(m.last_good_depth_bot);
      stream.next(m.depth_floor);
      stream.next(m.alarm_timeout);
      stream.next(m.min_speed);
      stream.next(m.speed_gain);
      stream.next(m.time_inside_env);
      stream.next(m.alt_bad_timer);
      stream.next(m.last_good_altitude_time);
      stream.next(m.time_low_depth_rate);
      stream.next(m.last_altitude_time);
      stream.next(m.alarm);
      stream.next(m.stuck);
      stream.next(m.pseudo_bot_code);
      stream.next(m.depth_rate_d);
      stream.next(m.depth_accel_d);
      stream.next(m.bad_altitude_hits);
      stream.next(m.raw_altitude);
      stream.next(m.userDepthOverrideEngageTime);
      stream.next(m.userDepthOverrideEngaged);
      stream.next(m.userDepthOverrideEndTime);
      stream.next(m.override_depth_direction);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BottomFollow1D_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ds_control_msgs::BottomFollow1D_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ds_control_msgs::BottomFollow1D_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "ds_header: ";
    s << std::endl;
    Printer< ::ds_core_msgs::DsHeader_<ContainerAllocator> >::stream(s, indent + "  ", v.ds_header);
    s << indent << "depth_bot: ";
    Printer<double>::stream(s, indent + "  ", v.depth_bot);
    s << indent << "depth_env[]" << std::endl;
    for (size_t i = 0; i < v.depth_env.size(); ++i)
    {
      s << indent << "  depth_env[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.depth_env[i]);
    }
    s << indent << "depth_goal: ";
    Printer<double>::stream(s, indent + "  ", v.depth_goal);
    s << indent << "ref_speed: ";
    Printer<double>::stream(s, indent + "  ", v.ref_speed);
    s << indent << "depth_rate_filtered: ";
    Printer<double>::stream(s, indent + "  ", v.depth_rate_filtered);
    s << indent << "past_altitude_values[]" << std::endl;
    for (size_t i = 0; i < v.past_altitude_values.size(); ++i)
    {
      s << indent << "  past_altitude_values[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.past_altitude_values[i]);
    }
    s << indent << "median_altitude: ";
    Printer<double>::stream(s, indent + "  ", v.median_altitude);
    s << indent << "commanded_altitude: ";
    Printer<double>::stream(s, indent + "  ", v.commanded_altitude);
    s << indent << "env_padding_speed: ";
    Printer<double>::stream(s, indent + "  ", v.env_padding_speed);
    s << indent << "env_padding_accel: ";
    Printer<double>::stream(s, indent + "  ", v.env_padding_accel);
    s << indent << "step: ";
    Printer<double>::stream(s, indent + "  ", v.step);
    s << indent << "last_good_altitude: ";
    Printer<double>::stream(s, indent + "  ", v.last_good_altitude);
    s << indent << "last_good_depth: ";
    Printer<double>::stream(s, indent + "  ", v.last_good_depth);
    s << indent << "last_good_depth_bot: ";
    Printer<double>::stream(s, indent + "  ", v.last_good_depth_bot);
    s << indent << "depth_floor: ";
    Printer<double>::stream(s, indent + "  ", v.depth_floor);
    s << indent << "alarm_timeout: ";
    Printer<double>::stream(s, indent + "  ", v.alarm_timeout);
    s << indent << "min_speed: ";
    Printer<double>::stream(s, indent + "  ", v.min_speed);
    s << indent << "speed_gain: ";
    Printer<double>::stream(s, indent + "  ", v.speed_gain);
    s << indent << "time_inside_env: ";
    Printer<ros::Duration>::stream(s, indent + "  ", v.time_inside_env);
    s << indent << "alt_bad_timer: ";
    Printer<ros::Duration>::stream(s, indent + "  ", v.alt_bad_timer);
    s << indent << "last_good_altitude_time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.last_good_altitude_time);
    s << indent << "time_low_depth_rate: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.time_low_depth_rate);
    s << indent << "last_altitude_time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.last_altitude_time);
    s << indent << "alarm: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.alarm);
    s << indent << "stuck: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.stuck);
    s << indent << "pseudo_bot_code: ";
    Printer<int8_t>::stream(s, indent + "  ", v.pseudo_bot_code);
    s << indent << "depth_rate_d: ";
    Printer<double>::stream(s, indent + "  ", v.depth_rate_d);
    s << indent << "depth_accel_d: ";
    Printer<double>::stream(s, indent + "  ", v.depth_accel_d);
    s << indent << "bad_altitude_hits: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.bad_altitude_hits);
    s << indent << "raw_altitude: ";
    Printer<double>::stream(s, indent + "  ", v.raw_altitude);
    s << indent << "userDepthOverrideEngageTime: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.userDepthOverrideEngageTime);
    s << indent << "userDepthOverrideEngaged: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.userDepthOverrideEngaged);
    s << indent << "userDepthOverrideEndTime: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.userDepthOverrideEndTime);
    s << indent << "override_depth_direction: ";
    Printer<int8_t>::stream(s, indent + "  ", v.override_depth_direction);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DS_CONTROL_MSGS_MESSAGE_BOTTOMFOLLOW1D_H
