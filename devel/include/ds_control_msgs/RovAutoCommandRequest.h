// Generated by gencpp from file ds_control_msgs/RovAutoCommandRequest.msg
// DO NOT EDIT!


#ifndef DS_CONTROL_MSGS_MESSAGE_ROVAUTOCOMMANDREQUEST_H
#define DS_CONTROL_MSGS_MESSAGE_ROVAUTOCOMMANDREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ds_control_msgs
{
template <class ContainerAllocator>
struct RovAutoCommandRequest_
{
  typedef RovAutoCommandRequest_<ContainerAllocator> Type;

  RovAutoCommandRequest_()
    : enable_auto_xy(0)
    , enable_auto_depth(0)
    , enable_auto_heading(0)  {
    }
  RovAutoCommandRequest_(const ContainerAllocator& _alloc)
    : enable_auto_xy(0)
    , enable_auto_depth(0)
    , enable_auto_heading(0)  {
  (void)_alloc;
    }



   typedef uint32_t _enable_auto_xy_type;
  _enable_auto_xy_type enable_auto_xy;

   typedef uint32_t _enable_auto_depth_type;
  _enable_auto_depth_type enable_auto_depth;

   typedef uint32_t _enable_auto_heading_type;
  _enable_auto_heading_type enable_auto_heading;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(TURN_OFF)
  #undef TURN_OFF
#endif
#if defined(_WIN32) && defined(TURN_ON)
  #undef TURN_ON
#endif
#if defined(_WIN32) && defined(NO_CHANGE)
  #undef NO_CHANGE
#endif

  enum {
    TURN_OFF = 0u,
    TURN_ON = 1u,
    NO_CHANGE = 2u,
  };


  typedef boost::shared_ptr< ::ds_control_msgs::RovAutoCommandRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ds_control_msgs::RovAutoCommandRequest_<ContainerAllocator> const> ConstPtr;

}; // struct RovAutoCommandRequest_

typedef ::ds_control_msgs::RovAutoCommandRequest_<std::allocator<void> > RovAutoCommandRequest;

typedef boost::shared_ptr< ::ds_control_msgs::RovAutoCommandRequest > RovAutoCommandRequestPtr;
typedef boost::shared_ptr< ::ds_control_msgs::RovAutoCommandRequest const> RovAutoCommandRequestConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ds_control_msgs::RovAutoCommandRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ds_control_msgs::RovAutoCommandRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ds_control_msgs::RovAutoCommandRequest_<ContainerAllocator1> & lhs, const ::ds_control_msgs::RovAutoCommandRequest_<ContainerAllocator2> & rhs)
{
  return lhs.enable_auto_xy == rhs.enable_auto_xy &&
    lhs.enable_auto_depth == rhs.enable_auto_depth &&
    lhs.enable_auto_heading == rhs.enable_auto_heading;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ds_control_msgs::RovAutoCommandRequest_<ContainerAllocator1> & lhs, const ::ds_control_msgs::RovAutoCommandRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ds_control_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ds_control_msgs::RovAutoCommandRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ds_control_msgs::RovAutoCommandRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_control_msgs::RovAutoCommandRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds_control_msgs::RovAutoCommandRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_control_msgs::RovAutoCommandRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds_control_msgs::RovAutoCommandRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ds_control_msgs::RovAutoCommandRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "09f09d6f37b200d965d860a47f9517f9";
  }

  static const char* value(const ::ds_control_msgs::RovAutoCommandRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x09f09d6f37b200d9ULL;
  static const uint64_t static_value2 = 0x65d860a47f9517f9ULL;
};

template<class ContainerAllocator>
struct DataType< ::ds_control_msgs::RovAutoCommandRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ds_control_msgs/RovAutoCommandRequest";
  }

  static const char* value(const ::ds_control_msgs::RovAutoCommandRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ds_control_msgs::RovAutoCommandRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 TURN_OFF=0\n"
"uint32 TURN_ON=1\n"
"uint32 NO_CHANGE=2\n"
"\n"
"uint32 enable_auto_xy\n"
"uint32 enable_auto_depth\n"
"uint32 enable_auto_heading\n"
"\n"
;
  }

  static const char* value(const ::ds_control_msgs::RovAutoCommandRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ds_control_msgs::RovAutoCommandRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.enable_auto_xy);
      stream.next(m.enable_auto_depth);
      stream.next(m.enable_auto_heading);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RovAutoCommandRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ds_control_msgs::RovAutoCommandRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ds_control_msgs::RovAutoCommandRequest_<ContainerAllocator>& v)
  {
    s << indent << "enable_auto_xy: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.enable_auto_xy);
    s << indent << "enable_auto_depth: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.enable_auto_depth);
    s << indent << "enable_auto_heading: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.enable_auto_heading);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DS_CONTROL_MSGS_MESSAGE_ROVAUTOCOMMANDREQUEST_H
