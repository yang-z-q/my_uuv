// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SensorDvl.proto

#include "SensorDvl.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_quaternion_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_quaternion_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Quaternion;
}  // namespace protobuf_quaternion_2eproto
namespace protobuf_time_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_time_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Time;
}  // namespace protobuf_time_2eproto
namespace protobuf_vector3d_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_vector3d_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Vector3d;
}  // namespace protobuf_vector3d_2eproto
namespace ds_sim {
namespace msgs {
class DvlDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Dvl>
      _instance;
} _Dvl_default_instance_;
}  // namespace msgs
}  // namespace ds_sim
namespace protobuf_SensorDvl_2eproto {
static void InitDefaultsDvl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ds_sim::msgs::_Dvl_default_instance_;
    new (ptr) ::ds_sim::msgs::Dvl();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ds_sim::msgs::Dvl::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_Dvl =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsDvl}, {
      &protobuf_time_2eproto::scc_info_Time.base,
      &protobuf_vector3d_2eproto::scc_info_Vector3d.base,
      &protobuf_quaternion_2eproto::scc_info_Quaternion.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Dvl.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ds_sim::msgs::Dvl, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ds_sim::msgs::Dvl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ds_sim::msgs::Dvl, stamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ds_sim::msgs::Dvl, linear_velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ds_sim::msgs::Dvl, ranges_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ds_sim::msgs::Dvl, range_velocities_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ds_sim::msgs::Dvl, num_beams_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ds_sim::msgs::Dvl, unit_vectors_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ds_sim::msgs::Dvl, orientation_),
  0,
  1,
  ~0u,
  ~0u,
  3,
  ~0u,
  2,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, sizeof(::ds_sim::msgs::Dvl)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::ds_sim::msgs::_Dvl_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "SensorDvl.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\017SensorDvl.proto\022\013ds_sim.msgs\032\ntime.pro"
      "to\032\016vector3d.proto\032\020quaternion.proto\"\357\001\n"
      "\003Dvl\022 \n\005stamp\030\001 \002(\0132\021.gazebo.msgs.Time\022."
      "\n\017linear_velocity\030\002 \002(\0132\025.gazebo.msgs.Ve"
      "ctor3d\022\016\n\006ranges\030\003 \003(\001\022\030\n\020range_velociti"
      "es\030\004 \003(\001\022\021\n\tnum_beams\030\005 \002(\005\022+\n\014unit_vect"
      "ors\030\006 \003(\0132\025.gazebo.msgs.Vector3d\022,\n\013orie"
      "ntation\030\007 \001(\0132\027.gazebo.msgs.Quaternion"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 318);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SensorDvl.proto", &protobuf_RegisterTypes);
  ::protobuf_time_2eproto::AddDescriptors();
  ::protobuf_vector3d_2eproto::AddDescriptors();
  ::protobuf_quaternion_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_SensorDvl_2eproto
namespace ds_sim {
namespace msgs {

// ===================================================================

void Dvl::InitAsDefaultInstance() {
  ::ds_sim::msgs::_Dvl_default_instance_._instance.get_mutable()->stamp_ = const_cast< ::gazebo::msgs::Time*>(
      ::gazebo::msgs::Time::internal_default_instance());
  ::ds_sim::msgs::_Dvl_default_instance_._instance.get_mutable()->linear_velocity_ = const_cast< ::gazebo::msgs::Vector3d*>(
      ::gazebo::msgs::Vector3d::internal_default_instance());
  ::ds_sim::msgs::_Dvl_default_instance_._instance.get_mutable()->orientation_ = const_cast< ::gazebo::msgs::Quaternion*>(
      ::gazebo::msgs::Quaternion::internal_default_instance());
}
void Dvl::clear_stamp() {
  if (stamp_ != NULL) stamp_->Clear();
  clear_has_stamp();
}
void Dvl::clear_linear_velocity() {
  if (linear_velocity_ != NULL) linear_velocity_->Clear();
  clear_has_linear_velocity();
}
void Dvl::clear_unit_vectors() {
  unit_vectors_.Clear();
}
void Dvl::clear_orientation() {
  if (orientation_ != NULL) orientation_->Clear();
  clear_has_orientation();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Dvl::kStampFieldNumber;
const int Dvl::kLinearVelocityFieldNumber;
const int Dvl::kRangesFieldNumber;
const int Dvl::kRangeVelocitiesFieldNumber;
const int Dvl::kNumBeamsFieldNumber;
const int Dvl::kUnitVectorsFieldNumber;
const int Dvl::kOrientationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Dvl::Dvl()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_SensorDvl_2eproto::scc_info_Dvl.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ds_sim.msgs.Dvl)
}
Dvl::Dvl(const Dvl& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      ranges_(from.ranges_),
      range_velocities_(from.range_velocities_),
      unit_vectors_(from.unit_vectors_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_stamp()) {
    stamp_ = new ::gazebo::msgs::Time(*from.stamp_);
  } else {
    stamp_ = NULL;
  }
  if (from.has_linear_velocity()) {
    linear_velocity_ = new ::gazebo::msgs::Vector3d(*from.linear_velocity_);
  } else {
    linear_velocity_ = NULL;
  }
  if (from.has_orientation()) {
    orientation_ = new ::gazebo::msgs::Quaternion(*from.orientation_);
  } else {
    orientation_ = NULL;
  }
  num_beams_ = from.num_beams_;
  // @@protoc_insertion_point(copy_constructor:ds_sim.msgs.Dvl)
}

void Dvl::SharedCtor() {
  ::memset(&stamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_beams_) -
      reinterpret_cast<char*>(&stamp_)) + sizeof(num_beams_));
}

Dvl::~Dvl() {
  // @@protoc_insertion_point(destructor:ds_sim.msgs.Dvl)
  SharedDtor();
}

void Dvl::SharedDtor() {
  if (this != internal_default_instance()) delete stamp_;
  if (this != internal_default_instance()) delete linear_velocity_;
  if (this != internal_default_instance()) delete orientation_;
}

void Dvl::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Dvl::descriptor() {
  ::protobuf_SensorDvl_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_SensorDvl_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Dvl& Dvl::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_SensorDvl_2eproto::scc_info_Dvl.base);
  return *internal_default_instance();
}


void Dvl::Clear() {
// @@protoc_insertion_point(message_clear_start:ds_sim.msgs.Dvl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ranges_.Clear();
  range_velocities_.Clear();
  unit_vectors_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(stamp_ != NULL);
      stamp_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(linear_velocity_ != NULL);
      linear_velocity_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(orientation_ != NULL);
      orientation_->Clear();
    }
  }
  num_beams_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Dvl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ds_sim.msgs.Dvl)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gazebo.msgs.Time stamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .gazebo.msgs.Vector3d linear_velocity = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_linear_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double ranges = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 25u, input, this->mutable_ranges())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_ranges())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double range_velocities = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 33u, input, this->mutable_range_velocities())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_range_velocities())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 num_beams = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_num_beams();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_beams_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .gazebo.msgs.Vector3d unit_vectors = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_unit_vectors()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gazebo.msgs.Quaternion orientation = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_orientation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ds_sim.msgs.Dvl)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ds_sim.msgs.Dvl)
  return false;
#undef DO_
}

void Dvl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ds_sim.msgs.Dvl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .gazebo.msgs.Time stamp = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_stamp(), output);
  }

  // required .gazebo.msgs.Vector3d linear_velocity = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_linear_velocity(), output);
  }

  // repeated double ranges = 3;
  for (int i = 0, n = this->ranges_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      3, this->ranges(i), output);
  }

  // repeated double range_velocities = 4;
  for (int i = 0, n = this->range_velocities_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      4, this->range_velocities(i), output);
  }

  // required int32 num_beams = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->num_beams(), output);
  }

  // repeated .gazebo.msgs.Vector3d unit_vectors = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->unit_vectors_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->unit_vectors(static_cast<int>(i)),
      output);
  }

  // optional .gazebo.msgs.Quaternion orientation = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_orientation(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ds_sim.msgs.Dvl)
}

::google::protobuf::uint8* Dvl::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ds_sim.msgs.Dvl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .gazebo.msgs.Time stamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_stamp(), deterministic, target);
  }

  // required .gazebo.msgs.Vector3d linear_velocity = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_linear_velocity(), deterministic, target);
  }

  // repeated double ranges = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(3, this->ranges_, target);

  // repeated double range_velocities = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(4, this->range_velocities_, target);

  // required int32 num_beams = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->num_beams(), target);
  }

  // repeated .gazebo.msgs.Vector3d unit_vectors = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->unit_vectors_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->unit_vectors(static_cast<int>(i)), deterministic, target);
  }

  // optional .gazebo.msgs.Quaternion orientation = 7;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_orientation(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ds_sim.msgs.Dvl)
  return target;
}

size_t Dvl::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ds_sim.msgs.Dvl)
  size_t total_size = 0;

  if (has_stamp()) {
    // required .gazebo.msgs.Time stamp = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *stamp_);
  }

  if (has_linear_velocity()) {
    // required .gazebo.msgs.Vector3d linear_velocity = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *linear_velocity_);
  }

  if (has_num_beams()) {
    // required int32 num_beams = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_beams());
  }

  return total_size;
}
size_t Dvl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ds_sim.msgs.Dvl)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000b) ^ 0x0000000b) == 0) {  // All required fields are present.
    // required .gazebo.msgs.Time stamp = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *stamp_);

    // required .gazebo.msgs.Vector3d linear_velocity = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *linear_velocity_);

    // required int32 num_beams = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_beams());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated double ranges = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->ranges_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->ranges_size());
    total_size += data_size;
  }

  // repeated double range_velocities = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->range_velocities_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->range_velocities_size());
    total_size += data_size;
  }

  // repeated .gazebo.msgs.Vector3d unit_vectors = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->unit_vectors_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->unit_vectors(static_cast<int>(i)));
    }
  }

  // optional .gazebo.msgs.Quaternion orientation = 7;
  if (has_orientation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *orientation_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Dvl::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ds_sim.msgs.Dvl)
  GOOGLE_DCHECK_NE(&from, this);
  const Dvl* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Dvl>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ds_sim.msgs.Dvl)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ds_sim.msgs.Dvl)
    MergeFrom(*source);
  }
}

void Dvl::MergeFrom(const Dvl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ds_sim.msgs.Dvl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ranges_.MergeFrom(from.ranges_);
  range_velocities_.MergeFrom(from.range_velocities_);
  unit_vectors_.MergeFrom(from.unit_vectors_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_stamp()->::gazebo::msgs::Time::MergeFrom(from.stamp());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_linear_velocity()->::gazebo::msgs::Vector3d::MergeFrom(from.linear_velocity());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_orientation()->::gazebo::msgs::Quaternion::MergeFrom(from.orientation());
    }
    if (cached_has_bits & 0x00000008u) {
      num_beams_ = from.num_beams_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Dvl::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ds_sim.msgs.Dvl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dvl::CopyFrom(const Dvl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ds_sim.msgs.Dvl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dvl::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->unit_vectors())) return false;
  if (has_stamp()) {
    if (!this->stamp_->IsInitialized()) return false;
  }
  if (has_linear_velocity()) {
    if (!this->linear_velocity_->IsInitialized()) return false;
  }
  if (has_orientation()) {
    if (!this->orientation_->IsInitialized()) return false;
  }
  return true;
}

void Dvl::Swap(Dvl* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Dvl::InternalSwap(Dvl* other) {
  using std::swap;
  ranges_.InternalSwap(&other->ranges_);
  range_velocities_.InternalSwap(&other->range_velocities_);
  CastToBase(&unit_vectors_)->InternalSwap(CastToBase(&other->unit_vectors_));
  swap(stamp_, other->stamp_);
  swap(linear_velocity_, other->linear_velocity_);
  swap(orientation_, other->orientation_);
  swap(num_beams_, other->num_beams_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Dvl::GetMetadata() const {
  protobuf_SensorDvl_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_SensorDvl_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msgs
}  // namespace ds_sim
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ds_sim::msgs::Dvl* Arena::CreateMaybeMessage< ::ds_sim::msgs::Dvl >(Arena* arena) {
  return Arena::CreateInternal< ::ds_sim::msgs::Dvl >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
