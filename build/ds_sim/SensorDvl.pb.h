// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SensorDvl.proto

#ifndef PROTOBUF_INCLUDED_SensorDvl_2eproto
#define PROTOBUF_INCLUDED_SensorDvl_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "time.pb.h"
#include "vector3d.pb.h"
#include "quaternion.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_SensorDvl_2eproto 

namespace protobuf_SensorDvl_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_SensorDvl_2eproto
namespace ds_sim {
namespace msgs {
class Dvl;
class DvlDefaultTypeInternal;
extern DvlDefaultTypeInternal _Dvl_default_instance_;
}  // namespace msgs
}  // namespace ds_sim
namespace google {
namespace protobuf {
template<> ::ds_sim::msgs::Dvl* Arena::CreateMaybeMessage<::ds_sim::msgs::Dvl>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace ds_sim {
namespace msgs {

// ===================================================================

class Dvl : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ds_sim.msgs.Dvl) */ {
 public:
  Dvl();
  virtual ~Dvl();

  Dvl(const Dvl& from);

  inline Dvl& operator=(const Dvl& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Dvl(Dvl&& from) noexcept
    : Dvl() {
    *this = ::std::move(from);
  }

  inline Dvl& operator=(Dvl&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Dvl& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Dvl* internal_default_instance() {
    return reinterpret_cast<const Dvl*>(
               &_Dvl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Dvl* other);
  friend void swap(Dvl& a, Dvl& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Dvl* New() const final {
    return CreateMaybeMessage<Dvl>(NULL);
  }

  Dvl* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Dvl>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Dvl& from);
  void MergeFrom(const Dvl& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Dvl* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double ranges = 3;
  int ranges_size() const;
  void clear_ranges();
  static const int kRangesFieldNumber = 3;
  double ranges(int index) const;
  void set_ranges(int index, double value);
  void add_ranges(double value);
  const ::google::protobuf::RepeatedField< double >&
      ranges() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_ranges();

  // repeated double range_velocities = 4;
  int range_velocities_size() const;
  void clear_range_velocities();
  static const int kRangeVelocitiesFieldNumber = 4;
  double range_velocities(int index) const;
  void set_range_velocities(int index, double value);
  void add_range_velocities(double value);
  const ::google::protobuf::RepeatedField< double >&
      range_velocities() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_range_velocities();

  // repeated .gazebo.msgs.Vector3d unit_vectors = 6;
  int unit_vectors_size() const;
  void clear_unit_vectors();
  static const int kUnitVectorsFieldNumber = 6;
  ::gazebo::msgs::Vector3d* mutable_unit_vectors(int index);
  ::google::protobuf::RepeatedPtrField< ::gazebo::msgs::Vector3d >*
      mutable_unit_vectors();
  const ::gazebo::msgs::Vector3d& unit_vectors(int index) const;
  ::gazebo::msgs::Vector3d* add_unit_vectors();
  const ::google::protobuf::RepeatedPtrField< ::gazebo::msgs::Vector3d >&
      unit_vectors() const;

  // required .gazebo.msgs.Time stamp = 1;
  bool has_stamp() const;
  void clear_stamp();
  static const int kStampFieldNumber = 1;
  private:
  const ::gazebo::msgs::Time& _internal_stamp() const;
  public:
  const ::gazebo::msgs::Time& stamp() const;
  ::gazebo::msgs::Time* release_stamp();
  ::gazebo::msgs::Time* mutable_stamp();
  void set_allocated_stamp(::gazebo::msgs::Time* stamp);

  // required .gazebo.msgs.Vector3d linear_velocity = 2;
  bool has_linear_velocity() const;
  void clear_linear_velocity();
  static const int kLinearVelocityFieldNumber = 2;
  private:
  const ::gazebo::msgs::Vector3d& _internal_linear_velocity() const;
  public:
  const ::gazebo::msgs::Vector3d& linear_velocity() const;
  ::gazebo::msgs::Vector3d* release_linear_velocity();
  ::gazebo::msgs::Vector3d* mutable_linear_velocity();
  void set_allocated_linear_velocity(::gazebo::msgs::Vector3d* linear_velocity);

  // optional .gazebo.msgs.Quaternion orientation = 7;
  bool has_orientation() const;
  void clear_orientation();
  static const int kOrientationFieldNumber = 7;
  private:
  const ::gazebo::msgs::Quaternion& _internal_orientation() const;
  public:
  const ::gazebo::msgs::Quaternion& orientation() const;
  ::gazebo::msgs::Quaternion* release_orientation();
  ::gazebo::msgs::Quaternion* mutable_orientation();
  void set_allocated_orientation(::gazebo::msgs::Quaternion* orientation);

  // required int32 num_beams = 5;
  bool has_num_beams() const;
  void clear_num_beams();
  static const int kNumBeamsFieldNumber = 5;
  ::google::protobuf::int32 num_beams() const;
  void set_num_beams(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ds_sim.msgs.Dvl)
 private:
  void set_has_stamp();
  void clear_has_stamp();
  void set_has_linear_velocity();
  void clear_has_linear_velocity();
  void set_has_num_beams();
  void clear_has_num_beams();
  void set_has_orientation();
  void clear_has_orientation();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< double > ranges_;
  ::google::protobuf::RepeatedField< double > range_velocities_;
  ::google::protobuf::RepeatedPtrField< ::gazebo::msgs::Vector3d > unit_vectors_;
  ::gazebo::msgs::Time* stamp_;
  ::gazebo::msgs::Vector3d* linear_velocity_;
  ::gazebo::msgs::Quaternion* orientation_;
  ::google::protobuf::int32 num_beams_;
  friend struct ::protobuf_SensorDvl_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Dvl

// required .gazebo.msgs.Time stamp = 1;
inline bool Dvl::has_stamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Dvl::set_has_stamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Dvl::clear_has_stamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::gazebo::msgs::Time& Dvl::_internal_stamp() const {
  return *stamp_;
}
inline const ::gazebo::msgs::Time& Dvl::stamp() const {
  const ::gazebo::msgs::Time* p = stamp_;
  // @@protoc_insertion_point(field_get:ds_sim.msgs.Dvl.stamp)
  return p != NULL ? *p : *reinterpret_cast<const ::gazebo::msgs::Time*>(
      &::gazebo::msgs::_Time_default_instance_);
}
inline ::gazebo::msgs::Time* Dvl::release_stamp() {
  // @@protoc_insertion_point(field_release:ds_sim.msgs.Dvl.stamp)
  clear_has_stamp();
  ::gazebo::msgs::Time* temp = stamp_;
  stamp_ = NULL;
  return temp;
}
inline ::gazebo::msgs::Time* Dvl::mutable_stamp() {
  set_has_stamp();
  if (stamp_ == NULL) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::Time>(GetArenaNoVirtual());
    stamp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ds_sim.msgs.Dvl.stamp)
  return stamp_;
}
inline void Dvl::set_allocated_stamp(::gazebo::msgs::Time* stamp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(stamp_);
  }
  if (stamp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      stamp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, stamp, submessage_arena);
    }
    set_has_stamp();
  } else {
    clear_has_stamp();
  }
  stamp_ = stamp;
  // @@protoc_insertion_point(field_set_allocated:ds_sim.msgs.Dvl.stamp)
}

// required .gazebo.msgs.Vector3d linear_velocity = 2;
inline bool Dvl::has_linear_velocity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Dvl::set_has_linear_velocity() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Dvl::clear_has_linear_velocity() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::gazebo::msgs::Vector3d& Dvl::_internal_linear_velocity() const {
  return *linear_velocity_;
}
inline const ::gazebo::msgs::Vector3d& Dvl::linear_velocity() const {
  const ::gazebo::msgs::Vector3d* p = linear_velocity_;
  // @@protoc_insertion_point(field_get:ds_sim.msgs.Dvl.linear_velocity)
  return p != NULL ? *p : *reinterpret_cast<const ::gazebo::msgs::Vector3d*>(
      &::gazebo::msgs::_Vector3d_default_instance_);
}
inline ::gazebo::msgs::Vector3d* Dvl::release_linear_velocity() {
  // @@protoc_insertion_point(field_release:ds_sim.msgs.Dvl.linear_velocity)
  clear_has_linear_velocity();
  ::gazebo::msgs::Vector3d* temp = linear_velocity_;
  linear_velocity_ = NULL;
  return temp;
}
inline ::gazebo::msgs::Vector3d* Dvl::mutable_linear_velocity() {
  set_has_linear_velocity();
  if (linear_velocity_ == NULL) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::Vector3d>(GetArenaNoVirtual());
    linear_velocity_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ds_sim.msgs.Dvl.linear_velocity)
  return linear_velocity_;
}
inline void Dvl::set_allocated_linear_velocity(::gazebo::msgs::Vector3d* linear_velocity) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(linear_velocity_);
  }
  if (linear_velocity) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      linear_velocity = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, linear_velocity, submessage_arena);
    }
    set_has_linear_velocity();
  } else {
    clear_has_linear_velocity();
  }
  linear_velocity_ = linear_velocity;
  // @@protoc_insertion_point(field_set_allocated:ds_sim.msgs.Dvl.linear_velocity)
}

// repeated double ranges = 3;
inline int Dvl::ranges_size() const {
  return ranges_.size();
}
inline void Dvl::clear_ranges() {
  ranges_.Clear();
}
inline double Dvl::ranges(int index) const {
  // @@protoc_insertion_point(field_get:ds_sim.msgs.Dvl.ranges)
  return ranges_.Get(index);
}
inline void Dvl::set_ranges(int index, double value) {
  ranges_.Set(index, value);
  // @@protoc_insertion_point(field_set:ds_sim.msgs.Dvl.ranges)
}
inline void Dvl::add_ranges(double value) {
  ranges_.Add(value);
  // @@protoc_insertion_point(field_add:ds_sim.msgs.Dvl.ranges)
}
inline const ::google::protobuf::RepeatedField< double >&
Dvl::ranges() const {
  // @@protoc_insertion_point(field_list:ds_sim.msgs.Dvl.ranges)
  return ranges_;
}
inline ::google::protobuf::RepeatedField< double >*
Dvl::mutable_ranges() {
  // @@protoc_insertion_point(field_mutable_list:ds_sim.msgs.Dvl.ranges)
  return &ranges_;
}

// repeated double range_velocities = 4;
inline int Dvl::range_velocities_size() const {
  return range_velocities_.size();
}
inline void Dvl::clear_range_velocities() {
  range_velocities_.Clear();
}
inline double Dvl::range_velocities(int index) const {
  // @@protoc_insertion_point(field_get:ds_sim.msgs.Dvl.range_velocities)
  return range_velocities_.Get(index);
}
inline void Dvl::set_range_velocities(int index, double value) {
  range_velocities_.Set(index, value);
  // @@protoc_insertion_point(field_set:ds_sim.msgs.Dvl.range_velocities)
}
inline void Dvl::add_range_velocities(double value) {
  range_velocities_.Add(value);
  // @@protoc_insertion_point(field_add:ds_sim.msgs.Dvl.range_velocities)
}
inline const ::google::protobuf::RepeatedField< double >&
Dvl::range_velocities() const {
  // @@protoc_insertion_point(field_list:ds_sim.msgs.Dvl.range_velocities)
  return range_velocities_;
}
inline ::google::protobuf::RepeatedField< double >*
Dvl::mutable_range_velocities() {
  // @@protoc_insertion_point(field_mutable_list:ds_sim.msgs.Dvl.range_velocities)
  return &range_velocities_;
}

// required int32 num_beams = 5;
inline bool Dvl::has_num_beams() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Dvl::set_has_num_beams() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Dvl::clear_has_num_beams() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Dvl::clear_num_beams() {
  num_beams_ = 0;
  clear_has_num_beams();
}
inline ::google::protobuf::int32 Dvl::num_beams() const {
  // @@protoc_insertion_point(field_get:ds_sim.msgs.Dvl.num_beams)
  return num_beams_;
}
inline void Dvl::set_num_beams(::google::protobuf::int32 value) {
  set_has_num_beams();
  num_beams_ = value;
  // @@protoc_insertion_point(field_set:ds_sim.msgs.Dvl.num_beams)
}

// repeated .gazebo.msgs.Vector3d unit_vectors = 6;
inline int Dvl::unit_vectors_size() const {
  return unit_vectors_.size();
}
inline ::gazebo::msgs::Vector3d* Dvl::mutable_unit_vectors(int index) {
  // @@protoc_insertion_point(field_mutable:ds_sim.msgs.Dvl.unit_vectors)
  return unit_vectors_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::gazebo::msgs::Vector3d >*
Dvl::mutable_unit_vectors() {
  // @@protoc_insertion_point(field_mutable_list:ds_sim.msgs.Dvl.unit_vectors)
  return &unit_vectors_;
}
inline const ::gazebo::msgs::Vector3d& Dvl::unit_vectors(int index) const {
  // @@protoc_insertion_point(field_get:ds_sim.msgs.Dvl.unit_vectors)
  return unit_vectors_.Get(index);
}
inline ::gazebo::msgs::Vector3d* Dvl::add_unit_vectors() {
  // @@protoc_insertion_point(field_add:ds_sim.msgs.Dvl.unit_vectors)
  return unit_vectors_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::gazebo::msgs::Vector3d >&
Dvl::unit_vectors() const {
  // @@protoc_insertion_point(field_list:ds_sim.msgs.Dvl.unit_vectors)
  return unit_vectors_;
}

// optional .gazebo.msgs.Quaternion orientation = 7;
inline bool Dvl::has_orientation() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Dvl::set_has_orientation() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Dvl::clear_has_orientation() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::gazebo::msgs::Quaternion& Dvl::_internal_orientation() const {
  return *orientation_;
}
inline const ::gazebo::msgs::Quaternion& Dvl::orientation() const {
  const ::gazebo::msgs::Quaternion* p = orientation_;
  // @@protoc_insertion_point(field_get:ds_sim.msgs.Dvl.orientation)
  return p != NULL ? *p : *reinterpret_cast<const ::gazebo::msgs::Quaternion*>(
      &::gazebo::msgs::_Quaternion_default_instance_);
}
inline ::gazebo::msgs::Quaternion* Dvl::release_orientation() {
  // @@protoc_insertion_point(field_release:ds_sim.msgs.Dvl.orientation)
  clear_has_orientation();
  ::gazebo::msgs::Quaternion* temp = orientation_;
  orientation_ = NULL;
  return temp;
}
inline ::gazebo::msgs::Quaternion* Dvl::mutable_orientation() {
  set_has_orientation();
  if (orientation_ == NULL) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::Quaternion>(GetArenaNoVirtual());
    orientation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ds_sim.msgs.Dvl.orientation)
  return orientation_;
}
inline void Dvl::set_allocated_orientation(::gazebo::msgs::Quaternion* orientation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(orientation_);
  }
  if (orientation) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      orientation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    set_has_orientation();
  } else {
    clear_has_orientation();
  }
  orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:ds_sim.msgs.Dvl.orientation)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace ds_sim

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_SensorDvl_2eproto
