// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SensorIns.proto

#include "SensorIns.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_quaternion_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_quaternion_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Quaternion;
}  // namespace protobuf_quaternion_2eproto
namespace protobuf_time_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_time_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Time;
}  // namespace protobuf_time_2eproto
namespace protobuf_vector3d_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_vector3d_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Vector3d;
}  // namespace protobuf_vector3d_2eproto
namespace ds_sim {
namespace msgs {
class InsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Ins>
      _instance;
} _Ins_default_instance_;
}  // namespace msgs
}  // namespace ds_sim
namespace protobuf_SensorIns_2eproto {
static void InitDefaultsIns() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ds_sim::msgs::_Ins_default_instance_;
    new (ptr) ::ds_sim::msgs::Ins();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ds_sim::msgs::Ins::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_Ins =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsIns}, {
      &protobuf_time_2eproto::scc_info_Time.base,
      &protobuf_quaternion_2eproto::scc_info_Quaternion.base,
      &protobuf_vector3d_2eproto::scc_info_Vector3d.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Ins.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ds_sim::msgs::Ins, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ds_sim::msgs::Ins, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ds_sim::msgs::Ins, stamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ds_sim::msgs::Ins, entity_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ds_sim::msgs::Ins, roll_deg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ds_sim::msgs::Ins, pitch_deg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ds_sim::msgs::Ins, heading_deg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ds_sim::msgs::Ins, orientation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ds_sim::msgs::Ins, angular_velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ds_sim::msgs::Ins, linear_velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ds_sim::msgs::Ins, heave_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ds_sim::msgs::Ins, latitude_deg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ds_sim::msgs::Ins, longitude_deg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ds_sim::msgs::Ins, altitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ds_sim::msgs::Ins, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ds_sim::msgs::Ins, linear_accel_),
  1,
  0,
  7,
  8,
  9,
  2,
  3,
  4,
  10,
  11,
  12,
  13,
  5,
  6,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 19, sizeof(::ds_sim::msgs::Ins)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::ds_sim::msgs::_Ins_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "SensorIns.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\017SensorIns.proto\022\013ds_sim.msgs\032\ntime.pro"
      "to\032\016vector3d.proto\032\020quaternion.proto\"\251\003\n"
      "\003Ins\022 \n\005stamp\030\001 \002(\0132\021.gazebo.msgs.Time\022\023"
      "\n\013entity_name\030\002 \002(\t\022\020\n\010roll_deg\030\003 \002(\001\022\021\n"
      "\tpitch_deg\030\004 \002(\001\022\023\n\013heading_deg\030\005 \002(\001\022,\n"
      "\013orientation\030\006 \002(\0132\027.gazebo.msgs.Quatern"
      "ion\022/\n\020angular_velocity\030\007 \002(\0132\025.gazebo.m"
      "sgs.Vector3d\022.\n\017linear_velocity\030\010 \002(\0132\025."
      "gazebo.msgs.Vector3d\022\r\n\005heave\030\t \001(\001\022\024\n\014l"
      "atitude_deg\030\n \001(\001\022\025\n\rlongitude_deg\030\013 \001(\001"
      "\022\020\n\010altitude\030\014 \001(\001\022\'\n\010position\030\r \001(\0132\025.g"
      "azebo.msgs.Vector3d\022+\n\014linear_accel\030\016 \001("
      "\0132\025.gazebo.msgs.Vector3d"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 504);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SensorIns.proto", &protobuf_RegisterTypes);
  ::protobuf_time_2eproto::AddDescriptors();
  ::protobuf_vector3d_2eproto::AddDescriptors();
  ::protobuf_quaternion_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_SensorIns_2eproto
namespace ds_sim {
namespace msgs {

// ===================================================================

void Ins::InitAsDefaultInstance() {
  ::ds_sim::msgs::_Ins_default_instance_._instance.get_mutable()->stamp_ = const_cast< ::gazebo::msgs::Time*>(
      ::gazebo::msgs::Time::internal_default_instance());
  ::ds_sim::msgs::_Ins_default_instance_._instance.get_mutable()->orientation_ = const_cast< ::gazebo::msgs::Quaternion*>(
      ::gazebo::msgs::Quaternion::internal_default_instance());
  ::ds_sim::msgs::_Ins_default_instance_._instance.get_mutable()->angular_velocity_ = const_cast< ::gazebo::msgs::Vector3d*>(
      ::gazebo::msgs::Vector3d::internal_default_instance());
  ::ds_sim::msgs::_Ins_default_instance_._instance.get_mutable()->linear_velocity_ = const_cast< ::gazebo::msgs::Vector3d*>(
      ::gazebo::msgs::Vector3d::internal_default_instance());
  ::ds_sim::msgs::_Ins_default_instance_._instance.get_mutable()->position_ = const_cast< ::gazebo::msgs::Vector3d*>(
      ::gazebo::msgs::Vector3d::internal_default_instance());
  ::ds_sim::msgs::_Ins_default_instance_._instance.get_mutable()->linear_accel_ = const_cast< ::gazebo::msgs::Vector3d*>(
      ::gazebo::msgs::Vector3d::internal_default_instance());
}
void Ins::clear_stamp() {
  if (stamp_ != NULL) stamp_->Clear();
  clear_has_stamp();
}
void Ins::clear_orientation() {
  if (orientation_ != NULL) orientation_->Clear();
  clear_has_orientation();
}
void Ins::clear_angular_velocity() {
  if (angular_velocity_ != NULL) angular_velocity_->Clear();
  clear_has_angular_velocity();
}
void Ins::clear_linear_velocity() {
  if (linear_velocity_ != NULL) linear_velocity_->Clear();
  clear_has_linear_velocity();
}
void Ins::clear_position() {
  if (position_ != NULL) position_->Clear();
  clear_has_position();
}
void Ins::clear_linear_accel() {
  if (linear_accel_ != NULL) linear_accel_->Clear();
  clear_has_linear_accel();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ins::kStampFieldNumber;
const int Ins::kEntityNameFieldNumber;
const int Ins::kRollDegFieldNumber;
const int Ins::kPitchDegFieldNumber;
const int Ins::kHeadingDegFieldNumber;
const int Ins::kOrientationFieldNumber;
const int Ins::kAngularVelocityFieldNumber;
const int Ins::kLinearVelocityFieldNumber;
const int Ins::kHeaveFieldNumber;
const int Ins::kLatitudeDegFieldNumber;
const int Ins::kLongitudeDegFieldNumber;
const int Ins::kAltitudeFieldNumber;
const int Ins::kPositionFieldNumber;
const int Ins::kLinearAccelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ins::Ins()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_SensorIns_2eproto::scc_info_Ins.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ds_sim.msgs.Ins)
}
Ins::Ins(const Ins& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  entity_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_entity_name()) {
    entity_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.entity_name_);
  }
  if (from.has_stamp()) {
    stamp_ = new ::gazebo::msgs::Time(*from.stamp_);
  } else {
    stamp_ = NULL;
  }
  if (from.has_orientation()) {
    orientation_ = new ::gazebo::msgs::Quaternion(*from.orientation_);
  } else {
    orientation_ = NULL;
  }
  if (from.has_angular_velocity()) {
    angular_velocity_ = new ::gazebo::msgs::Vector3d(*from.angular_velocity_);
  } else {
    angular_velocity_ = NULL;
  }
  if (from.has_linear_velocity()) {
    linear_velocity_ = new ::gazebo::msgs::Vector3d(*from.linear_velocity_);
  } else {
    linear_velocity_ = NULL;
  }
  if (from.has_position()) {
    position_ = new ::gazebo::msgs::Vector3d(*from.position_);
  } else {
    position_ = NULL;
  }
  if (from.has_linear_accel()) {
    linear_accel_ = new ::gazebo::msgs::Vector3d(*from.linear_accel_);
  } else {
    linear_accel_ = NULL;
  }
  ::memcpy(&roll_deg_, &from.roll_deg_,
    static_cast<size_t>(reinterpret_cast<char*>(&altitude_) -
    reinterpret_cast<char*>(&roll_deg_)) + sizeof(altitude_));
  // @@protoc_insertion_point(copy_constructor:ds_sim.msgs.Ins)
}

void Ins::SharedCtor() {
  entity_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&stamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&altitude_) -
      reinterpret_cast<char*>(&stamp_)) + sizeof(altitude_));
}

Ins::~Ins() {
  // @@protoc_insertion_point(destructor:ds_sim.msgs.Ins)
  SharedDtor();
}

void Ins::SharedDtor() {
  entity_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete stamp_;
  if (this != internal_default_instance()) delete orientation_;
  if (this != internal_default_instance()) delete angular_velocity_;
  if (this != internal_default_instance()) delete linear_velocity_;
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete linear_accel_;
}

void Ins::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Ins::descriptor() {
  ::protobuf_SensorIns_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_SensorIns_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ins& Ins::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_SensorIns_2eproto::scc_info_Ins.base);
  return *internal_default_instance();
}


void Ins::Clear() {
// @@protoc_insertion_point(message_clear_start:ds_sim.msgs.Ins)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      entity_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(stamp_ != NULL);
      stamp_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(orientation_ != NULL);
      orientation_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(angular_velocity_ != NULL);
      angular_velocity_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(linear_velocity_ != NULL);
      linear_velocity_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(position_ != NULL);
      position_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(linear_accel_ != NULL);
      linear_accel_->Clear();
    }
  }
  roll_deg_ = 0;
  if (cached_has_bits & 16128u) {
    ::memset(&pitch_deg_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&altitude_) -
        reinterpret_cast<char*>(&pitch_deg_)) + sizeof(altitude_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Ins::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ds_sim.msgs.Ins)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gazebo.msgs.Time stamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string entity_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_entity_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->entity_name().data(), static_cast<int>(this->entity_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ds_sim.msgs.Ins.entity_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double roll_deg = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_roll_deg();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &roll_deg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double pitch_deg = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_pitch_deg();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pitch_deg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double heading_deg = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_heading_deg();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_deg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .gazebo.msgs.Quaternion orientation = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_orientation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .gazebo.msgs.Vector3d angular_velocity = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_angular_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .gazebo.msgs.Vector3d linear_velocity = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_linear_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double heave = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {
          set_has_heave();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heave_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double latitude_deg = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {
          set_has_latitude_deg();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_deg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double longitude_deg = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {
          set_has_longitude_deg();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_deg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double altitude = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 97 & 0xFF */)) {
          set_has_altitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &altitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gazebo.msgs.Vector3d position = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gazebo.msgs.Vector3d linear_accel = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_linear_accel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ds_sim.msgs.Ins)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ds_sim.msgs.Ins)
  return false;
#undef DO_
}

void Ins::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ds_sim.msgs.Ins)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .gazebo.msgs.Time stamp = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_stamp(), output);
  }

  // required string entity_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->entity_name().data(), static_cast<int>(this->entity_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ds_sim.msgs.Ins.entity_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->entity_name(), output);
  }

  // required double roll_deg = 3;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->roll_deg(), output);
  }

  // required double pitch_deg = 4;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->pitch_deg(), output);
  }

  // required double heading_deg = 5;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->heading_deg(), output);
  }

  // required .gazebo.msgs.Quaternion orientation = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_orientation(), output);
  }

  // required .gazebo.msgs.Vector3d angular_velocity = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_angular_velocity(), output);
  }

  // required .gazebo.msgs.Vector3d linear_velocity = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_linear_velocity(), output);
  }

  // optional double heave = 9;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->heave(), output);
  }

  // optional double latitude_deg = 10;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->latitude_deg(), output);
  }

  // optional double longitude_deg = 11;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->longitude_deg(), output);
  }

  // optional double altitude = 12;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->altitude(), output);
  }

  // optional .gazebo.msgs.Vector3d position = 13;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->_internal_position(), output);
  }

  // optional .gazebo.msgs.Vector3d linear_accel = 14;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->_internal_linear_accel(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ds_sim.msgs.Ins)
}

::google::protobuf::uint8* Ins::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ds_sim.msgs.Ins)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .gazebo.msgs.Time stamp = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_stamp(), deterministic, target);
  }

  // required string entity_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->entity_name().data(), static_cast<int>(this->entity_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ds_sim.msgs.Ins.entity_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->entity_name(), target);
  }

  // required double roll_deg = 3;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->roll_deg(), target);
  }

  // required double pitch_deg = 4;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->pitch_deg(), target);
  }

  // required double heading_deg = 5;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->heading_deg(), target);
  }

  // required .gazebo.msgs.Quaternion orientation = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_orientation(), deterministic, target);
  }

  // required .gazebo.msgs.Vector3d angular_velocity = 7;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_angular_velocity(), deterministic, target);
  }

  // required .gazebo.msgs.Vector3d linear_velocity = 8;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_linear_velocity(), deterministic, target);
  }

  // optional double heave = 9;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->heave(), target);
  }

  // optional double latitude_deg = 10;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->latitude_deg(), target);
  }

  // optional double longitude_deg = 11;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->longitude_deg(), target);
  }

  // optional double altitude = 12;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->altitude(), target);
  }

  // optional .gazebo.msgs.Vector3d position = 13;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->_internal_position(), deterministic, target);
  }

  // optional .gazebo.msgs.Vector3d linear_accel = 14;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, this->_internal_linear_accel(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ds_sim.msgs.Ins)
  return target;
}

size_t Ins::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ds_sim.msgs.Ins)
  size_t total_size = 0;

  if (has_entity_name()) {
    // required string entity_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->entity_name());
  }

  if (has_stamp()) {
    // required .gazebo.msgs.Time stamp = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *stamp_);
  }

  if (has_orientation()) {
    // required .gazebo.msgs.Quaternion orientation = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *orientation_);
  }

  if (has_angular_velocity()) {
    // required .gazebo.msgs.Vector3d angular_velocity = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *angular_velocity_);
  }

  if (has_linear_velocity()) {
    // required .gazebo.msgs.Vector3d linear_velocity = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *linear_velocity_);
  }

  if (has_roll_deg()) {
    // required double roll_deg = 3;
    total_size += 1 + 8;
  }

  if (has_pitch_deg()) {
    // required double pitch_deg = 4;
    total_size += 1 + 8;
  }

  if (has_heading_deg()) {
    // required double heading_deg = 5;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t Ins::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ds_sim.msgs.Ins)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000039f) ^ 0x0000039f) == 0) {  // All required fields are present.
    // required string entity_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->entity_name());

    // required .gazebo.msgs.Time stamp = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *stamp_);

    // required .gazebo.msgs.Quaternion orientation = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *orientation_);

    // required .gazebo.msgs.Vector3d angular_velocity = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *angular_velocity_);

    // required .gazebo.msgs.Vector3d linear_velocity = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *linear_velocity_);

    // required double roll_deg = 3;
    total_size += 1 + 8;

    // required double pitch_deg = 4;
    total_size += 1 + 8;

    // required double heading_deg = 5;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 96u) {
    // optional .gazebo.msgs.Vector3d position = 13;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *position_);
    }

    // optional .gazebo.msgs.Vector3d linear_accel = 14;
    if (has_linear_accel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *linear_accel_);
    }

  }
  if (_has_bits_[8 / 32] & 15360u) {
    // optional double heave = 9;
    if (has_heave()) {
      total_size += 1 + 8;
    }

    // optional double latitude_deg = 10;
    if (has_latitude_deg()) {
      total_size += 1 + 8;
    }

    // optional double longitude_deg = 11;
    if (has_longitude_deg()) {
      total_size += 1 + 8;
    }

    // optional double altitude = 12;
    if (has_altitude()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ins::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ds_sim.msgs.Ins)
  GOOGLE_DCHECK_NE(&from, this);
  const Ins* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ins>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ds_sim.msgs.Ins)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ds_sim.msgs.Ins)
    MergeFrom(*source);
  }
}

void Ins::MergeFrom(const Ins& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ds_sim.msgs.Ins)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_entity_name();
      entity_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.entity_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_stamp()->::gazebo::msgs::Time::MergeFrom(from.stamp());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_orientation()->::gazebo::msgs::Quaternion::MergeFrom(from.orientation());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_angular_velocity()->::gazebo::msgs::Vector3d::MergeFrom(from.angular_velocity());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_linear_velocity()->::gazebo::msgs::Vector3d::MergeFrom(from.linear_velocity());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_position()->::gazebo::msgs::Vector3d::MergeFrom(from.position());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_linear_accel()->::gazebo::msgs::Vector3d::MergeFrom(from.linear_accel());
    }
    if (cached_has_bits & 0x00000080u) {
      roll_deg_ = from.roll_deg_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16128u) {
    if (cached_has_bits & 0x00000100u) {
      pitch_deg_ = from.pitch_deg_;
    }
    if (cached_has_bits & 0x00000200u) {
      heading_deg_ = from.heading_deg_;
    }
    if (cached_has_bits & 0x00000400u) {
      heave_ = from.heave_;
    }
    if (cached_has_bits & 0x00000800u) {
      latitude_deg_ = from.latitude_deg_;
    }
    if (cached_has_bits & 0x00001000u) {
      longitude_deg_ = from.longitude_deg_;
    }
    if (cached_has_bits & 0x00002000u) {
      altitude_ = from.altitude_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Ins::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ds_sim.msgs.Ins)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ins::CopyFrom(const Ins& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ds_sim.msgs.Ins)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ins::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000039f) != 0x0000039f) return false;
  if (has_stamp()) {
    if (!this->stamp_->IsInitialized()) return false;
  }
  if (has_orientation()) {
    if (!this->orientation_->IsInitialized()) return false;
  }
  if (has_angular_velocity()) {
    if (!this->angular_velocity_->IsInitialized()) return false;
  }
  if (has_linear_velocity()) {
    if (!this->linear_velocity_->IsInitialized()) return false;
  }
  if (has_position()) {
    if (!this->position_->IsInitialized()) return false;
  }
  if (has_linear_accel()) {
    if (!this->linear_accel_->IsInitialized()) return false;
  }
  return true;
}

void Ins::Swap(Ins* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ins::InternalSwap(Ins* other) {
  using std::swap;
  entity_name_.Swap(&other->entity_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(stamp_, other->stamp_);
  swap(orientation_, other->orientation_);
  swap(angular_velocity_, other->angular_velocity_);
  swap(linear_velocity_, other->linear_velocity_);
  swap(position_, other->position_);
  swap(linear_accel_, other->linear_accel_);
  swap(roll_deg_, other->roll_deg_);
  swap(pitch_deg_, other->pitch_deg_);
  swap(heading_deg_, other->heading_deg_);
  swap(heave_, other->heave_);
  swap(latitude_deg_, other->latitude_deg_);
  swap(longitude_deg_, other->longitude_deg_);
  swap(altitude_, other->altitude_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Ins::GetMetadata() const {
  protobuf_SensorIns_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_SensorIns_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msgs
}  // namespace ds_sim
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ds_sim::msgs::Ins* Arena::CreateMaybeMessage< ::ds_sim::msgs::Ins >(Arena* arena) {
  return Arena::CreateInternal< ::ds_sim::msgs::Ins >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
