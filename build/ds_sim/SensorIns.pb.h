// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SensorIns.proto

#ifndef PROTOBUF_INCLUDED_SensorIns_2eproto
#define PROTOBUF_INCLUDED_SensorIns_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "time.pb.h"
#include "vector3d.pb.h"
#include "quaternion.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_SensorIns_2eproto 

namespace protobuf_SensorIns_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_SensorIns_2eproto
namespace ds_sim {
namespace msgs {
class Ins;
class InsDefaultTypeInternal;
extern InsDefaultTypeInternal _Ins_default_instance_;
}  // namespace msgs
}  // namespace ds_sim
namespace google {
namespace protobuf {
template<> ::ds_sim::msgs::Ins* Arena::CreateMaybeMessage<::ds_sim::msgs::Ins>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace ds_sim {
namespace msgs {

// ===================================================================

class Ins : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ds_sim.msgs.Ins) */ {
 public:
  Ins();
  virtual ~Ins();

  Ins(const Ins& from);

  inline Ins& operator=(const Ins& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Ins(Ins&& from) noexcept
    : Ins() {
    *this = ::std::move(from);
  }

  inline Ins& operator=(Ins&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Ins& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ins* internal_default_instance() {
    return reinterpret_cast<const Ins*>(
               &_Ins_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Ins* other);
  friend void swap(Ins& a, Ins& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ins* New() const final {
    return CreateMaybeMessage<Ins>(NULL);
  }

  Ins* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Ins>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Ins& from);
  void MergeFrom(const Ins& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ins* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string entity_name = 2;
  bool has_entity_name() const;
  void clear_entity_name();
  static const int kEntityNameFieldNumber = 2;
  const ::std::string& entity_name() const;
  void set_entity_name(const ::std::string& value);
  #if LANG_CXX11
  void set_entity_name(::std::string&& value);
  #endif
  void set_entity_name(const char* value);
  void set_entity_name(const char* value, size_t size);
  ::std::string* mutable_entity_name();
  ::std::string* release_entity_name();
  void set_allocated_entity_name(::std::string* entity_name);

  // required .gazebo.msgs.Time stamp = 1;
  bool has_stamp() const;
  void clear_stamp();
  static const int kStampFieldNumber = 1;
  private:
  const ::gazebo::msgs::Time& _internal_stamp() const;
  public:
  const ::gazebo::msgs::Time& stamp() const;
  ::gazebo::msgs::Time* release_stamp();
  ::gazebo::msgs::Time* mutable_stamp();
  void set_allocated_stamp(::gazebo::msgs::Time* stamp);

  // required .gazebo.msgs.Quaternion orientation = 6;
  bool has_orientation() const;
  void clear_orientation();
  static const int kOrientationFieldNumber = 6;
  private:
  const ::gazebo::msgs::Quaternion& _internal_orientation() const;
  public:
  const ::gazebo::msgs::Quaternion& orientation() const;
  ::gazebo::msgs::Quaternion* release_orientation();
  ::gazebo::msgs::Quaternion* mutable_orientation();
  void set_allocated_orientation(::gazebo::msgs::Quaternion* orientation);

  // required .gazebo.msgs.Vector3d angular_velocity = 7;
  bool has_angular_velocity() const;
  void clear_angular_velocity();
  static const int kAngularVelocityFieldNumber = 7;
  private:
  const ::gazebo::msgs::Vector3d& _internal_angular_velocity() const;
  public:
  const ::gazebo::msgs::Vector3d& angular_velocity() const;
  ::gazebo::msgs::Vector3d* release_angular_velocity();
  ::gazebo::msgs::Vector3d* mutable_angular_velocity();
  void set_allocated_angular_velocity(::gazebo::msgs::Vector3d* angular_velocity);

  // required .gazebo.msgs.Vector3d linear_velocity = 8;
  bool has_linear_velocity() const;
  void clear_linear_velocity();
  static const int kLinearVelocityFieldNumber = 8;
  private:
  const ::gazebo::msgs::Vector3d& _internal_linear_velocity() const;
  public:
  const ::gazebo::msgs::Vector3d& linear_velocity() const;
  ::gazebo::msgs::Vector3d* release_linear_velocity();
  ::gazebo::msgs::Vector3d* mutable_linear_velocity();
  void set_allocated_linear_velocity(::gazebo::msgs::Vector3d* linear_velocity);

  // optional .gazebo.msgs.Vector3d position = 13;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 13;
  private:
  const ::gazebo::msgs::Vector3d& _internal_position() const;
  public:
  const ::gazebo::msgs::Vector3d& position() const;
  ::gazebo::msgs::Vector3d* release_position();
  ::gazebo::msgs::Vector3d* mutable_position();
  void set_allocated_position(::gazebo::msgs::Vector3d* position);

  // optional .gazebo.msgs.Vector3d linear_accel = 14;
  bool has_linear_accel() const;
  void clear_linear_accel();
  static const int kLinearAccelFieldNumber = 14;
  private:
  const ::gazebo::msgs::Vector3d& _internal_linear_accel() const;
  public:
  const ::gazebo::msgs::Vector3d& linear_accel() const;
  ::gazebo::msgs::Vector3d* release_linear_accel();
  ::gazebo::msgs::Vector3d* mutable_linear_accel();
  void set_allocated_linear_accel(::gazebo::msgs::Vector3d* linear_accel);

  // required double roll_deg = 3;
  bool has_roll_deg() const;
  void clear_roll_deg();
  static const int kRollDegFieldNumber = 3;
  double roll_deg() const;
  void set_roll_deg(double value);

  // required double pitch_deg = 4;
  bool has_pitch_deg() const;
  void clear_pitch_deg();
  static const int kPitchDegFieldNumber = 4;
  double pitch_deg() const;
  void set_pitch_deg(double value);

  // required double heading_deg = 5;
  bool has_heading_deg() const;
  void clear_heading_deg();
  static const int kHeadingDegFieldNumber = 5;
  double heading_deg() const;
  void set_heading_deg(double value);

  // optional double heave = 9;
  bool has_heave() const;
  void clear_heave();
  static const int kHeaveFieldNumber = 9;
  double heave() const;
  void set_heave(double value);

  // optional double latitude_deg = 10;
  bool has_latitude_deg() const;
  void clear_latitude_deg();
  static const int kLatitudeDegFieldNumber = 10;
  double latitude_deg() const;
  void set_latitude_deg(double value);

  // optional double longitude_deg = 11;
  bool has_longitude_deg() const;
  void clear_longitude_deg();
  static const int kLongitudeDegFieldNumber = 11;
  double longitude_deg() const;
  void set_longitude_deg(double value);

  // optional double altitude = 12;
  bool has_altitude() const;
  void clear_altitude();
  static const int kAltitudeFieldNumber = 12;
  double altitude() const;
  void set_altitude(double value);

  // @@protoc_insertion_point(class_scope:ds_sim.msgs.Ins)
 private:
  void set_has_stamp();
  void clear_has_stamp();
  void set_has_entity_name();
  void clear_has_entity_name();
  void set_has_roll_deg();
  void clear_has_roll_deg();
  void set_has_pitch_deg();
  void clear_has_pitch_deg();
  void set_has_heading_deg();
  void clear_has_heading_deg();
  void set_has_orientation();
  void clear_has_orientation();
  void set_has_angular_velocity();
  void clear_has_angular_velocity();
  void set_has_linear_velocity();
  void clear_has_linear_velocity();
  void set_has_heave();
  void clear_has_heave();
  void set_has_latitude_deg();
  void clear_has_latitude_deg();
  void set_has_longitude_deg();
  void clear_has_longitude_deg();
  void set_has_altitude();
  void clear_has_altitude();
  void set_has_position();
  void clear_has_position();
  void set_has_linear_accel();
  void clear_has_linear_accel();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr entity_name_;
  ::gazebo::msgs::Time* stamp_;
  ::gazebo::msgs::Quaternion* orientation_;
  ::gazebo::msgs::Vector3d* angular_velocity_;
  ::gazebo::msgs::Vector3d* linear_velocity_;
  ::gazebo::msgs::Vector3d* position_;
  ::gazebo::msgs::Vector3d* linear_accel_;
  double roll_deg_;
  double pitch_deg_;
  double heading_deg_;
  double heave_;
  double latitude_deg_;
  double longitude_deg_;
  double altitude_;
  friend struct ::protobuf_SensorIns_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Ins

// required .gazebo.msgs.Time stamp = 1;
inline bool Ins::has_stamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ins::set_has_stamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Ins::clear_has_stamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::gazebo::msgs::Time& Ins::_internal_stamp() const {
  return *stamp_;
}
inline const ::gazebo::msgs::Time& Ins::stamp() const {
  const ::gazebo::msgs::Time* p = stamp_;
  // @@protoc_insertion_point(field_get:ds_sim.msgs.Ins.stamp)
  return p != NULL ? *p : *reinterpret_cast<const ::gazebo::msgs::Time*>(
      &::gazebo::msgs::_Time_default_instance_);
}
inline ::gazebo::msgs::Time* Ins::release_stamp() {
  // @@protoc_insertion_point(field_release:ds_sim.msgs.Ins.stamp)
  clear_has_stamp();
  ::gazebo::msgs::Time* temp = stamp_;
  stamp_ = NULL;
  return temp;
}
inline ::gazebo::msgs::Time* Ins::mutable_stamp() {
  set_has_stamp();
  if (stamp_ == NULL) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::Time>(GetArenaNoVirtual());
    stamp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ds_sim.msgs.Ins.stamp)
  return stamp_;
}
inline void Ins::set_allocated_stamp(::gazebo::msgs::Time* stamp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(stamp_);
  }
  if (stamp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      stamp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, stamp, submessage_arena);
    }
    set_has_stamp();
  } else {
    clear_has_stamp();
  }
  stamp_ = stamp;
  // @@protoc_insertion_point(field_set_allocated:ds_sim.msgs.Ins.stamp)
}

// required string entity_name = 2;
inline bool Ins::has_entity_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ins::set_has_entity_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Ins::clear_has_entity_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Ins::clear_entity_name() {
  entity_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_entity_name();
}
inline const ::std::string& Ins::entity_name() const {
  // @@protoc_insertion_point(field_get:ds_sim.msgs.Ins.entity_name)
  return entity_name_.GetNoArena();
}
inline void Ins::set_entity_name(const ::std::string& value) {
  set_has_entity_name();
  entity_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ds_sim.msgs.Ins.entity_name)
}
#if LANG_CXX11
inline void Ins::set_entity_name(::std::string&& value) {
  set_has_entity_name();
  entity_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ds_sim.msgs.Ins.entity_name)
}
#endif
inline void Ins::set_entity_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_entity_name();
  entity_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ds_sim.msgs.Ins.entity_name)
}
inline void Ins::set_entity_name(const char* value, size_t size) {
  set_has_entity_name();
  entity_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ds_sim.msgs.Ins.entity_name)
}
inline ::std::string* Ins::mutable_entity_name() {
  set_has_entity_name();
  // @@protoc_insertion_point(field_mutable:ds_sim.msgs.Ins.entity_name)
  return entity_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Ins::release_entity_name() {
  // @@protoc_insertion_point(field_release:ds_sim.msgs.Ins.entity_name)
  if (!has_entity_name()) {
    return NULL;
  }
  clear_has_entity_name();
  return entity_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Ins::set_allocated_entity_name(::std::string* entity_name) {
  if (entity_name != NULL) {
    set_has_entity_name();
  } else {
    clear_has_entity_name();
  }
  entity_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), entity_name);
  // @@protoc_insertion_point(field_set_allocated:ds_sim.msgs.Ins.entity_name)
}

// required double roll_deg = 3;
inline bool Ins::has_roll_deg() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Ins::set_has_roll_deg() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Ins::clear_has_roll_deg() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Ins::clear_roll_deg() {
  roll_deg_ = 0;
  clear_has_roll_deg();
}
inline double Ins::roll_deg() const {
  // @@protoc_insertion_point(field_get:ds_sim.msgs.Ins.roll_deg)
  return roll_deg_;
}
inline void Ins::set_roll_deg(double value) {
  set_has_roll_deg();
  roll_deg_ = value;
  // @@protoc_insertion_point(field_set:ds_sim.msgs.Ins.roll_deg)
}

// required double pitch_deg = 4;
inline bool Ins::has_pitch_deg() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Ins::set_has_pitch_deg() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Ins::clear_has_pitch_deg() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Ins::clear_pitch_deg() {
  pitch_deg_ = 0;
  clear_has_pitch_deg();
}
inline double Ins::pitch_deg() const {
  // @@protoc_insertion_point(field_get:ds_sim.msgs.Ins.pitch_deg)
  return pitch_deg_;
}
inline void Ins::set_pitch_deg(double value) {
  set_has_pitch_deg();
  pitch_deg_ = value;
  // @@protoc_insertion_point(field_set:ds_sim.msgs.Ins.pitch_deg)
}

// required double heading_deg = 5;
inline bool Ins::has_heading_deg() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Ins::set_has_heading_deg() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Ins::clear_has_heading_deg() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Ins::clear_heading_deg() {
  heading_deg_ = 0;
  clear_has_heading_deg();
}
inline double Ins::heading_deg() const {
  // @@protoc_insertion_point(field_get:ds_sim.msgs.Ins.heading_deg)
  return heading_deg_;
}
inline void Ins::set_heading_deg(double value) {
  set_has_heading_deg();
  heading_deg_ = value;
  // @@protoc_insertion_point(field_set:ds_sim.msgs.Ins.heading_deg)
}

// required .gazebo.msgs.Quaternion orientation = 6;
inline bool Ins::has_orientation() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ins::set_has_orientation() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Ins::clear_has_orientation() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::gazebo::msgs::Quaternion& Ins::_internal_orientation() const {
  return *orientation_;
}
inline const ::gazebo::msgs::Quaternion& Ins::orientation() const {
  const ::gazebo::msgs::Quaternion* p = orientation_;
  // @@protoc_insertion_point(field_get:ds_sim.msgs.Ins.orientation)
  return p != NULL ? *p : *reinterpret_cast<const ::gazebo::msgs::Quaternion*>(
      &::gazebo::msgs::_Quaternion_default_instance_);
}
inline ::gazebo::msgs::Quaternion* Ins::release_orientation() {
  // @@protoc_insertion_point(field_release:ds_sim.msgs.Ins.orientation)
  clear_has_orientation();
  ::gazebo::msgs::Quaternion* temp = orientation_;
  orientation_ = NULL;
  return temp;
}
inline ::gazebo::msgs::Quaternion* Ins::mutable_orientation() {
  set_has_orientation();
  if (orientation_ == NULL) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::Quaternion>(GetArenaNoVirtual());
    orientation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ds_sim.msgs.Ins.orientation)
  return orientation_;
}
inline void Ins::set_allocated_orientation(::gazebo::msgs::Quaternion* orientation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(orientation_);
  }
  if (orientation) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      orientation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    set_has_orientation();
  } else {
    clear_has_orientation();
  }
  orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:ds_sim.msgs.Ins.orientation)
}

// required .gazebo.msgs.Vector3d angular_velocity = 7;
inline bool Ins::has_angular_velocity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ins::set_has_angular_velocity() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Ins::clear_has_angular_velocity() {
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::gazebo::msgs::Vector3d& Ins::_internal_angular_velocity() const {
  return *angular_velocity_;
}
inline const ::gazebo::msgs::Vector3d& Ins::angular_velocity() const {
  const ::gazebo::msgs::Vector3d* p = angular_velocity_;
  // @@protoc_insertion_point(field_get:ds_sim.msgs.Ins.angular_velocity)
  return p != NULL ? *p : *reinterpret_cast<const ::gazebo::msgs::Vector3d*>(
      &::gazebo::msgs::_Vector3d_default_instance_);
}
inline ::gazebo::msgs::Vector3d* Ins::release_angular_velocity() {
  // @@protoc_insertion_point(field_release:ds_sim.msgs.Ins.angular_velocity)
  clear_has_angular_velocity();
  ::gazebo::msgs::Vector3d* temp = angular_velocity_;
  angular_velocity_ = NULL;
  return temp;
}
inline ::gazebo::msgs::Vector3d* Ins::mutable_angular_velocity() {
  set_has_angular_velocity();
  if (angular_velocity_ == NULL) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::Vector3d>(GetArenaNoVirtual());
    angular_velocity_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ds_sim.msgs.Ins.angular_velocity)
  return angular_velocity_;
}
inline void Ins::set_allocated_angular_velocity(::gazebo::msgs::Vector3d* angular_velocity) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(angular_velocity_);
  }
  if (angular_velocity) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      angular_velocity = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, angular_velocity, submessage_arena);
    }
    set_has_angular_velocity();
  } else {
    clear_has_angular_velocity();
  }
  angular_velocity_ = angular_velocity;
  // @@protoc_insertion_point(field_set_allocated:ds_sim.msgs.Ins.angular_velocity)
}

// required .gazebo.msgs.Vector3d linear_velocity = 8;
inline bool Ins::has_linear_velocity() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Ins::set_has_linear_velocity() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Ins::clear_has_linear_velocity() {
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::gazebo::msgs::Vector3d& Ins::_internal_linear_velocity() const {
  return *linear_velocity_;
}
inline const ::gazebo::msgs::Vector3d& Ins::linear_velocity() const {
  const ::gazebo::msgs::Vector3d* p = linear_velocity_;
  // @@protoc_insertion_point(field_get:ds_sim.msgs.Ins.linear_velocity)
  return p != NULL ? *p : *reinterpret_cast<const ::gazebo::msgs::Vector3d*>(
      &::gazebo::msgs::_Vector3d_default_instance_);
}
inline ::gazebo::msgs::Vector3d* Ins::release_linear_velocity() {
  // @@protoc_insertion_point(field_release:ds_sim.msgs.Ins.linear_velocity)
  clear_has_linear_velocity();
  ::gazebo::msgs::Vector3d* temp = linear_velocity_;
  linear_velocity_ = NULL;
  return temp;
}
inline ::gazebo::msgs::Vector3d* Ins::mutable_linear_velocity() {
  set_has_linear_velocity();
  if (linear_velocity_ == NULL) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::Vector3d>(GetArenaNoVirtual());
    linear_velocity_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ds_sim.msgs.Ins.linear_velocity)
  return linear_velocity_;
}
inline void Ins::set_allocated_linear_velocity(::gazebo::msgs::Vector3d* linear_velocity) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(linear_velocity_);
  }
  if (linear_velocity) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      linear_velocity = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, linear_velocity, submessage_arena);
    }
    set_has_linear_velocity();
  } else {
    clear_has_linear_velocity();
  }
  linear_velocity_ = linear_velocity;
  // @@protoc_insertion_point(field_set_allocated:ds_sim.msgs.Ins.linear_velocity)
}

// optional double heave = 9;
inline bool Ins::has_heave() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Ins::set_has_heave() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Ins::clear_has_heave() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Ins::clear_heave() {
  heave_ = 0;
  clear_has_heave();
}
inline double Ins::heave() const {
  // @@protoc_insertion_point(field_get:ds_sim.msgs.Ins.heave)
  return heave_;
}
inline void Ins::set_heave(double value) {
  set_has_heave();
  heave_ = value;
  // @@protoc_insertion_point(field_set:ds_sim.msgs.Ins.heave)
}

// optional double latitude_deg = 10;
inline bool Ins::has_latitude_deg() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Ins::set_has_latitude_deg() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Ins::clear_has_latitude_deg() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Ins::clear_latitude_deg() {
  latitude_deg_ = 0;
  clear_has_latitude_deg();
}
inline double Ins::latitude_deg() const {
  // @@protoc_insertion_point(field_get:ds_sim.msgs.Ins.latitude_deg)
  return latitude_deg_;
}
inline void Ins::set_latitude_deg(double value) {
  set_has_latitude_deg();
  latitude_deg_ = value;
  // @@protoc_insertion_point(field_set:ds_sim.msgs.Ins.latitude_deg)
}

// optional double longitude_deg = 11;
inline bool Ins::has_longitude_deg() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Ins::set_has_longitude_deg() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Ins::clear_has_longitude_deg() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Ins::clear_longitude_deg() {
  longitude_deg_ = 0;
  clear_has_longitude_deg();
}
inline double Ins::longitude_deg() const {
  // @@protoc_insertion_point(field_get:ds_sim.msgs.Ins.longitude_deg)
  return longitude_deg_;
}
inline void Ins::set_longitude_deg(double value) {
  set_has_longitude_deg();
  longitude_deg_ = value;
  // @@protoc_insertion_point(field_set:ds_sim.msgs.Ins.longitude_deg)
}

// optional double altitude = 12;
inline bool Ins::has_altitude() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Ins::set_has_altitude() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Ins::clear_has_altitude() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Ins::clear_altitude() {
  altitude_ = 0;
  clear_has_altitude();
}
inline double Ins::altitude() const {
  // @@protoc_insertion_point(field_get:ds_sim.msgs.Ins.altitude)
  return altitude_;
}
inline void Ins::set_altitude(double value) {
  set_has_altitude();
  altitude_ = value;
  // @@protoc_insertion_point(field_set:ds_sim.msgs.Ins.altitude)
}

// optional .gazebo.msgs.Vector3d position = 13;
inline bool Ins::has_position() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Ins::set_has_position() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Ins::clear_has_position() {
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::gazebo::msgs::Vector3d& Ins::_internal_position() const {
  return *position_;
}
inline const ::gazebo::msgs::Vector3d& Ins::position() const {
  const ::gazebo::msgs::Vector3d* p = position_;
  // @@protoc_insertion_point(field_get:ds_sim.msgs.Ins.position)
  return p != NULL ? *p : *reinterpret_cast<const ::gazebo::msgs::Vector3d*>(
      &::gazebo::msgs::_Vector3d_default_instance_);
}
inline ::gazebo::msgs::Vector3d* Ins::release_position() {
  // @@protoc_insertion_point(field_release:ds_sim.msgs.Ins.position)
  clear_has_position();
  ::gazebo::msgs::Vector3d* temp = position_;
  position_ = NULL;
  return temp;
}
inline ::gazebo::msgs::Vector3d* Ins::mutable_position() {
  set_has_position();
  if (position_ == NULL) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::Vector3d>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ds_sim.msgs.Ins.position)
  return position_;
}
inline void Ins::set_allocated_position(::gazebo::msgs::Vector3d* position) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(position_);
  }
  if (position) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      position = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    set_has_position();
  } else {
    clear_has_position();
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:ds_sim.msgs.Ins.position)
}

// optional .gazebo.msgs.Vector3d linear_accel = 14;
inline bool Ins::has_linear_accel() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Ins::set_has_linear_accel() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Ins::clear_has_linear_accel() {
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::gazebo::msgs::Vector3d& Ins::_internal_linear_accel() const {
  return *linear_accel_;
}
inline const ::gazebo::msgs::Vector3d& Ins::linear_accel() const {
  const ::gazebo::msgs::Vector3d* p = linear_accel_;
  // @@protoc_insertion_point(field_get:ds_sim.msgs.Ins.linear_accel)
  return p != NULL ? *p : *reinterpret_cast<const ::gazebo::msgs::Vector3d*>(
      &::gazebo::msgs::_Vector3d_default_instance_);
}
inline ::gazebo::msgs::Vector3d* Ins::release_linear_accel() {
  // @@protoc_insertion_point(field_release:ds_sim.msgs.Ins.linear_accel)
  clear_has_linear_accel();
  ::gazebo::msgs::Vector3d* temp = linear_accel_;
  linear_accel_ = NULL;
  return temp;
}
inline ::gazebo::msgs::Vector3d* Ins::mutable_linear_accel() {
  set_has_linear_accel();
  if (linear_accel_ == NULL) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::Vector3d>(GetArenaNoVirtual());
    linear_accel_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ds_sim.msgs.Ins.linear_accel)
  return linear_accel_;
}
inline void Ins::set_allocated_linear_accel(::gazebo::msgs::Vector3d* linear_accel) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(linear_accel_);
  }
  if (linear_accel) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      linear_accel = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, linear_accel, submessage_arena);
    }
    set_has_linear_accel();
  } else {
    clear_has_linear_accel();
  }
  linear_accel_ = linear_accel;
  // @@protoc_insertion_point(field_set_allocated:ds_sim.msgs.Ins.linear_accel)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace ds_sim

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_SensorIns_2eproto
