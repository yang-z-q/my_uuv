// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SensorDepth.proto

#ifndef PROTOBUF_INCLUDED_SensorDepth_2eproto
#define PROTOBUF_INCLUDED_SensorDepth_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "time.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_SensorDepth_2eproto 

namespace protobuf_SensorDepth_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_SensorDepth_2eproto
namespace ds_sim {
namespace msgs {
class PressureDepth;
class PressureDepthDefaultTypeInternal;
extern PressureDepthDefaultTypeInternal _PressureDepth_default_instance_;
}  // namespace msgs
}  // namespace ds_sim
namespace google {
namespace protobuf {
template<> ::ds_sim::msgs::PressureDepth* Arena::CreateMaybeMessage<::ds_sim::msgs::PressureDepth>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace ds_sim {
namespace msgs {

// ===================================================================

class PressureDepth : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ds_sim.msgs.PressureDepth) */ {
 public:
  PressureDepth();
  virtual ~PressureDepth();

  PressureDepth(const PressureDepth& from);

  inline PressureDepth& operator=(const PressureDepth& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PressureDepth(PressureDepth&& from) noexcept
    : PressureDepth() {
    *this = ::std::move(from);
  }

  inline PressureDepth& operator=(PressureDepth&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PressureDepth& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PressureDepth* internal_default_instance() {
    return reinterpret_cast<const PressureDepth*>(
               &_PressureDepth_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(PressureDepth* other);
  friend void swap(PressureDepth& a, PressureDepth& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PressureDepth* New() const final {
    return CreateMaybeMessage<PressureDepth>(NULL);
  }

  PressureDepth* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PressureDepth>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PressureDepth& from);
  void MergeFrom(const PressureDepth& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PressureDepth* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .gazebo.msgs.Time stamp = 1;
  bool has_stamp() const;
  void clear_stamp();
  static const int kStampFieldNumber = 1;
  private:
  const ::gazebo::msgs::Time& _internal_stamp() const;
  public:
  const ::gazebo::msgs::Time& stamp() const;
  ::gazebo::msgs::Time* release_stamp();
  ::gazebo::msgs::Time* mutable_stamp();
  void set_allocated_stamp(::gazebo::msgs::Time* stamp);

  // required double depth = 2;
  bool has_depth() const;
  void clear_depth();
  static const int kDepthFieldNumber = 2;
  double depth() const;
  void set_depth(double value);

  // required double pressure_dbar = 3;
  bool has_pressure_dbar() const;
  void clear_pressure_dbar();
  static const int kPressureDbarFieldNumber = 3;
  double pressure_dbar() const;
  void set_pressure_dbar(double value);

  // required double latitude_deg = 4;
  bool has_latitude_deg() const;
  void clear_latitude_deg();
  static const int kLatitudeDegFieldNumber = 4;
  double latitude_deg() const;
  void set_latitude_deg(double value);

  // @@protoc_insertion_point(class_scope:ds_sim.msgs.PressureDepth)
 private:
  void set_has_stamp();
  void clear_has_stamp();
  void set_has_depth();
  void clear_has_depth();
  void set_has_pressure_dbar();
  void clear_has_pressure_dbar();
  void set_has_latitude_deg();
  void clear_has_latitude_deg();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::gazebo::msgs::Time* stamp_;
  double depth_;
  double pressure_dbar_;
  double latitude_deg_;
  friend struct ::protobuf_SensorDepth_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PressureDepth

// required .gazebo.msgs.Time stamp = 1;
inline bool PressureDepth::has_stamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PressureDepth::set_has_stamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PressureDepth::clear_has_stamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::gazebo::msgs::Time& PressureDepth::_internal_stamp() const {
  return *stamp_;
}
inline const ::gazebo::msgs::Time& PressureDepth::stamp() const {
  const ::gazebo::msgs::Time* p = stamp_;
  // @@protoc_insertion_point(field_get:ds_sim.msgs.PressureDepth.stamp)
  return p != NULL ? *p : *reinterpret_cast<const ::gazebo::msgs::Time*>(
      &::gazebo::msgs::_Time_default_instance_);
}
inline ::gazebo::msgs::Time* PressureDepth::release_stamp() {
  // @@protoc_insertion_point(field_release:ds_sim.msgs.PressureDepth.stamp)
  clear_has_stamp();
  ::gazebo::msgs::Time* temp = stamp_;
  stamp_ = NULL;
  return temp;
}
inline ::gazebo::msgs::Time* PressureDepth::mutable_stamp() {
  set_has_stamp();
  if (stamp_ == NULL) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::Time>(GetArenaNoVirtual());
    stamp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ds_sim.msgs.PressureDepth.stamp)
  return stamp_;
}
inline void PressureDepth::set_allocated_stamp(::gazebo::msgs::Time* stamp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(stamp_);
  }
  if (stamp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      stamp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, stamp, submessage_arena);
    }
    set_has_stamp();
  } else {
    clear_has_stamp();
  }
  stamp_ = stamp;
  // @@protoc_insertion_point(field_set_allocated:ds_sim.msgs.PressureDepth.stamp)
}

// required double depth = 2;
inline bool PressureDepth::has_depth() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PressureDepth::set_has_depth() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PressureDepth::clear_has_depth() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PressureDepth::clear_depth() {
  depth_ = 0;
  clear_has_depth();
}
inline double PressureDepth::depth() const {
  // @@protoc_insertion_point(field_get:ds_sim.msgs.PressureDepth.depth)
  return depth_;
}
inline void PressureDepth::set_depth(double value) {
  set_has_depth();
  depth_ = value;
  // @@protoc_insertion_point(field_set:ds_sim.msgs.PressureDepth.depth)
}

// required double pressure_dbar = 3;
inline bool PressureDepth::has_pressure_dbar() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PressureDepth::set_has_pressure_dbar() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PressureDepth::clear_has_pressure_dbar() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PressureDepth::clear_pressure_dbar() {
  pressure_dbar_ = 0;
  clear_has_pressure_dbar();
}
inline double PressureDepth::pressure_dbar() const {
  // @@protoc_insertion_point(field_get:ds_sim.msgs.PressureDepth.pressure_dbar)
  return pressure_dbar_;
}
inline void PressureDepth::set_pressure_dbar(double value) {
  set_has_pressure_dbar();
  pressure_dbar_ = value;
  // @@protoc_insertion_point(field_set:ds_sim.msgs.PressureDepth.pressure_dbar)
}

// required double latitude_deg = 4;
inline bool PressureDepth::has_latitude_deg() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PressureDepth::set_has_latitude_deg() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PressureDepth::clear_has_latitude_deg() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PressureDepth::clear_latitude_deg() {
  latitude_deg_ = 0;
  clear_has_latitude_deg();
}
inline double PressureDepth::latitude_deg() const {
  // @@protoc_insertion_point(field_get:ds_sim.msgs.PressureDepth.latitude_deg)
  return latitude_deg_;
}
inline void PressureDepth::set_latitude_deg(double value) {
  set_has_latitude_deg();
  latitude_deg_ = value;
  // @@protoc_insertion_point(field_set:ds_sim.msgs.PressureDepth.latitude_deg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace ds_sim

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_SensorDepth_2eproto
