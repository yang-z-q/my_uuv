// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SensorPressure.proto

#ifndef PROTOBUF_INCLUDED_SensorPressure_2eproto
#define PROTOBUF_INCLUDED_SensorPressure_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_SensorPressure_2eproto 

namespace protobuf_SensorPressure_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_SensorPressure_2eproto
namespace sensor_msgs {
namespace msgs {
class Pressure;
class PressureDefaultTypeInternal;
extern PressureDefaultTypeInternal _Pressure_default_instance_;
}  // namespace msgs
}  // namespace sensor_msgs
namespace google {
namespace protobuf {
template<> ::sensor_msgs::msgs::Pressure* Arena::CreateMaybeMessage<::sensor_msgs::msgs::Pressure>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace sensor_msgs {
namespace msgs {

// ===================================================================

class Pressure : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensor_msgs.msgs.Pressure) */ {
 public:
  Pressure();
  virtual ~Pressure();

  Pressure(const Pressure& from);

  inline Pressure& operator=(const Pressure& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Pressure(Pressure&& from) noexcept
    : Pressure() {
    *this = ::std::move(from);
  }

  inline Pressure& operator=(Pressure&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pressure& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pressure* internal_default_instance() {
    return reinterpret_cast<const Pressure*>(
               &_Pressure_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Pressure* other);
  friend void swap(Pressure& a, Pressure& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Pressure* New() const final {
    return CreateMaybeMessage<Pressure>(NULL);
  }

  Pressure* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Pressure>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Pressure& from);
  void MergeFrom(const Pressure& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pressure* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double pressure = 1 [default = 0];
  bool has_pressure() const;
  void clear_pressure();
  static const int kPressureFieldNumber = 1;
  double pressure() const;
  void set_pressure(double value);

  // required double stddev = 2 [default = -1];
  bool has_stddev() const;
  void clear_stddev();
  static const int kStddevFieldNumber = 2;
  double stddev() const;
  void set_stddev(double value);

  // optional double depth = 3 [default = -1];
  bool has_depth() const;
  void clear_depth();
  static const int kDepthFieldNumber = 3;
  double depth() const;
  void set_depth(double value);

  // @@protoc_insertion_point(class_scope:sensor_msgs.msgs.Pressure)
 private:
  void set_has_pressure();
  void clear_has_pressure();
  void set_has_stddev();
  void clear_has_stddev();
  void set_has_depth();
  void clear_has_depth();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  double pressure_;
  double stddev_;
  double depth_;
  friend struct ::protobuf_SensorPressure_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Pressure

// required double pressure = 1 [default = 0];
inline bool Pressure::has_pressure() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Pressure::set_has_pressure() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Pressure::clear_has_pressure() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Pressure::clear_pressure() {
  pressure_ = 0;
  clear_has_pressure();
}
inline double Pressure::pressure() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.Pressure.pressure)
  return pressure_;
}
inline void Pressure::set_pressure(double value) {
  set_has_pressure();
  pressure_ = value;
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.Pressure.pressure)
}

// required double stddev = 2 [default = -1];
inline bool Pressure::has_stddev() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Pressure::set_has_stddev() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Pressure::clear_has_stddev() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Pressure::clear_stddev() {
  stddev_ = -1;
  clear_has_stddev();
}
inline double Pressure::stddev() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.Pressure.stddev)
  return stddev_;
}
inline void Pressure::set_stddev(double value) {
  set_has_stddev();
  stddev_ = value;
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.Pressure.stddev)
}

// optional double depth = 3 [default = -1];
inline bool Pressure::has_depth() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Pressure::set_has_depth() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Pressure::clear_has_depth() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Pressure::clear_depth() {
  depth_ = -1;
  clear_has_depth();
}
inline double Pressure::depth() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.Pressure.depth)
  return depth_;
}
inline void Pressure::set_depth(double value) {
  set_has_depth();
  depth_ = value;
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.Pressure.depth)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace sensor_msgs

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_SensorPressure_2eproto
